
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003cc4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e2  00800060  00003cc4  00003d58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800142  00800142  00003e3a  2**0
                  ALLOC
  3 .stab         0000348c  00000000  00000000  00003e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013ef  00000000  00000000  000072c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000086b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000087f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008967  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a5b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b49b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c248  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c635  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ce03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 34 0c 	jmp	0x1868	; 0x1868 <__vector_3>
      10:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 9b 0b 	jmp	0x1736	; 0x1736 <__vector_8>
      24:	0c 94 35 0b 	jmp	0x166a	; 0x166a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 68 0b 	jmp	0x16d0	; 0x16d0 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ec       	ldi	r30, 0xC4	; 196
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 34       	cpi	r26, 0x42	; 66
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e4       	ldi	r26, 0x42	; 66
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 35       	cpi	r26, 0x54	; 84
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 60 1e 	jmp	0x3cc0	; 0x3cc0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e4 1d 	jmp	0x3bc8	; 0x3bc8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e2       	ldi	r26, 0x27	; 39
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 00 1e 	jmp	0x3c00	; 0x3c00 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f0 1d 	jmp	0x3be0	; 0x3be0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0c 1e 	jmp	0x3c18	; 0x3c18 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f0 1d 	jmp	0x3be0	; 0x3be0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0c 1e 	jmp	0x3c18	; 0x3c18 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e4 1d 	jmp	0x3bc8	; 0x3bc8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	87 e2       	ldi	r24, 0x27	; 39
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 00 1e 	jmp	0x3c00	; 0x3c00 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f0 1d 	jmp	0x3be0	; 0x3be0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0c 1e 	jmp	0x3c18	; 0x3c18 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f0 1d 	jmp	0x3be0	; 0x3be0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0c 1e 	jmp	0x3c18	; 0x3c18 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f0 1d 	jmp	0x3be0	; 0x3be0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0c 1e 	jmp	0x3c18	; 0x3c18 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f4 1d 	jmp	0x3be8	; 0x3be8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 10 1e 	jmp	0x3c20	; 0x3c20 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:

#include"HMI_ECU.h"


int main()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2e 97       	sbiw	r28, 0x0e	; 14
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61

	/* Initialize the LCD driver */
	LCD_init();
     b5a:	0e 94 62 13 	call	0x26c4	; 0x26c4 <LCD_init>
	Timer_setCallBack(Calculate_time,Timer0);
     b5e:	8e e1       	ldi	r24, 0x1E	; 30
     b60:	9b e0       	ldi	r25, 0x0B	; 11
     b62:	60 e0       	ldi	r22, 0x00	; 0
     b64:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <Timer_setCallBack>


	/* Initialize the uart driver */
    UART_init(&UART_Config);
     b68:	8f e2       	ldi	r24, 0x2F	; 47
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	0e 94 b3 1c 	call	0x3966	; 0x3966 <UART_init>
    LCD_clearScreen();
     b70:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_clearScreen>
    	LCD_displayStringRowColumn(0,0,"DOOR LOCKER SYS");
     b74:	20 e6       	ldi	r18, 0x60	; 96
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	a9 01       	movw	r20, r18
     b7e:	0e 94 6d 1c 	call	0x38da	; 0x38da <LCD_displayStringRowColumn>
    	LCD_displayStringRowColumn(1,4,"WELCOME");
     b82:	20 e7       	ldi	r18, 0x70	; 112
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	64 e0       	ldi	r22, 0x04	; 4
     b8a:	a9 01       	movw	r20, r18
     b8c:	0e 94 6d 1c 	call	0x38da	; 0x38da <LCD_displayStringRowColumn>

	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
     b90:	af e5       	ldi	r26, 0x5F	; 95
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	ef e5       	ldi	r30, 0x5F	; 95
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	80 68       	ori	r24, 0x80	; 128
     b9c:	8c 93       	st	X, r24
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	aa e7       	ldi	r26, 0x7A	; 122
     ba4:	b5 e4       	ldi	r27, 0x45	; 69
     ba6:	8b 87       	std	Y+11, r24	; 0x0b
     ba8:	9c 87       	std	Y+12, r25	; 0x0c
     baa:	ad 87       	std	Y+13, r26	; 0x0d
     bac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bae:	6b 85       	ldd	r22, Y+11	; 0x0b
     bb0:	7c 85       	ldd	r23, Y+12	; 0x0c
     bb2:	8d 85       	ldd	r24, Y+13	; 0x0d
     bb4:	9e 85       	ldd	r25, Y+14	; 0x0e
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	4a e7       	ldi	r20, 0x7A	; 122
     bbc:	53 e4       	ldi	r21, 0x43	; 67
     bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bc2:	dc 01       	movw	r26, r24
     bc4:	cb 01       	movw	r24, r22
     bc6:	8f 83       	std	Y+7, r24	; 0x07
     bc8:	98 87       	std	Y+8, r25	; 0x08
     bca:	a9 87       	std	Y+9, r26	; 0x09
     bcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bce:	6f 81       	ldd	r22, Y+7	; 0x07
     bd0:	78 85       	ldd	r23, Y+8	; 0x08
     bd2:	89 85       	ldd	r24, Y+9	; 0x09
     bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	40 e8       	ldi	r20, 0x80	; 128
     bdc:	5f e3       	ldi	r21, 0x3F	; 63
     bde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     be2:	88 23       	and	r24, r24
     be4:	2c f4       	brge	.+10     	; 0xbf0 <main+0xaa>
		__ticks = 1;
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	9e 83       	std	Y+6, r25	; 0x06
     bec:	8d 83       	std	Y+5, r24	; 0x05
     bee:	3f c0       	rjmp	.+126    	; 0xc6e <main+0x128>
	else if (__tmp > 65535)
     bf0:	6f 81       	ldd	r22, Y+7	; 0x07
     bf2:	78 85       	ldd	r23, Y+8	; 0x08
     bf4:	89 85       	ldd	r24, Y+9	; 0x09
     bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	3f ef       	ldi	r19, 0xFF	; 255
     bfc:	4f e7       	ldi	r20, 0x7F	; 127
     bfe:	57 e4       	ldi	r21, 0x47	; 71
     c00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c04:	18 16       	cp	r1, r24
     c06:	4c f5       	brge	.+82     	; 0xc5a <main+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c08:	6b 85       	ldd	r22, Y+11	; 0x0b
     c0a:	7c 85       	ldd	r23, Y+12	; 0x0c
     c0c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c0e:	9e 85       	ldd	r25, Y+14	; 0x0e
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	40 e2       	ldi	r20, 0x20	; 32
     c16:	51 e4       	ldi	r21, 0x41	; 65
     c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c1c:	dc 01       	movw	r26, r24
     c1e:	cb 01       	movw	r24, r22
     c20:	bc 01       	movw	r22, r24
     c22:	cd 01       	movw	r24, r26
     c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c28:	dc 01       	movw	r26, r24
     c2a:	cb 01       	movw	r24, r22
     c2c:	9e 83       	std	Y+6, r25	; 0x06
     c2e:	8d 83       	std	Y+5, r24	; 0x05
     c30:	0f c0       	rjmp	.+30     	; 0xc50 <main+0x10a>
     c32:	89 e1       	ldi	r24, 0x19	; 25
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	9c 83       	std	Y+4, r25	; 0x04
     c38:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c3a:	8b 81       	ldd	r24, Y+3	; 0x03
     c3c:	9c 81       	ldd	r25, Y+4	; 0x04
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	f1 f7       	brne	.-4      	; 0xc3e <main+0xf8>
     c42:	9c 83       	std	Y+4, r25	; 0x04
     c44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c46:	8d 81       	ldd	r24, Y+5	; 0x05
     c48:	9e 81       	ldd	r25, Y+6	; 0x06
     c4a:	01 97       	sbiw	r24, 0x01	; 1
     c4c:	9e 83       	std	Y+6, r25	; 0x06
     c4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c50:	8d 81       	ldd	r24, Y+5	; 0x05
     c52:	9e 81       	ldd	r25, Y+6	; 0x06
     c54:	00 97       	sbiw	r24, 0x00	; 0
     c56:	69 f7       	brne	.-38     	; 0xc32 <main+0xec>
     c58:	14 c0       	rjmp	.+40     	; 0xc82 <main+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c5a:	6f 81       	ldd	r22, Y+7	; 0x07
     c5c:	78 85       	ldd	r23, Y+8	; 0x08
     c5e:	89 85       	ldd	r24, Y+9	; 0x09
     c60:	9a 85       	ldd	r25, Y+10	; 0x0a
     c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c66:	dc 01       	movw	r26, r24
     c68:	cb 01       	movw	r24, r22
     c6a:	9e 83       	std	Y+6, r25	; 0x06
     c6c:	8d 83       	std	Y+5, r24	; 0x05
     c6e:	8d 81       	ldd	r24, Y+5	; 0x05
     c70:	9e 81       	ldd	r25, Y+6	; 0x06
     c72:	9a 83       	std	Y+2, r25	; 0x02
     c74:	89 83       	std	Y+1, r24	; 0x01
     c76:	89 81       	ldd	r24, Y+1	; 0x01
     c78:	9a 81       	ldd	r25, Y+2	; 0x02
     c7a:	01 97       	sbiw	r24, 0x01	; 1
     c7c:	f1 f7       	brne	.-4      	; 0xc7a <main+0x134>
     c7e:	9a 83       	std	Y+2, r25	; 0x02
     c80:	89 83       	std	Y+1, r24	; 0x01

	//ifPassSavedORNOT();   /* to check either it's first time for the user to log in or no */

    while(1)
    {
		(*ptr_states[g_stateNum])();   /* calling functions from the array of functions */
     c82:	80 91 46 01 	lds	r24, 0x0146
     c86:	88 2f       	mov	r24, r24
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	fc 01       	movw	r30, r24
     c90:	e5 5c       	subi	r30, 0xC5	; 197
     c92:	fe 4f       	sbci	r31, 0xFE	; 254
     c94:	01 90       	ld	r0, Z+
     c96:	f0 81       	ld	r31, Z
     c98:	e0 2d       	mov	r30, r0
     c9a:	09 95       	icall
     c9c:	f2 cf       	rjmp	.-28     	; 0xc82 <main+0x13c>

00000c9e <create_StorePassword>:
    }


}
void create_StorePassword(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <create_StorePassword+0x6>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	 * 3. START FILLING IN THE PASSWORD FROM THE USER TO A GLOBAL ARRAY
	 * 4. SEND COMMAND TO CONTROL_ECU (PASSWORD_SEND)
	 * 5. SENDING THE PASSWORD TO THE CONTROL_ECU AND IF IT MATCHES STORE IT
	 * 6. IF IT DOESN'T MATCH DISPLAY A MESSAGE ON SCREEN
	 */
	if(g_flag==0){
     ca8:	80 91 42 01 	lds	r24, 0x0142
     cac:	88 23       	and	r24, r24
     cae:	d9 f4       	brne	.+54     	; 0xce6 <create_StorePassword+0x48>
		LCD_clearScreen();
     cb0:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"ENTER THE PASS");
     cb4:	28 e7       	ldi	r18, 0x78	; 120
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	60 e0       	ldi	r22, 0x00	; 0
     cbc:	a9 01       	movw	r20, r18
     cbe:	0e 94 6d 1c 	call	0x38da	; 0x38da <LCD_displayStringRowColumn>
		LCD_moveCursor(1,6);
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	66 e0       	ldi	r22, 0x06	; 6
     cc6:	0e 94 2b 1c 	call	0x3856	; 0x3856 <LCD_moveCursor>
		fill_Password(password);
     cca:	8d e4       	ldi	r24, 0x4D	; 77
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	0e 94 52 09 	call	0x12a4	; 0x12a4 <fill_Password>
		sendCommand(PASSWORD_SEND);
     cd2:	83 e0       	ldi	r24, 0x03	; 3
     cd4:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <sendCommand>
		SendPassword(password);
     cd8:	8d e4       	ldi	r24, 0x4D	; 77
     cda:	91 e0       	ldi	r25, 0x01	; 1
     cdc:	0e 94 b7 06 	call	0xd6e	; 0xd6e <SendPassword>
		g_flag=1;
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	80 93 42 01 	sts	0x0142, r24
	}
	if(g_flag==1)
     ce6:	80 91 42 01 	lds	r24, 0x0142
     cea:	81 30       	cpi	r24, 0x01	; 1
     cec:	d9 f4       	brne	.+54     	; 0xd24 <create_StorePassword+0x86>
	{
		LCD_clearScreen();
     cee:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"RE-ENTER PASS");
     cf2:	27 e8       	ldi	r18, 0x87	; 135
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	60 e0       	ldi	r22, 0x00	; 0
     cfa:	a9 01       	movw	r20, r18
     cfc:	0e 94 6d 1c 	call	0x38da	; 0x38da <LCD_displayStringRowColumn>
		LCD_moveCursor(1,6);
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	66 e0       	ldi	r22, 0x06	; 6
     d04:	0e 94 2b 1c 	call	0x3856	; 0x3856 <LCD_moveCursor>
		fill_Password(password);
     d08:	8d e4       	ldi	r24, 0x4D	; 77
     d0a:	91 e0       	ldi	r25, 0x01	; 1
     d0c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <fill_Password>
		sendCommand(PASSWORD_CONFIRMATION_SEND);
     d10:	86 e0       	ldi	r24, 0x06	; 6
     d12:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <sendCommand>
		SendPassword(password);
     d16:	8d e4       	ldi	r24, 0x4D	; 77
     d18:	91 e0       	ldi	r25, 0x01	; 1
     d1a:	0e 94 b7 06 	call	0xd6e	; 0xd6e <SendPassword>
		g_flag=2;
     d1e:	82 e0       	ldi	r24, 0x02	; 2
     d20:	80 93 42 01 	sts	0x0142, r24
	}
	if (g_flag==2)
     d24:	80 91 42 01 	lds	r24, 0x0142
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	e1 f4       	brne	.+56     	; 0xd64 <create_StorePassword+0xc6>
	{
		switch(recieveCommand())
     d2c:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <recieveCommand>
     d30:	28 2f       	mov	r18, r24
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	3a 83       	std	Y+2, r19	; 0x02
     d36:	29 83       	std	Y+1, r18	; 0x01
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	9a 81       	ldd	r25, Y+2	; 0x02
     d3c:	84 30       	cpi	r24, 0x04	; 4
     d3e:	91 05       	cpc	r25, r1
     d40:	31 f0       	breq	.+12     	; 0xd4e <create_StorePassword+0xb0>
     d42:	29 81       	ldd	r18, Y+1	; 0x01
     d44:	3a 81       	ldd	r19, Y+2	; 0x02
     d46:	25 30       	cpi	r18, 0x05	; 5
     d48:	31 05       	cpc	r19, r1
     d4a:	41 f0       	breq	.+16     	; 0xd5c <create_StorePassword+0xbe>
     d4c:	0b c0       	rjmp	.+22     	; 0xd64 <create_StorePassword+0xc6>
		{
		case PASSWORD_MATCH:
			g_flag=3;
     d4e:	83 e0       	ldi	r24, 0x03	; 3
     d50:	80 93 42 01 	sts	0x0142, r24
			g_stateNum=1;
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	80 93 46 01 	sts	0x0146, r24
     d5a:	04 c0       	rjmp	.+8      	; 0xd64 <create_StorePassword+0xc6>
			break;

		case PASSWORD_NOT_MATCHED:
			Password_MISMATCH();
     d5c:	0e 94 14 0a 	call	0x1428	; 0x1428 <Password_MISMATCH>
			g_flag=0;
     d60:	10 92 42 01 	sts	0x0142, r1
			break;
		}
	}
}
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	08 95       	ret

00000d6e <SendPassword>:


void SendPassword(uint8 a_arr[])
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	00 d0       	rcall	.+0      	; 0xd74 <SendPassword+0x6>
     d74:	0f 92       	push	r0
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	9b 83       	std	Y+3, r25	; 0x03
     d7c:	8a 83       	std	Y+2, r24	; 0x02
	 * 1. SEND A READY COMMAND TO THE CONTROL_ECU TO SAY THAT HMI_ECI IS READY
	 * 2.WAITING UNTIL THE CONTROL_ECU SEND A READY COMMAND TOO
	 * 3.SENDING THE PASSWORD ENTERED BY THE USER FROM THE GLOBAL ARRAY
	 * 4. WAITING UNTIL THE CONTROL_ECU SENDS DONE COMMAND
	 */
	UART_sendByte(READY);
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <UART_sendByte>
	while(UART_recieveByte() != READY){};
     d84:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <UART_recieveByte>
     d88:	81 30       	cpi	r24, 0x01	; 1
     d8a:	e1 f7       	brne	.-8      	; 0xd84 <SendPassword+0x16>

	for(uint8 i=0;i<PASSWORD_ARRAY_SIZE;i++)
     d8c:	19 82       	std	Y+1, r1	; 0x01
     d8e:	0e c0       	rjmp	.+28     	; 0xdac <SendPassword+0x3e>
	{
		UART_sendByte(a_arr[i]);
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	28 2f       	mov	r18, r24
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	9b 81       	ldd	r25, Y+3	; 0x03
     d9a:	fc 01       	movw	r30, r24
     d9c:	e2 0f       	add	r30, r18
     d9e:	f3 1f       	adc	r31, r19
     da0:	80 81       	ld	r24, Z
     da2:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <UART_sendByte>
	 * 4. WAITING UNTIL THE CONTROL_ECU SENDS DONE COMMAND
	 */
	UART_sendByte(READY);
	while(UART_recieveByte() != READY){};

	for(uint8 i=0;i<PASSWORD_ARRAY_SIZE;i++)
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	8f 5f       	subi	r24, 0xFF	; 255
     daa:	89 83       	std	Y+1, r24	; 0x01
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	85 30       	cpi	r24, 0x05	; 5
     db0:	78 f3       	brcs	.-34     	; 0xd90 <SendPassword+0x22>
	{
		UART_sendByte(a_arr[i]);
	}
	while(UART_recieveByte() != DONE){};
     db2:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <UART_recieveByte>
     db6:	82 30       	cpi	r24, 0x02	; 2
     db8:	e1 f7       	brne	.-8      	; 0xdb2 <SendPassword+0x44>
}
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	08 95       	ret

00000dc6 <sendCommand>:

void sendCommand(uint8 command)
{
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	0f 92       	push	r0
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	89 83       	std	Y+1, r24	; 0x01
	 * 1. SEND A READY COMMAND TO THE CONTROL_ECU TO SAY THAT HMI_ECI IS READY
	 * 2.WAITING UNTIL THE CONTROL_ECU SEND A READY COMMAND TOO
	 * 3.SENDING A COMMAND FROM THE HMI_ECU
	 * 4. WAITING UNTIL THE CONTROL_ECU SENDS DONE COMMAND
	 */
	UART_sendByte(READY);
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <UART_sendByte>
	while(UART_recieveByte() != READY){};
     dd8:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <UART_recieveByte>
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	e1 f7       	brne	.-8      	; 0xdd8 <sendCommand+0x12>
	UART_sendByte(command);
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <UART_sendByte>
	while(UART_recieveByte() != DONE){};
     de6:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <UART_recieveByte>
     dea:	82 30       	cpi	r24, 0x02	; 2
     dec:	e1 f7       	brne	.-8      	; 0xde6 <sendCommand+0x20>

}
     dee:	0f 90       	pop	r0
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	08 95       	ret

00000df6 <recieveCommand>:

uint8 recieveCommand(void)
{
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
	 * 2. SEND A READY COMMAND TO THE CONTROL_ECU TO SAY THAT HMI_ECI IS READY
	 * 3. RECIEVE A COMMAND FROM THE CONTROL_ECU
	 * 4. SENDING TO THE  CONTROL_ECU  DONE COMMAND
	 * 5. RETURN THE COMMAND SENT FROM THE COTROL_ECU
	 */
	while(UART_recieveByte() != READY){};
     dfe:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <UART_recieveByte>
     e02:	81 30       	cpi	r24, 0x01	; 1
     e04:	e1 f7       	brne	.-8      	; 0xdfe <recieveCommand+0x8>
	UART_sendByte(READY);
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <UART_sendByte>
	command=UART_recieveByte();
     e0c:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <UART_recieveByte>
     e10:	80 93 52 01 	sts	0x0152, r24
	UART_sendByte(DONE);
     e14:	82 e0       	ldi	r24, 0x02	; 2
     e16:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <UART_sendByte>
	return command;
     e1a:	80 91 52 01 	lds	r24, 0x0152
}
     e1e:	cf 91       	pop	r28
     e20:	df 91       	pop	r29
     e22:	08 95       	ret

00000e24 <mainFucntion>:


void mainFucntion(void)
{
     e24:	df 93       	push	r29
     e26:	cf 93       	push	r28
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	a2 97       	sbiw	r28, 0x22	; 34
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	f8 94       	cli
     e32:	de bf       	out	0x3e, r29	; 62
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	cd bf       	out	0x3d, r28	; 61
	 *            IF IT MATCHES:
	 *                          GO TO STATE NUMBER 2 TO OPEN THE DOOR
	 *            IF NOT:
	 *                   DISPLAY PASSWORD WRONG MESSAGE ALSO INCREMENT THE GLOBAL WRONG VARIABLE
	 */
	LCD_clearScreen();
     e38:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"+: open door");
     e3c:	25 e9       	ldi	r18, 0x95	; 149
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	a9 01       	movw	r20, r18
     e46:	0e 94 6d 1c 	call	0x38da	; 0x38da <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"-: change pass");
     e4a:	22 ea       	ldi	r18, 0xA2	; 162
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	60 e0       	ldi	r22, 0x00	; 0
     e52:	a9 01       	movw	r20, r18
     e54:	0e 94 6d 1c 	call	0x38da	; 0x38da <LCD_displayStringRowColumn>
	switch(KEYPAD_getPressedKey())
     e58:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <KEYPAD_getPressedKey>
     e5c:	28 2f       	mov	r18, r24
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	3a a3       	std	Y+34, r19	; 0x22
     e62:	29 a3       	std	Y+33, r18	; 0x21
     e64:	89 a1       	ldd	r24, Y+33	; 0x21
     e66:	9a a1       	ldd	r25, Y+34	; 0x22
     e68:	8b 32       	cpi	r24, 0x2B	; 43
     e6a:	91 05       	cpc	r25, r1
     e6c:	09 f4       	brne	.+2      	; 0xe70 <mainFucntion+0x4c>
     e6e:	ab c0       	rjmp	.+342    	; 0xfc6 <mainFucntion+0x1a2>
     e70:	29 a1       	ldd	r18, Y+33	; 0x21
     e72:	3a a1       	ldd	r19, Y+34	; 0x22
     e74:	2d 32       	cpi	r18, 0x2D	; 45
     e76:	31 05       	cpc	r19, r1
     e78:	09 f0       	breq	.+2      	; 0xe7c <mainFucntion+0x58>
     e7a:	4b c1       	rjmp	.+662    	; 0x1112 <mainFucntion+0x2ee>
	{
	case '-':
		LCD_clearScreen();
     e7c:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"ENTER OLD PASS");
     e80:	21 eb       	ldi	r18, 0xB1	; 177
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	60 e0       	ldi	r22, 0x00	; 0
     e88:	a9 01       	movw	r20, r18
     e8a:	0e 94 6d 1c 	call	0x38da	; 0x38da <LCD_displayStringRowColumn>
		LCD_moveCursor(1,6);
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	66 e0       	ldi	r22, 0x06	; 6
     e92:	0e 94 2b 1c 	call	0x3856	; 0x3856 <LCD_moveCursor>
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	90 e8       	ldi	r25, 0x80	; 128
     e9a:	ab eb       	ldi	r26, 0xBB	; 187
     e9c:	b4 e4       	ldi	r27, 0x44	; 68
     e9e:	89 8f       	std	Y+25, r24	; 0x19
     ea0:	9a 8f       	std	Y+26, r25	; 0x1a
     ea2:	ab 8f       	std	Y+27, r26	; 0x1b
     ea4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ea6:	69 8d       	ldd	r22, Y+25	; 0x19
     ea8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     eaa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     eac:	9c 8d       	ldd	r25, Y+28	; 0x1c
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	4a e7       	ldi	r20, 0x7A	; 122
     eb4:	53 e4       	ldi	r21, 0x43	; 67
     eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eba:	dc 01       	movw	r26, r24
     ebc:	cb 01       	movw	r24, r22
     ebe:	8d 8b       	std	Y+21, r24	; 0x15
     ec0:	9e 8b       	std	Y+22, r25	; 0x16
     ec2:	af 8b       	std	Y+23, r26	; 0x17
     ec4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ec6:	6d 89       	ldd	r22, Y+21	; 0x15
     ec8:	7e 89       	ldd	r23, Y+22	; 0x16
     eca:	8f 89       	ldd	r24, Y+23	; 0x17
     ecc:	98 8d       	ldd	r25, Y+24	; 0x18
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	40 e8       	ldi	r20, 0x80	; 128
     ed4:	5f e3       	ldi	r21, 0x3F	; 63
     ed6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eda:	88 23       	and	r24, r24
     edc:	2c f4       	brge	.+10     	; 0xee8 <mainFucntion+0xc4>
		__ticks = 1;
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	9c 8b       	std	Y+20, r25	; 0x14
     ee4:	8b 8b       	std	Y+19, r24	; 0x13
     ee6:	3f c0       	rjmp	.+126    	; 0xf66 <mainFucntion+0x142>
	else if (__tmp > 65535)
     ee8:	6d 89       	ldd	r22, Y+21	; 0x15
     eea:	7e 89       	ldd	r23, Y+22	; 0x16
     eec:	8f 89       	ldd	r24, Y+23	; 0x17
     eee:	98 8d       	ldd	r25, Y+24	; 0x18
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	3f ef       	ldi	r19, 0xFF	; 255
     ef4:	4f e7       	ldi	r20, 0x7F	; 127
     ef6:	57 e4       	ldi	r21, 0x47	; 71
     ef8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     efc:	18 16       	cp	r1, r24
     efe:	4c f5       	brge	.+82     	; 0xf52 <mainFucntion+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f00:	69 8d       	ldd	r22, Y+25	; 0x19
     f02:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f04:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f06:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	40 e2       	ldi	r20, 0x20	; 32
     f0e:	51 e4       	ldi	r21, 0x41	; 65
     f10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f14:	dc 01       	movw	r26, r24
     f16:	cb 01       	movw	r24, r22
     f18:	bc 01       	movw	r22, r24
     f1a:	cd 01       	movw	r24, r26
     f1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f20:	dc 01       	movw	r26, r24
     f22:	cb 01       	movw	r24, r22
     f24:	9c 8b       	std	Y+20, r25	; 0x14
     f26:	8b 8b       	std	Y+19, r24	; 0x13
     f28:	0f c0       	rjmp	.+30     	; 0xf48 <mainFucntion+0x124>
     f2a:	89 e1       	ldi	r24, 0x19	; 25
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	9a 8b       	std	Y+18, r25	; 0x12
     f30:	89 8b       	std	Y+17, r24	; 0x11
     f32:	89 89       	ldd	r24, Y+17	; 0x11
     f34:	9a 89       	ldd	r25, Y+18	; 0x12
     f36:	01 97       	sbiw	r24, 0x01	; 1
     f38:	f1 f7       	brne	.-4      	; 0xf36 <mainFucntion+0x112>
     f3a:	9a 8b       	std	Y+18, r25	; 0x12
     f3c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f3e:	8b 89       	ldd	r24, Y+19	; 0x13
     f40:	9c 89       	ldd	r25, Y+20	; 0x14
     f42:	01 97       	sbiw	r24, 0x01	; 1
     f44:	9c 8b       	std	Y+20, r25	; 0x14
     f46:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f48:	8b 89       	ldd	r24, Y+19	; 0x13
     f4a:	9c 89       	ldd	r25, Y+20	; 0x14
     f4c:	00 97       	sbiw	r24, 0x00	; 0
     f4e:	69 f7       	brne	.-38     	; 0xf2a <mainFucntion+0x106>
     f50:	14 c0       	rjmp	.+40     	; 0xf7a <mainFucntion+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f52:	6d 89       	ldd	r22, Y+21	; 0x15
     f54:	7e 89       	ldd	r23, Y+22	; 0x16
     f56:	8f 89       	ldd	r24, Y+23	; 0x17
     f58:	98 8d       	ldd	r25, Y+24	; 0x18
     f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f5e:	dc 01       	movw	r26, r24
     f60:	cb 01       	movw	r24, r22
     f62:	9c 8b       	std	Y+20, r25	; 0x14
     f64:	8b 8b       	std	Y+19, r24	; 0x13
     f66:	8b 89       	ldd	r24, Y+19	; 0x13
     f68:	9c 89       	ldd	r25, Y+20	; 0x14
     f6a:	98 8b       	std	Y+16, r25	; 0x10
     f6c:	8f 87       	std	Y+15, r24	; 0x0f
     f6e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f70:	98 89       	ldd	r25, Y+16	; 0x10
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	f1 f7       	brne	.-4      	; 0xf72 <mainFucntion+0x14e>
     f76:	98 8b       	std	Y+16, r25	; 0x10
     f78:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1500);
		fill_Password(password);
     f7a:	8d e4       	ldi	r24, 0x4D	; 77
     f7c:	91 e0       	ldi	r25, 0x01	; 1
     f7e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <fill_Password>
		sendCommand(CHECK_PASSWORD);
     f82:	89 e0       	ldi	r24, 0x09	; 9
     f84:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <sendCommand>
		SendPassword(password);
     f88:	8d e4       	ldi	r24, 0x4D	; 77
     f8a:	91 e0       	ldi	r25, 0x01	; 1
     f8c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <SendPassword>
		switch (recieveCommand())
     f90:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <recieveCommand>
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	38 a3       	std	Y+32, r19	; 0x20
     f9a:	2f 8f       	std	Y+31, r18	; 0x1f
     f9c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f9e:	98 a1       	ldd	r25, Y+32	; 0x20
     fa0:	84 30       	cpi	r24, 0x04	; 4
     fa2:	91 05       	cpc	r25, r1
     fa4:	31 f0       	breq	.+12     	; 0xfb2 <mainFucntion+0x18e>
     fa6:	2f 8d       	ldd	r18, Y+31	; 0x1f
     fa8:	38 a1       	ldd	r19, Y+32	; 0x20
     faa:	25 30       	cpi	r18, 0x05	; 5
     fac:	31 05       	cpc	r19, r1
     fae:	41 f0       	breq	.+16     	; 0xfc0 <mainFucntion+0x19c>
     fb0:	b0 c0       	rjmp	.+352    	; 0x1112 <mainFucntion+0x2ee>
		{
		case PASSWORD_MATCH:
			g_flag=0;
     fb2:	10 92 42 01 	sts	0x0142, r1
			g_stateNum=0;
     fb6:	10 92 46 01 	sts	0x0146, r1
			wrong=0;
     fba:	10 92 43 01 	sts	0x0143, r1
     fbe:	a9 c0       	rjmp	.+338    	; 0x1112 <mainFucntion+0x2ee>
			break;
		case PASSWORD_NOT_MATCHED:
			wrongPasswordScreen();
     fc0:	0e 94 b6 08 	call	0x116c	; 0x116c <wrongPasswordScreen>
     fc4:	a6 c0       	rjmp	.+332    	; 0x1112 <mainFucntion+0x2ee>
			break;
		}
		break;
		case '+':
			LCD_clearScreen();
     fc6:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"ENTER THE PASS");
     fca:	28 e7       	ldi	r18, 0x78	; 120
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	60 e0       	ldi	r22, 0x00	; 0
     fd2:	a9 01       	movw	r20, r18
     fd4:	0e 94 6d 1c 	call	0x38da	; 0x38da <LCD_displayStringRowColumn>
			LCD_moveCursor(1,6);
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	66 e0       	ldi	r22, 0x06	; 6
     fdc:	0e 94 2b 1c 	call	0x3856	; 0x3856 <LCD_moveCursor>
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	90 e8       	ldi	r25, 0x80	; 128
     fe4:	ab eb       	ldi	r26, 0xBB	; 187
     fe6:	b4 e4       	ldi	r27, 0x44	; 68
     fe8:	8b 87       	std	Y+11, r24	; 0x0b
     fea:	9c 87       	std	Y+12, r25	; 0x0c
     fec:	ad 87       	std	Y+13, r26	; 0x0d
     fee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ff2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ff4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ff6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	4a e7       	ldi	r20, 0x7A	; 122
     ffe:	53 e4       	ldi	r21, 0x43	; 67
    1000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	8f 83       	std	Y+7, r24	; 0x07
    100a:	98 87       	std	Y+8, r25	; 0x08
    100c:	a9 87       	std	Y+9, r26	; 0x09
    100e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1010:	6f 81       	ldd	r22, Y+7	; 0x07
    1012:	78 85       	ldd	r23, Y+8	; 0x08
    1014:	89 85       	ldd	r24, Y+9	; 0x09
    1016:	9a 85       	ldd	r25, Y+10	; 0x0a
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	40 e8       	ldi	r20, 0x80	; 128
    101e:	5f e3       	ldi	r21, 0x3F	; 63
    1020:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1024:	88 23       	and	r24, r24
    1026:	2c f4       	brge	.+10     	; 0x1032 <mainFucntion+0x20e>
		__ticks = 1;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	9e 83       	std	Y+6, r25	; 0x06
    102e:	8d 83       	std	Y+5, r24	; 0x05
    1030:	3f c0       	rjmp	.+126    	; 0x10b0 <mainFucntion+0x28c>
	else if (__tmp > 65535)
    1032:	6f 81       	ldd	r22, Y+7	; 0x07
    1034:	78 85       	ldd	r23, Y+8	; 0x08
    1036:	89 85       	ldd	r24, Y+9	; 0x09
    1038:	9a 85       	ldd	r25, Y+10	; 0x0a
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	3f ef       	ldi	r19, 0xFF	; 255
    103e:	4f e7       	ldi	r20, 0x7F	; 127
    1040:	57 e4       	ldi	r21, 0x47	; 71
    1042:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1046:	18 16       	cp	r1, r24
    1048:	4c f5       	brge	.+82     	; 0x109c <mainFucntion+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    104a:	6b 85       	ldd	r22, Y+11	; 0x0b
    104c:	7c 85       	ldd	r23, Y+12	; 0x0c
    104e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1050:	9e 85       	ldd	r25, Y+14	; 0x0e
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	40 e2       	ldi	r20, 0x20	; 32
    1058:	51 e4       	ldi	r21, 0x41	; 65
    105a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	bc 01       	movw	r22, r24
    1064:	cd 01       	movw	r24, r26
    1066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	9e 83       	std	Y+6, r25	; 0x06
    1070:	8d 83       	std	Y+5, r24	; 0x05
    1072:	0f c0       	rjmp	.+30     	; 0x1092 <mainFucntion+0x26e>
    1074:	89 e1       	ldi	r24, 0x19	; 25
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	9c 83       	std	Y+4, r25	; 0x04
    107a:	8b 83       	std	Y+3, r24	; 0x03
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	9c 81       	ldd	r25, Y+4	; 0x04
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	f1 f7       	brne	.-4      	; 0x1080 <mainFucntion+0x25c>
    1084:	9c 83       	std	Y+4, r25	; 0x04
    1086:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1088:	8d 81       	ldd	r24, Y+5	; 0x05
    108a:	9e 81       	ldd	r25, Y+6	; 0x06
    108c:	01 97       	sbiw	r24, 0x01	; 1
    108e:	9e 83       	std	Y+6, r25	; 0x06
    1090:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1092:	8d 81       	ldd	r24, Y+5	; 0x05
    1094:	9e 81       	ldd	r25, Y+6	; 0x06
    1096:	00 97       	sbiw	r24, 0x00	; 0
    1098:	69 f7       	brne	.-38     	; 0x1074 <mainFucntion+0x250>
    109a:	14 c0       	rjmp	.+40     	; 0x10c4 <mainFucntion+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    109c:	6f 81       	ldd	r22, Y+7	; 0x07
    109e:	78 85       	ldd	r23, Y+8	; 0x08
    10a0:	89 85       	ldd	r24, Y+9	; 0x09
    10a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	9e 83       	std	Y+6, r25	; 0x06
    10ae:	8d 83       	std	Y+5, r24	; 0x05
    10b0:	8d 81       	ldd	r24, Y+5	; 0x05
    10b2:	9e 81       	ldd	r25, Y+6	; 0x06
    10b4:	9a 83       	std	Y+2, r25	; 0x02
    10b6:	89 83       	std	Y+1, r24	; 0x01
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	9a 81       	ldd	r25, Y+2	; 0x02
    10bc:	01 97       	sbiw	r24, 0x01	; 1
    10be:	f1 f7       	brne	.-4      	; 0x10bc <mainFucntion+0x298>
    10c0:	9a 83       	std	Y+2, r25	; 0x02
    10c2:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1500);
			fill_Password(password);
    10c4:	8d e4       	ldi	r24, 0x4D	; 77
    10c6:	91 e0       	ldi	r25, 0x01	; 1
    10c8:	0e 94 52 09 	call	0x12a4	; 0x12a4 <fill_Password>
			sendCommand(CHECK_PASSWORD);
    10cc:	89 e0       	ldi	r24, 0x09	; 9
    10ce:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <sendCommand>
			SendPassword(password);
    10d2:	8d e4       	ldi	r24, 0x4D	; 77
    10d4:	91 e0       	ldi	r25, 0x01	; 1
    10d6:	0e 94 b7 06 	call	0xd6e	; 0xd6e <SendPassword>
			switch (recieveCommand()){
    10da:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <recieveCommand>
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	3e 8f       	std	Y+30, r19	; 0x1e
    10e4:	2d 8f       	std	Y+29, r18	; 0x1d
    10e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10ea:	84 30       	cpi	r24, 0x04	; 4
    10ec:	91 05       	cpc	r25, r1
    10ee:	31 f0       	breq	.+12     	; 0x10fc <mainFucntion+0x2d8>
    10f0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    10f2:	3e 8d       	ldd	r19, Y+30	; 0x1e
    10f4:	25 30       	cpi	r18, 0x05	; 5
    10f6:	31 05       	cpc	r19, r1
    10f8:	51 f0       	breq	.+20     	; 0x110e <mainFucntion+0x2ea>
    10fa:	0b c0       	rjmp	.+22     	; 0x1112 <mainFucntion+0x2ee>
			case PASSWORD_MATCH:
				sendCommand(OPEN_DOOR);
    10fc:	88 e0       	ldi	r24, 0x08	; 8
    10fe:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <sendCommand>
				g_stateNum=2;
    1102:	82 e0       	ldi	r24, 0x02	; 2
    1104:	80 93 46 01 	sts	0x0146, r24
				wrong=0;
    1108:	10 92 43 01 	sts	0x0143, r1
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <mainFucntion+0x2ee>
				break;
			case PASSWORD_NOT_MATCHED:
				wrongPasswordScreen();
    110e:	0e 94 b6 08 	call	0x116c	; 0x116c <wrongPasswordScreen>
				break;
			}
			break;
	}

}
    1112:	a2 96       	adiw	r28, 0x22	; 34
    1114:	0f b6       	in	r0, 0x3f	; 63
    1116:	f8 94       	cli
    1118:	de bf       	out	0x3e, r29	; 62
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	cd bf       	out	0x3d, r28	; 61
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <ifPassSavedORNOT>:

void ifPassSavedORNOT(void)
{
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	00 d0       	rcall	.+0      	; 0x112a <ifPassSavedORNOT+0x6>
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
	 * IF YES_SAVED COMMAD:
	 *                    GO TO STATE 1 FOR THE MAIN FUNCTION
	 * IF NO_SAVED_PASSWORD:
	 *                     GO TO STATE 0 TO ENTER A NEW PASSWORD
	 */
	sendCommand(CHECK_IF_SAVED);
    112e:	8b e0       	ldi	r24, 0x0B	; 11
    1130:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <sendCommand>
	switch (recieveCommand())
    1134:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <recieveCommand>
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	3a 83       	std	Y+2, r19	; 0x02
    113e:	29 83       	std	Y+1, r18	; 0x01
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	9a 81       	ldd	r25, Y+2	; 0x02
    1144:	8c 30       	cpi	r24, 0x0C	; 12
    1146:	91 05       	cpc	r25, r1
    1148:	31 f0       	breq	.+12     	; 0x1156 <ifPassSavedORNOT+0x32>
    114a:	29 81       	ldd	r18, Y+1	; 0x01
    114c:	3a 81       	ldd	r19, Y+2	; 0x02
    114e:	2d 30       	cpi	r18, 0x0D	; 13
    1150:	31 05       	cpc	r19, r1
    1152:	29 f0       	breq	.+10     	; 0x115e <ifPassSavedORNOT+0x3a>
    1154:	06 c0       	rjmp	.+12     	; 0x1162 <ifPassSavedORNOT+0x3e>
	{
	case YES_SAVED:
		g_stateNum=1;
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	80 93 46 01 	sts	0x0146, r24
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <ifPassSavedORNOT+0x3e>
		break;
	case NO_SAVED_PASSWORD:
		g_stateNum=0;
    115e:	10 92 46 01 	sts	0x0146, r1
		break;

	}

}
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	cf 91       	pop	r28
    1168:	df 91       	pop	r29
    116a:	08 95       	ret

0000116c <wrongPasswordScreen>:

void wrongPasswordScreen(void)
{
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
    1174:	2e 97       	sbiw	r28, 0x0e	; 14
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	cd bf       	out	0x3d, r28	; 61
	 *2. INCREMENT THE GLOBAL WRONG VARIABLE
	 *3. SEND COMMANT TO THE CONTROL_ECU THAT THE USER HAS ENTERED A WRONG PASSWORD
	 *4. IF PASSWORD ENTERED IS WRONG 3 TIMES IN A ROW
	 *   IT WILL DISPLAY AN ALARM MESSAGE ON THE SCREEN
	 */
	LCD_clearScreen();
    1180:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"WRONG PASSWORD!!");
    1184:	20 ec       	ldi	r18, 0xC0	; 192
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	a9 01       	movw	r20, r18
    118e:	0e 94 6d 1c 	call	0x38da	; 0x38da <LCD_displayStringRowColumn>
	wrong++;
    1192:	80 91 43 01 	lds	r24, 0x0143
    1196:	8f 5f       	subi	r24, 0xFF	; 255
    1198:	80 93 43 01 	sts	0x0143, r24
	sendCommand(WRONG_PASSWORD);
    119c:	8a e0       	ldi	r24, 0x0A	; 10
    119e:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <sendCommand>
	if(wrong == 3)
    11a2:	80 91 43 01 	lds	r24, 0x0143
    11a6:	83 30       	cpi	r24, 0x03	; 3
    11a8:	11 f4       	brne	.+4      	; 0x11ae <wrongPasswordScreen+0x42>
	{
		ALERTscreen();
    11aa:	0e 94 9f 0a 	call	0x153e	; 0x153e <ALERTscreen>
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	aa e7       	ldi	r26, 0x7A	; 122
    11b4:	b5 e4       	ldi	r27, 0x45	; 69
    11b6:	8b 87       	std	Y+11, r24	; 0x0b
    11b8:	9c 87       	std	Y+12, r25	; 0x0c
    11ba:	ad 87       	std	Y+13, r26	; 0x0d
    11bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11be:	6b 85       	ldd	r22, Y+11	; 0x0b
    11c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    11c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	4a e7       	ldi	r20, 0x7A	; 122
    11cc:	53 e4       	ldi	r21, 0x43	; 67
    11ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d2:	dc 01       	movw	r26, r24
    11d4:	cb 01       	movw	r24, r22
    11d6:	8f 83       	std	Y+7, r24	; 0x07
    11d8:	98 87       	std	Y+8, r25	; 0x08
    11da:	a9 87       	std	Y+9, r26	; 0x09
    11dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11de:	6f 81       	ldd	r22, Y+7	; 0x07
    11e0:	78 85       	ldd	r23, Y+8	; 0x08
    11e2:	89 85       	ldd	r24, Y+9	; 0x09
    11e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	40 e8       	ldi	r20, 0x80	; 128
    11ec:	5f e3       	ldi	r21, 0x3F	; 63
    11ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11f2:	88 23       	and	r24, r24
    11f4:	2c f4       	brge	.+10     	; 0x1200 <wrongPasswordScreen+0x94>
		__ticks = 1;
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	9e 83       	std	Y+6, r25	; 0x06
    11fc:	8d 83       	std	Y+5, r24	; 0x05
    11fe:	3f c0       	rjmp	.+126    	; 0x127e <wrongPasswordScreen+0x112>
	else if (__tmp > 65535)
    1200:	6f 81       	ldd	r22, Y+7	; 0x07
    1202:	78 85       	ldd	r23, Y+8	; 0x08
    1204:	89 85       	ldd	r24, Y+9	; 0x09
    1206:	9a 85       	ldd	r25, Y+10	; 0x0a
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	3f ef       	ldi	r19, 0xFF	; 255
    120c:	4f e7       	ldi	r20, 0x7F	; 127
    120e:	57 e4       	ldi	r21, 0x47	; 71
    1210:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1214:	18 16       	cp	r1, r24
    1216:	4c f5       	brge	.+82     	; 0x126a <wrongPasswordScreen+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1218:	6b 85       	ldd	r22, Y+11	; 0x0b
    121a:	7c 85       	ldd	r23, Y+12	; 0x0c
    121c:	8d 85       	ldd	r24, Y+13	; 0x0d
    121e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	40 e2       	ldi	r20, 0x20	; 32
    1226:	51 e4       	ldi	r21, 0x41	; 65
    1228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	bc 01       	movw	r22, r24
    1232:	cd 01       	movw	r24, r26
    1234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1238:	dc 01       	movw	r26, r24
    123a:	cb 01       	movw	r24, r22
    123c:	9e 83       	std	Y+6, r25	; 0x06
    123e:	8d 83       	std	Y+5, r24	; 0x05
    1240:	0f c0       	rjmp	.+30     	; 0x1260 <wrongPasswordScreen+0xf4>
    1242:	89 e1       	ldi	r24, 0x19	; 25
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	9c 83       	std	Y+4, r25	; 0x04
    1248:	8b 83       	std	Y+3, r24	; 0x03
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	9c 81       	ldd	r25, Y+4	; 0x04
    124e:	01 97       	sbiw	r24, 0x01	; 1
    1250:	f1 f7       	brne	.-4      	; 0x124e <wrongPasswordScreen+0xe2>
    1252:	9c 83       	std	Y+4, r25	; 0x04
    1254:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1256:	8d 81       	ldd	r24, Y+5	; 0x05
    1258:	9e 81       	ldd	r25, Y+6	; 0x06
    125a:	01 97       	sbiw	r24, 0x01	; 1
    125c:	9e 83       	std	Y+6, r25	; 0x06
    125e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1260:	8d 81       	ldd	r24, Y+5	; 0x05
    1262:	9e 81       	ldd	r25, Y+6	; 0x06
    1264:	00 97       	sbiw	r24, 0x00	; 0
    1266:	69 f7       	brne	.-38     	; 0x1242 <wrongPasswordScreen+0xd6>
    1268:	14 c0       	rjmp	.+40     	; 0x1292 <wrongPasswordScreen+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    126a:	6f 81       	ldd	r22, Y+7	; 0x07
    126c:	78 85       	ldd	r23, Y+8	; 0x08
    126e:	89 85       	ldd	r24, Y+9	; 0x09
    1270:	9a 85       	ldd	r25, Y+10	; 0x0a
    1272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1276:	dc 01       	movw	r26, r24
    1278:	cb 01       	movw	r24, r22
    127a:	9e 83       	std	Y+6, r25	; 0x06
    127c:	8d 83       	std	Y+5, r24	; 0x05
    127e:	8d 81       	ldd	r24, Y+5	; 0x05
    1280:	9e 81       	ldd	r25, Y+6	; 0x06
    1282:	9a 83       	std	Y+2, r25	; 0x02
    1284:	89 83       	std	Y+1, r24	; 0x01
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	9a 81       	ldd	r25, Y+2	; 0x02
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	f1 f7       	brne	.-4      	; 0x128a <wrongPasswordScreen+0x11e>
    128e:	9a 83       	std	Y+2, r25	; 0x02
    1290:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(4000);

}
    1292:	2e 96       	adiw	r28, 0x0e	; 14
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	cf 91       	pop	r28
    12a0:	df 91       	pop	r29
    12a2:	08 95       	ret

000012a4 <fill_Password>:


void fill_Password(uint8 a_arr[])
{
    12a4:	df 93       	push	r29
    12a6:	cf 93       	push	r28
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	61 97       	sbiw	r28, 0x11	; 17
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	f8 94       	cli
    12b2:	de bf       	out	0x3e, r29	; 62
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	cd bf       	out	0x3d, r28	; 61
    12b8:	99 8b       	std	Y+17, r25	; 0x11
    12ba:	88 8b       	std	Y+16, r24	; 0x10
	uint8 counter=0;
    12bc:	1f 86       	std	Y+15, r1	; 0x0f
	key=KEYPAD_getPressedKey();/* get the pressed key number */
    12be:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <KEYPAD_getPressedKey>
    12c2:	80 93 53 01 	sts	0x0153, r24
    12c6:	a2 c0       	rjmp	.+324    	; 0x140c <fill_Password+0x168>
	while(key != '=')
	{
		key=KEYPAD_getPressedKey();
    12c8:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <KEYPAD_getPressedKey>
    12cc:	80 93 53 01 	sts	0x0153, r24
		if( ( key != '+' && key != '-' && key != '*' && key != '%' && key != '=') || (key>= 0 && key<= 9) )
    12d0:	80 91 53 01 	lds	r24, 0x0153
    12d4:	8b 32       	cpi	r24, 0x2B	; 43
    12d6:	81 f0       	breq	.+32     	; 0x12f8 <fill_Password+0x54>
    12d8:	80 91 53 01 	lds	r24, 0x0153
    12dc:	8d 32       	cpi	r24, 0x2D	; 45
    12de:	61 f0       	breq	.+24     	; 0x12f8 <fill_Password+0x54>
    12e0:	80 91 53 01 	lds	r24, 0x0153
    12e4:	8a 32       	cpi	r24, 0x2A	; 42
    12e6:	41 f0       	breq	.+16     	; 0x12f8 <fill_Password+0x54>
    12e8:	80 91 53 01 	lds	r24, 0x0153
    12ec:	85 32       	cpi	r24, 0x25	; 37
    12ee:	21 f0       	breq	.+8      	; 0x12f8 <fill_Password+0x54>
    12f0:	80 91 53 01 	lds	r24, 0x0153
    12f4:	8d 33       	cpi	r24, 0x3D	; 61
    12f6:	21 f4       	brne	.+8      	; 0x1300 <fill_Password+0x5c>
    12f8:	80 91 53 01 	lds	r24, 0x0153
    12fc:	8a 30       	cpi	r24, 0x0A	; 10
    12fe:	a0 f4       	brcc	.+40     	; 0x1328 <fill_Password+0x84>
		{
			if(counter < PASSWORD_ARRAY_SIZE)
    1300:	8f 85       	ldd	r24, Y+15	; 0x0f
    1302:	85 30       	cpi	r24, 0x05	; 5
    1304:	88 f4       	brcc	.+34     	; 0x1328 <fill_Password+0x84>
			{
				a_arr[counter]=key;
    1306:	8f 85       	ldd	r24, Y+15	; 0x0f
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	88 89       	ldd	r24, Y+16	; 0x10
    130e:	99 89       	ldd	r25, Y+17	; 0x11
    1310:	fc 01       	movw	r30, r24
    1312:	e2 0f       	add	r30, r18
    1314:	f3 1f       	adc	r31, r19
    1316:	80 91 53 01 	lds	r24, 0x0153
    131a:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
    131c:	8a e2       	ldi	r24, 0x2A	; 42
    131e:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_displayCharacter>
				counter++;
    1322:	8f 85       	ldd	r24, Y+15	; 0x0f
    1324:	8f 5f       	subi	r24, 0xFF	; 255
    1326:	8f 87       	std	Y+15, r24	; 0x0f
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	90 e8       	ldi	r25, 0x80	; 128
    132c:	ab e3       	ldi	r26, 0x3B	; 59
    132e:	b5 e4       	ldi	r27, 0x45	; 69
    1330:	8b 87       	std	Y+11, r24	; 0x0b
    1332:	9c 87       	std	Y+12, r25	; 0x0c
    1334:	ad 87       	std	Y+13, r26	; 0x0d
    1336:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1338:	6b 85       	ldd	r22, Y+11	; 0x0b
    133a:	7c 85       	ldd	r23, Y+12	; 0x0c
    133c:	8d 85       	ldd	r24, Y+13	; 0x0d
    133e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	4a e7       	ldi	r20, 0x7A	; 122
    1346:	53 e4       	ldi	r21, 0x43	; 67
    1348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	8f 83       	std	Y+7, r24	; 0x07
    1352:	98 87       	std	Y+8, r25	; 0x08
    1354:	a9 87       	std	Y+9, r26	; 0x09
    1356:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1358:	6f 81       	ldd	r22, Y+7	; 0x07
    135a:	78 85       	ldd	r23, Y+8	; 0x08
    135c:	89 85       	ldd	r24, Y+9	; 0x09
    135e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	40 e8       	ldi	r20, 0x80	; 128
    1366:	5f e3       	ldi	r21, 0x3F	; 63
    1368:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    136c:	88 23       	and	r24, r24
    136e:	2c f4       	brge	.+10     	; 0x137a <fill_Password+0xd6>
		__ticks = 1;
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	9e 83       	std	Y+6, r25	; 0x06
    1376:	8d 83       	std	Y+5, r24	; 0x05
    1378:	3f c0       	rjmp	.+126    	; 0x13f8 <fill_Password+0x154>
	else if (__tmp > 65535)
    137a:	6f 81       	ldd	r22, Y+7	; 0x07
    137c:	78 85       	ldd	r23, Y+8	; 0x08
    137e:	89 85       	ldd	r24, Y+9	; 0x09
    1380:	9a 85       	ldd	r25, Y+10	; 0x0a
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	3f ef       	ldi	r19, 0xFF	; 255
    1386:	4f e7       	ldi	r20, 0x7F	; 127
    1388:	57 e4       	ldi	r21, 0x47	; 71
    138a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    138e:	18 16       	cp	r1, r24
    1390:	4c f5       	brge	.+82     	; 0x13e4 <fill_Password+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1392:	6b 85       	ldd	r22, Y+11	; 0x0b
    1394:	7c 85       	ldd	r23, Y+12	; 0x0c
    1396:	8d 85       	ldd	r24, Y+13	; 0x0d
    1398:	9e 85       	ldd	r25, Y+14	; 0x0e
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	40 e2       	ldi	r20, 0x20	; 32
    13a0:	51 e4       	ldi	r21, 0x41	; 65
    13a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a6:	dc 01       	movw	r26, r24
    13a8:	cb 01       	movw	r24, r22
    13aa:	bc 01       	movw	r22, r24
    13ac:	cd 01       	movw	r24, r26
    13ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	9e 83       	std	Y+6, r25	; 0x06
    13b8:	8d 83       	std	Y+5, r24	; 0x05
    13ba:	0f c0       	rjmp	.+30     	; 0x13da <fill_Password+0x136>
    13bc:	89 e1       	ldi	r24, 0x19	; 25
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	9c 83       	std	Y+4, r25	; 0x04
    13c2:	8b 83       	std	Y+3, r24	; 0x03
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	9c 81       	ldd	r25, Y+4	; 0x04
    13c8:	01 97       	sbiw	r24, 0x01	; 1
    13ca:	f1 f7       	brne	.-4      	; 0x13c8 <fill_Password+0x124>
    13cc:	9c 83       	std	Y+4, r25	; 0x04
    13ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d0:	8d 81       	ldd	r24, Y+5	; 0x05
    13d2:	9e 81       	ldd	r25, Y+6	; 0x06
    13d4:	01 97       	sbiw	r24, 0x01	; 1
    13d6:	9e 83       	std	Y+6, r25	; 0x06
    13d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13da:	8d 81       	ldd	r24, Y+5	; 0x05
    13dc:	9e 81       	ldd	r25, Y+6	; 0x06
    13de:	00 97       	sbiw	r24, 0x00	; 0
    13e0:	69 f7       	brne	.-38     	; 0x13bc <fill_Password+0x118>
    13e2:	14 c0       	rjmp	.+40     	; 0x140c <fill_Password+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13e4:	6f 81       	ldd	r22, Y+7	; 0x07
    13e6:	78 85       	ldd	r23, Y+8	; 0x08
    13e8:	89 85       	ldd	r24, Y+9	; 0x09
    13ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f0:	dc 01       	movw	r26, r24
    13f2:	cb 01       	movw	r24, r22
    13f4:	9e 83       	std	Y+6, r25	; 0x06
    13f6:	8d 83       	std	Y+5, r24	; 0x05
    13f8:	8d 81       	ldd	r24, Y+5	; 0x05
    13fa:	9e 81       	ldd	r25, Y+6	; 0x06
    13fc:	9a 83       	std	Y+2, r25	; 0x02
    13fe:	89 83       	std	Y+1, r24	; 0x01
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	9a 81       	ldd	r25, Y+2	; 0x02
    1404:	01 97       	sbiw	r24, 0x01	; 1
    1406:	f1 f7       	brne	.-4      	; 0x1404 <fill_Password+0x160>
    1408:	9a 83       	std	Y+2, r25	; 0x02
    140a:	89 83       	std	Y+1, r24	; 0x01

void fill_Password(uint8 a_arr[])
{
	uint8 counter=0;
	key=KEYPAD_getPressedKey();/* get the pressed key number */
	while(key != '=')
    140c:	80 91 53 01 	lds	r24, 0x0153
    1410:	8d 33       	cpi	r24, 0x3D	; 61
    1412:	09 f0       	breq	.+2      	; 0x1416 <fill_Password+0x172>
    1414:	59 cf       	rjmp	.-334    	; 0x12c8 <fill_Password+0x24>
			}
		}
		_delay_ms(3000);
	}

}
    1416:	61 96       	adiw	r28, 0x11	; 17
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	f8 94       	cli
    141c:	de bf       	out	0x3e, r29	; 62
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	cd bf       	out	0x3d, r28	; 61
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	08 95       	ret

00001428 <Password_MISMATCH>:
void Password_MISMATCH(void)
{
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	2e 97       	sbiw	r28, 0x0e	; 14
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	f8 94       	cli
    1436:	de bf       	out	0x3e, r29	; 62
    1438:	0f be       	out	0x3f, r0	; 63
    143a:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    143c:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_clearScreen>
	LCD_displayString("PASSWORD MISMATCH");
    1440:	81 ed       	ldi	r24, 0xD1	; 209
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 94 02 1c 	call	0x3804	; 0x3804 <LCD_displayString>
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	aa e7       	ldi	r26, 0x7A	; 122
    144e:	b5 e4       	ldi	r27, 0x45	; 69
    1450:	8b 87       	std	Y+11, r24	; 0x0b
    1452:	9c 87       	std	Y+12, r25	; 0x0c
    1454:	ad 87       	std	Y+13, r26	; 0x0d
    1456:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1458:	6b 85       	ldd	r22, Y+11	; 0x0b
    145a:	7c 85       	ldd	r23, Y+12	; 0x0c
    145c:	8d 85       	ldd	r24, Y+13	; 0x0d
    145e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	4a e7       	ldi	r20, 0x7A	; 122
    1466:	53 e4       	ldi	r21, 0x43	; 67
    1468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	8f 83       	std	Y+7, r24	; 0x07
    1472:	98 87       	std	Y+8, r25	; 0x08
    1474:	a9 87       	std	Y+9, r26	; 0x09
    1476:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1478:	6f 81       	ldd	r22, Y+7	; 0x07
    147a:	78 85       	ldd	r23, Y+8	; 0x08
    147c:	89 85       	ldd	r24, Y+9	; 0x09
    147e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	40 e8       	ldi	r20, 0x80	; 128
    1486:	5f e3       	ldi	r21, 0x3F	; 63
    1488:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    148c:	88 23       	and	r24, r24
    148e:	2c f4       	brge	.+10     	; 0x149a <Password_MISMATCH+0x72>
		__ticks = 1;
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	9e 83       	std	Y+6, r25	; 0x06
    1496:	8d 83       	std	Y+5, r24	; 0x05
    1498:	3f c0       	rjmp	.+126    	; 0x1518 <Password_MISMATCH+0xf0>
	else if (__tmp > 65535)
    149a:	6f 81       	ldd	r22, Y+7	; 0x07
    149c:	78 85       	ldd	r23, Y+8	; 0x08
    149e:	89 85       	ldd	r24, Y+9	; 0x09
    14a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	3f ef       	ldi	r19, 0xFF	; 255
    14a6:	4f e7       	ldi	r20, 0x7F	; 127
    14a8:	57 e4       	ldi	r21, 0x47	; 71
    14aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14ae:	18 16       	cp	r1, r24
    14b0:	4c f5       	brge	.+82     	; 0x1504 <Password_MISMATCH+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    14b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    14b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	40 e2       	ldi	r20, 0x20	; 32
    14c0:	51 e4       	ldi	r21, 0x41	; 65
    14c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	bc 01       	movw	r22, r24
    14cc:	cd 01       	movw	r24, r26
    14ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	9e 83       	std	Y+6, r25	; 0x06
    14d8:	8d 83       	std	Y+5, r24	; 0x05
    14da:	0f c0       	rjmp	.+30     	; 0x14fa <Password_MISMATCH+0xd2>
    14dc:	89 e1       	ldi	r24, 0x19	; 25
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	9c 83       	std	Y+4, r25	; 0x04
    14e2:	8b 83       	std	Y+3, r24	; 0x03
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	9c 81       	ldd	r25, Y+4	; 0x04
    14e8:	01 97       	sbiw	r24, 0x01	; 1
    14ea:	f1 f7       	brne	.-4      	; 0x14e8 <Password_MISMATCH+0xc0>
    14ec:	9c 83       	std	Y+4, r25	; 0x04
    14ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f0:	8d 81       	ldd	r24, Y+5	; 0x05
    14f2:	9e 81       	ldd	r25, Y+6	; 0x06
    14f4:	01 97       	sbiw	r24, 0x01	; 1
    14f6:	9e 83       	std	Y+6, r25	; 0x06
    14f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14fa:	8d 81       	ldd	r24, Y+5	; 0x05
    14fc:	9e 81       	ldd	r25, Y+6	; 0x06
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	69 f7       	brne	.-38     	; 0x14dc <Password_MISMATCH+0xb4>
    1502:	14 c0       	rjmp	.+40     	; 0x152c <Password_MISMATCH+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1504:	6f 81       	ldd	r22, Y+7	; 0x07
    1506:	78 85       	ldd	r23, Y+8	; 0x08
    1508:	89 85       	ldd	r24, Y+9	; 0x09
    150a:	9a 85       	ldd	r25, Y+10	; 0x0a
    150c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1510:	dc 01       	movw	r26, r24
    1512:	cb 01       	movw	r24, r22
    1514:	9e 83       	std	Y+6, r25	; 0x06
    1516:	8d 83       	std	Y+5, r24	; 0x05
    1518:	8d 81       	ldd	r24, Y+5	; 0x05
    151a:	9e 81       	ldd	r25, Y+6	; 0x06
    151c:	9a 83       	std	Y+2, r25	; 0x02
    151e:	89 83       	std	Y+1, r24	; 0x01
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	9a 81       	ldd	r25, Y+2	; 0x02
    1524:	01 97       	sbiw	r24, 0x01	; 1
    1526:	f1 f7       	brne	.-4      	; 0x1524 <Password_MISMATCH+0xfc>
    1528:	9a 83       	std	Y+2, r25	; 0x02
    152a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(4000);

}
    152c:	2e 96       	adiw	r28, 0x0e	; 14
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	de bf       	out	0x3e, r29	; 62
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	cd bf       	out	0x3d, r28	; 61
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	08 95       	ret

0000153e <ALERTscreen>:



void ALERTscreen(void)
{
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1546:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_clearScreen>
	Timer_init(&Timer_config);
    154a:	86 e3       	ldi	r24, 0x36	; 54
    154c:	91 e0       	ldi	r25, 0x01	; 1
    154e:	0e 94 67 0c 	call	0x18ce	; 0x18ce <Timer_init>
	Timer_setCallBack( Calculate_time,Timer0);
    1552:	8e e1       	ldi	r24, 0x1E	; 30
    1554:	9b e0       	ldi	r25, 0x0B	; 11
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <Timer_setCallBack>
	tick =0; /*Initially make the tick equals zero, to start from the beginning*/
    155c:	10 92 44 01 	sts	0x0144, r1
	g_calc_sec_flag =0; /*Initially make the sec_flag equals zero,to start from the beginning*/
    1560:	10 92 45 01 	sts	0x0145, r1
    1564:	0e c0       	rjmp	.+28     	; 0x1582 <ALERTscreen+0x44>

	while(g_calc_sec_flag != 60)
		{
			LCD_displayStringRowColumn(0,4,"ALERT!!!!");
    1566:	23 ee       	ldi	r18, 0xE3	; 227
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	64 e0       	ldi	r22, 0x04	; 4
    156e:	a9 01       	movw	r20, r18
    1570:	0e 94 6d 1c 	call	0x38da	; 0x38da <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,4,"THEIF!!!!");
    1574:	2d ee       	ldi	r18, 0xED	; 237
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	64 e0       	ldi	r22, 0x04	; 4
    157c:	a9 01       	movw	r20, r18
    157e:	0e 94 6d 1c 	call	0x38da	; 0x38da <LCD_displayStringRowColumn>
	Timer_init(&Timer_config);
	Timer_setCallBack( Calculate_time,Timer0);
	tick =0; /*Initially make the tick equals zero, to start from the beginning*/
	g_calc_sec_flag =0; /*Initially make the sec_flag equals zero,to start from the beginning*/

	while(g_calc_sec_flag != 60)
    1582:	80 91 45 01 	lds	r24, 0x0145
    1586:	8c 33       	cpi	r24, 0x3C	; 60
    1588:	71 f7       	brne	.-36     	; 0x1566 <ALERTscreen+0x28>
		{
			LCD_displayStringRowColumn(0,4,"ALERT!!!!");
			LCD_displayStringRowColumn(1,4,"THEIF!!!!");
		}
		if(g_calc_sec_flag == 60)
    158a:	80 91 45 01 	lds	r24, 0x0145
    158e:	8c 33       	cpi	r24, 0x3C	; 60
    1590:	29 f4       	brne	.+10     	; 0x159c <ALERTscreen+0x5e>
		{
			wrong=0;
    1592:	10 92 43 01 	sts	0x0143, r1
			g_stateNum=1;
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	80 93 46 01 	sts	0x0146, r24
		}

}
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <doorIsOpeningCloseingScreen>:
void doorIsOpeningCloseingScreen(void)
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
	 * 2.SET THE CALL BACK FUNCTION
	 * 3. WHILE TIMER HASN'T FINISHED COUNTING DISPLAY DOOR IS UNLOCKING AND LOCKING  MESSAGE
	 * 4. IF TIME REACHED THE REQUIRED COUNTS
	 *    WRONG COUNTER BACK TO ZERO COUNTS ALSO GO BACK TO THE MAIN FUNCTION
	 */
	LCD_clearScreen();
    15aa:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_clearScreen>
	Timer_init(&Timer_config);
    15ae:	86 e3       	ldi	r24, 0x36	; 54
    15b0:	91 e0       	ldi	r25, 0x01	; 1
    15b2:	0e 94 67 0c 	call	0x18ce	; 0x18ce <Timer_init>
	Timer_setCallBack(Calculate_time,Timer0);
    15b6:	8e e1       	ldi	r24, 0x1E	; 30
    15b8:	9b e0       	ldi	r25, 0x0B	; 11
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <Timer_setCallBack>
	tick =0; /*Initially make the tick equals zero, to start from the beginning*/
    15c0:	10 92 44 01 	sts	0x0144, r1
	g_calc_sec_flag =0; /*Initially make the sec_flag equals zero,to start from the beginning*/
    15c4:	10 92 45 01 	sts	0x0145, r1
    15c8:	07 c0       	rjmp	.+14     	; 0x15d8 <doorIsOpeningCloseingScreen+0x36>

	while(g_calc_sec_flag != 15)
	{
		LCD_displayStringRowColumn(0,0,"DOOR IS UNLOCKING..");
    15ca:	27 ef       	ldi	r18, 0xF7	; 247
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	60 e0       	ldi	r22, 0x00	; 0
    15d2:	a9 01       	movw	r20, r18
    15d4:	0e 94 6d 1c 	call	0x38da	; 0x38da <LCD_displayStringRowColumn>
	Timer_init(&Timer_config);
	Timer_setCallBack(Calculate_time,Timer0);
	tick =0; /*Initially make the tick equals zero, to start from the beginning*/
	g_calc_sec_flag =0; /*Initially make the sec_flag equals zero,to start from the beginning*/

	while(g_calc_sec_flag != 15)
    15d8:	80 91 45 01 	lds	r24, 0x0145
    15dc:	8f 30       	cpi	r24, 0x0F	; 15
    15de:	a9 f7       	brne	.-22     	; 0x15ca <doorIsOpeningCloseingScreen+0x28>
	{
		LCD_displayStringRowColumn(0,0,"DOOR IS UNLOCKING..");
	}
	LCD_clearScreen();/*Clear LCD*/
    15e0:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_clearScreen>
	tick =0; /*Initially make the tick equals zero, to start from the beginning*/
    15e4:	10 92 44 01 	sts	0x0144, r1
	g_calc_sec_flag =0; /*Initially make the sec_flag equals zero, to start from the beginning*/
    15e8:	10 92 45 01 	sts	0x0145, r1
    15ec:	07 c0       	rjmp	.+14     	; 0x15fc <doorIsOpeningCloseingScreen+0x5a>
	/*As long as it hasn't passed 3 seconds, display on LCD this message*/
	while(g_calc_sec_flag != 3)
	{
		LCD_displayStringRowColumn(0,0,"Door is opened");
    15ee:	2b e0       	ldi	r18, 0x0B	; 11
    15f0:	31 e0       	ldi	r19, 0x01	; 1
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	60 e0       	ldi	r22, 0x00	; 0
    15f6:	a9 01       	movw	r20, r18
    15f8:	0e 94 6d 1c 	call	0x38da	; 0x38da <LCD_displayStringRowColumn>
	}
	LCD_clearScreen();/*Clear LCD*/
	tick =0; /*Initially make the tick equals zero, to start from the beginning*/
	g_calc_sec_flag =0; /*Initially make the sec_flag equals zero, to start from the beginning*/
	/*As long as it hasn't passed 3 seconds, display on LCD this message*/
	while(g_calc_sec_flag != 3)
    15fc:	80 91 45 01 	lds	r24, 0x0145
    1600:	83 30       	cpi	r24, 0x03	; 3
    1602:	a9 f7       	brne	.-22     	; 0x15ee <doorIsOpeningCloseingScreen+0x4c>
	{
		LCD_displayStringRowColumn(0,0,"Door is opened");
	}
	LCD_clearScreen(); /*Clear LCD*/
    1604:	0e 94 a9 1c 	call	0x3952	; 0x3952 <LCD_clearScreen>
		tick =0; /*Initially make the tick equals zero, to start from the beginning*/
    1608:	10 92 44 01 	sts	0x0144, r1
		g_calc_sec_flag =0; /*Initially make the sec_flag equals zero, to start from the beginning*/
    160c:	10 92 45 01 	sts	0x0145, r1
    1610:	07 c0       	rjmp	.+14     	; 0x1620 <doorIsOpeningCloseingScreen+0x7e>
		/*As long as it hasn't passed 15 seconds, display on LCD this message*/
		while(g_calc_sec_flag != 15)
		{
			LCD_displayStringRowColumn(0,0,"locking door");
    1612:	2a e1       	ldi	r18, 0x1A	; 26
    1614:	31 e0       	ldi	r19, 0x01	; 1
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	60 e0       	ldi	r22, 0x00	; 0
    161a:	a9 01       	movw	r20, r18
    161c:	0e 94 6d 1c 	call	0x38da	; 0x38da <LCD_displayStringRowColumn>
	}
	LCD_clearScreen(); /*Clear LCD*/
		tick =0; /*Initially make the tick equals zero, to start from the beginning*/
		g_calc_sec_flag =0; /*Initially make the sec_flag equals zero, to start from the beginning*/
		/*As long as it hasn't passed 15 seconds, display on LCD this message*/
		while(g_calc_sec_flag != 15)
    1620:	80 91 45 01 	lds	r24, 0x0145
    1624:	8f 30       	cpi	r24, 0x0F	; 15
    1626:	a9 f7       	brne	.-22     	; 0x1612 <doorIsOpeningCloseingScreen+0x70>
		{
			LCD_displayStringRowColumn(0,0,"locking door");

		}
		if(g_calc_sec_flag == 15)
    1628:	80 91 45 01 	lds	r24, 0x0145
    162c:	8f 30       	cpi	r24, 0x0F	; 15
    162e:	19 f4       	brne	.+6      	; 0x1636 <doorIsOpeningCloseingScreen+0x94>
			{
				g_stateNum=1;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	80 93 46 01 	sts	0x0146, r24
			}

}
    1636:	cf 91       	pop	r28
    1638:	df 91       	pop	r29
    163a:	08 95       	ret

0000163c <Calculate_time>:



void Calculate_time(void)
{
    163c:	df 93       	push	r29
    163e:	cf 93       	push	r28
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
	tick ++; /*Every overflow increase ticks*/
    1644:	80 91 44 01 	lds	r24, 0x0144
    1648:	8f 5f       	subi	r24, 0xFF	; 255
    164a:	80 93 44 01 	sts	0x0144, r24

	/*Once ticks become 30(according to the used prescalar),increase seconds flag and tick =0*/
	if(tick == 30)
    164e:	80 91 44 01 	lds	r24, 0x0144
    1652:	8e 31       	cpi	r24, 0x1E	; 30
    1654:	39 f4       	brne	.+14     	; 0x1664 <Calculate_time+0x28>
	{
		g_calc_sec_flag ++; /*Every 30 tick, increase seconds flag*/
    1656:	80 91 45 01 	lds	r24, 0x0145
    165a:	8f 5f       	subi	r24, 0xFF	; 255
    165c:	80 93 45 01 	sts	0x0145, r24
		tick =0; /*Put tick=0 to start counting new second*/
    1660:	10 92 44 01 	sts	0x0144, r1
	}
}
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	08 95       	ret

0000166a <__vector_9>:
static volatile void (*g_Timer2CallBackPtr)(void) = NULL_PTR;

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_OVF_vect) {
    166a:	1f 92       	push	r1
    166c:	0f 92       	push	r0
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	0f 92       	push	r0
    1672:	11 24       	eor	r1, r1
    1674:	2f 93       	push	r18
    1676:	3f 93       	push	r19
    1678:	4f 93       	push	r20
    167a:	5f 93       	push	r21
    167c:	6f 93       	push	r22
    167e:	7f 93       	push	r23
    1680:	8f 93       	push	r24
    1682:	9f 93       	push	r25
    1684:	af 93       	push	r26
    1686:	bf 93       	push	r27
    1688:	ef 93       	push	r30
    168a:	ff 93       	push	r31
    168c:	df 93       	push	r29
    168e:	cf 93       	push	r28
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR) {
    1694:	80 91 47 01 	lds	r24, 0x0147
    1698:	90 91 48 01 	lds	r25, 0x0148
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	29 f0       	breq	.+10     	; 0x16aa <__vector_9+0x40>
		(*g_Timer0CallBackPtr)();
    16a0:	e0 91 47 01 	lds	r30, 0x0147
    16a4:	f0 91 48 01 	lds	r31, 0x0148
    16a8:	09 95       	icall
	}
}
    16aa:	cf 91       	pop	r28
    16ac:	df 91       	pop	r29
    16ae:	ff 91       	pop	r31
    16b0:	ef 91       	pop	r30
    16b2:	bf 91       	pop	r27
    16b4:	af 91       	pop	r26
    16b6:	9f 91       	pop	r25
    16b8:	8f 91       	pop	r24
    16ba:	7f 91       	pop	r23
    16bc:	6f 91       	pop	r22
    16be:	5f 91       	pop	r21
    16c0:	4f 91       	pop	r20
    16c2:	3f 91       	pop	r19
    16c4:	2f 91       	pop	r18
    16c6:	0f 90       	pop	r0
    16c8:	0f be       	out	0x3f, r0	; 63
    16ca:	0f 90       	pop	r0
    16cc:	1f 90       	pop	r1
    16ce:	18 95       	reti

000016d0 <__vector_19>:

/* Timer0 compare */
ISR(TIMER0_COMP_vect) {
    16d0:	1f 92       	push	r1
    16d2:	0f 92       	push	r0
    16d4:	0f b6       	in	r0, 0x3f	; 63
    16d6:	0f 92       	push	r0
    16d8:	11 24       	eor	r1, r1
    16da:	2f 93       	push	r18
    16dc:	3f 93       	push	r19
    16de:	4f 93       	push	r20
    16e0:	5f 93       	push	r21
    16e2:	6f 93       	push	r22
    16e4:	7f 93       	push	r23
    16e6:	8f 93       	push	r24
    16e8:	9f 93       	push	r25
    16ea:	af 93       	push	r26
    16ec:	bf 93       	push	r27
    16ee:	ef 93       	push	r30
    16f0:	ff 93       	push	r31
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR) {
    16fa:	80 91 47 01 	lds	r24, 0x0147
    16fe:	90 91 48 01 	lds	r25, 0x0148
    1702:	00 97       	sbiw	r24, 0x00	; 0
    1704:	29 f0       	breq	.+10     	; 0x1710 <__vector_19+0x40>
		(*g_Timer0CallBackPtr)();
    1706:	e0 91 47 01 	lds	r30, 0x0147
    170a:	f0 91 48 01 	lds	r31, 0x0148
    170e:	09 95       	icall
	}
}
    1710:	cf 91       	pop	r28
    1712:	df 91       	pop	r29
    1714:	ff 91       	pop	r31
    1716:	ef 91       	pop	r30
    1718:	bf 91       	pop	r27
    171a:	af 91       	pop	r26
    171c:	9f 91       	pop	r25
    171e:	8f 91       	pop	r24
    1720:	7f 91       	pop	r23
    1722:	6f 91       	pop	r22
    1724:	5f 91       	pop	r21
    1726:	4f 91       	pop	r20
    1728:	3f 91       	pop	r19
    172a:	2f 91       	pop	r18
    172c:	0f 90       	pop	r0
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	0f 90       	pop	r0
    1732:	1f 90       	pop	r1
    1734:	18 95       	reti

00001736 <__vector_8>:

/* Timer1 overflow*/
ISR(TIMER1_OVF_vect) {
    1736:	1f 92       	push	r1
    1738:	0f 92       	push	r0
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	0f 92       	push	r0
    173e:	11 24       	eor	r1, r1
    1740:	2f 93       	push	r18
    1742:	3f 93       	push	r19
    1744:	4f 93       	push	r20
    1746:	5f 93       	push	r21
    1748:	6f 93       	push	r22
    174a:	7f 93       	push	r23
    174c:	8f 93       	push	r24
    174e:	9f 93       	push	r25
    1750:	af 93       	push	r26
    1752:	bf 93       	push	r27
    1754:	ef 93       	push	r30
    1756:	ff 93       	push	r31
    1758:	df 93       	push	r29
    175a:	cf 93       	push	r28
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR) {
    1760:	80 91 49 01 	lds	r24, 0x0149
    1764:	90 91 4a 01 	lds	r25, 0x014A
    1768:	00 97       	sbiw	r24, 0x00	; 0
    176a:	29 f0       	breq	.+10     	; 0x1776 <__vector_8+0x40>
		(*g_Timer1CallBackPtr)();
    176c:	e0 91 49 01 	lds	r30, 0x0149
    1770:	f0 91 4a 01 	lds	r31, 0x014A
    1774:	09 95       	icall
	}
}
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	ff 91       	pop	r31
    177c:	ef 91       	pop	r30
    177e:	bf 91       	pop	r27
    1780:	af 91       	pop	r26
    1782:	9f 91       	pop	r25
    1784:	8f 91       	pop	r24
    1786:	7f 91       	pop	r23
    1788:	6f 91       	pop	r22
    178a:	5f 91       	pop	r21
    178c:	4f 91       	pop	r20
    178e:	3f 91       	pop	r19
    1790:	2f 91       	pop	r18
    1792:	0f 90       	pop	r0
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	0f 90       	pop	r0
    1798:	1f 90       	pop	r1
    179a:	18 95       	reti

0000179c <__vector_6>:

/* Timer1 compare */
ISR(TIMER1_COMPA_vect) {
    179c:	1f 92       	push	r1
    179e:	0f 92       	push	r0
    17a0:	0f b6       	in	r0, 0x3f	; 63
    17a2:	0f 92       	push	r0
    17a4:	11 24       	eor	r1, r1
    17a6:	2f 93       	push	r18
    17a8:	3f 93       	push	r19
    17aa:	4f 93       	push	r20
    17ac:	5f 93       	push	r21
    17ae:	6f 93       	push	r22
    17b0:	7f 93       	push	r23
    17b2:	8f 93       	push	r24
    17b4:	9f 93       	push	r25
    17b6:	af 93       	push	r26
    17b8:	bf 93       	push	r27
    17ba:	ef 93       	push	r30
    17bc:	ff 93       	push	r31
    17be:	df 93       	push	r29
    17c0:	cf 93       	push	r28
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR) {
    17c6:	80 91 49 01 	lds	r24, 0x0149
    17ca:	90 91 4a 01 	lds	r25, 0x014A
    17ce:	00 97       	sbiw	r24, 0x00	; 0
    17d0:	29 f0       	breq	.+10     	; 0x17dc <__vector_6+0x40>
		(*g_Timer1CallBackPtr)();
    17d2:	e0 91 49 01 	lds	r30, 0x0149
    17d6:	f0 91 4a 01 	lds	r31, 0x014A
    17da:	09 95       	icall
	}
}
    17dc:	cf 91       	pop	r28
    17de:	df 91       	pop	r29
    17e0:	ff 91       	pop	r31
    17e2:	ef 91       	pop	r30
    17e4:	bf 91       	pop	r27
    17e6:	af 91       	pop	r26
    17e8:	9f 91       	pop	r25
    17ea:	8f 91       	pop	r24
    17ec:	7f 91       	pop	r23
    17ee:	6f 91       	pop	r22
    17f0:	5f 91       	pop	r21
    17f2:	4f 91       	pop	r20
    17f4:	3f 91       	pop	r19
    17f6:	2f 91       	pop	r18
    17f8:	0f 90       	pop	r0
    17fa:	0f be       	out	0x3f, r0	; 63
    17fc:	0f 90       	pop	r0
    17fe:	1f 90       	pop	r1
    1800:	18 95       	reti

00001802 <__vector_4>:

/* Timer2 overflow*/
ISR(TIMER2_OVF_vect) {
    1802:	1f 92       	push	r1
    1804:	0f 92       	push	r0
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	0f 92       	push	r0
    180a:	11 24       	eor	r1, r1
    180c:	2f 93       	push	r18
    180e:	3f 93       	push	r19
    1810:	4f 93       	push	r20
    1812:	5f 93       	push	r21
    1814:	6f 93       	push	r22
    1816:	7f 93       	push	r23
    1818:	8f 93       	push	r24
    181a:	9f 93       	push	r25
    181c:	af 93       	push	r26
    181e:	bf 93       	push	r27
    1820:	ef 93       	push	r30
    1822:	ff 93       	push	r31
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR) {
    182c:	80 91 4b 01 	lds	r24, 0x014B
    1830:	90 91 4c 01 	lds	r25, 0x014C
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	29 f0       	breq	.+10     	; 0x1842 <__vector_4+0x40>
		(*g_Timer2CallBackPtr)();
    1838:	e0 91 4b 01 	lds	r30, 0x014B
    183c:	f0 91 4c 01 	lds	r31, 0x014C
    1840:	09 95       	icall
	}
}
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	ff 91       	pop	r31
    1848:	ef 91       	pop	r30
    184a:	bf 91       	pop	r27
    184c:	af 91       	pop	r26
    184e:	9f 91       	pop	r25
    1850:	8f 91       	pop	r24
    1852:	7f 91       	pop	r23
    1854:	6f 91       	pop	r22
    1856:	5f 91       	pop	r21
    1858:	4f 91       	pop	r20
    185a:	3f 91       	pop	r19
    185c:	2f 91       	pop	r18
    185e:	0f 90       	pop	r0
    1860:	0f be       	out	0x3f, r0	; 63
    1862:	0f 90       	pop	r0
    1864:	1f 90       	pop	r1
    1866:	18 95       	reti

00001868 <__vector_3>:

/* Timer2 compare */
ISR(TIMER2_COMP_vect) {
    1868:	1f 92       	push	r1
    186a:	0f 92       	push	r0
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	0f 92       	push	r0
    1870:	11 24       	eor	r1, r1
    1872:	2f 93       	push	r18
    1874:	3f 93       	push	r19
    1876:	4f 93       	push	r20
    1878:	5f 93       	push	r21
    187a:	6f 93       	push	r22
    187c:	7f 93       	push	r23
    187e:	8f 93       	push	r24
    1880:	9f 93       	push	r25
    1882:	af 93       	push	r26
    1884:	bf 93       	push	r27
    1886:	ef 93       	push	r30
    1888:	ff 93       	push	r31
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR) {
    1892:	80 91 4b 01 	lds	r24, 0x014B
    1896:	90 91 4c 01 	lds	r25, 0x014C
    189a:	00 97       	sbiw	r24, 0x00	; 0
    189c:	29 f0       	breq	.+10     	; 0x18a8 <__vector_3+0x40>
		(*g_Timer2CallBackPtr)();
    189e:	e0 91 4b 01 	lds	r30, 0x014B
    18a2:	f0 91 4c 01 	lds	r31, 0x014C
    18a6:	09 95       	icall
	}
}
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	ff 91       	pop	r31
    18ae:	ef 91       	pop	r30
    18b0:	bf 91       	pop	r27
    18b2:	af 91       	pop	r26
    18b4:	9f 91       	pop	r25
    18b6:	8f 91       	pop	r24
    18b8:	7f 91       	pop	r23
    18ba:	6f 91       	pop	r22
    18bc:	5f 91       	pop	r21
    18be:	4f 91       	pop	r20
    18c0:	3f 91       	pop	r19
    18c2:	2f 91       	pop	r18
    18c4:	0f 90       	pop	r0
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	0f 90       	pop	r0
    18ca:	1f 90       	pop	r1
    18cc:	18 95       	reti

000018ce <Timer_init>:


void Timer_init(const Timer_ConfigType * Config_Ptr){
    18ce:	df 93       	push	r29
    18d0:	cf 93       	push	r28
    18d2:	cd b7       	in	r28, 0x3d	; 61
    18d4:	de b7       	in	r29, 0x3e	; 62
    18d6:	2c 97       	sbiw	r28, 0x0c	; 12
    18d8:	0f b6       	in	r0, 0x3f	; 63
    18da:	f8 94       	cli
    18dc:	de bf       	out	0x3e, r29	; 62
    18de:	0f be       	out	0x3f, r0	; 63
    18e0:	cd bf       	out	0x3d, r28	; 61
    18e2:	9a 83       	std	Y+2, r25	; 0x02
    18e4:	89 83       	std	Y+1, r24	; 0x01
	if (Config_Ptr->timer_ID == Timer0){
    18e6:	e9 81       	ldd	r30, Y+1	; 0x01
    18e8:	fa 81       	ldd	r31, Y+2	; 0x02
    18ea:	80 81       	ld	r24, Z
    18ec:	88 23       	and	r24, r24
    18ee:	09 f0       	breq	.+2      	; 0x18f2 <Timer_init+0x24>
    18f0:	a4 c0       	rjmp	.+328    	; 0x1a3a <Timer_init+0x16c>
		TCCR0 &= 0X00;
    18f2:	e3 e5       	ldi	r30, 0x53	; 83
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	20 81       	ld	r18, Z
    18f8:	e3 e5       	ldi	r30, 0x53	; 83
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	10 82       	st	Z, r1
		TCNT0 &= 0X00;
    18fe:	e2 e5       	ldi	r30, 0x52	; 82
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	30 81       	ld	r19, Z
    1904:	e2 e5       	ldi	r30, 0x52	; 82
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	10 82       	st	Z, r1
		OCR0 &= 0X00;
    190a:	ec e5       	ldi	r30, 0x5C	; 92
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	ec e5       	ldi	r30, 0x5C	; 92
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	10 82       	st	Z, r1
		TIMSK &= 0X00;
    1916:	e9 e5       	ldi	r30, 0x59	; 89
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	90 81       	ld	r25, Z
    191c:	e9 e5       	ldi	r30, 0x59	; 89
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	10 82       	st	Z, r1
		TCNT0 = ( (Config_Ptr->initial_Value) ) & 0XFF;
    1922:	a2 e5       	ldi	r26, 0x52	; 82
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e9 81       	ldd	r30, Y+1	; 0x01
    1928:	fa 81       	ldd	r31, Y+2	; 0x02
    192a:	83 81       	ldd	r24, Z+3	; 0x03
    192c:	8c 93       	st	X, r24
		TCCR0 = (TCCR0  & 0xF8) | (Config_Ptr->Prescaler);
    192e:	a3 e5       	ldi	r26, 0x53	; 83
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	e3 e5       	ldi	r30, 0x53	; 83
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	98 2f       	mov	r25, r24
    193a:	98 7f       	andi	r25, 0xF8	; 248
    193c:	e9 81       	ldd	r30, Y+1	; 0x01
    193e:	fa 81       	ldd	r31, Y+2	; 0x02
    1940:	82 81       	ldd	r24, Z+2	; 0x02
    1942:	89 2b       	or	r24, r25
    1944:	8c 93       	st	X, r24


		switch(Config_Ptr->mode)
    1946:	e9 81       	ldd	r30, Y+1	; 0x01
    1948:	fa 81       	ldd	r31, Y+2	; 0x02
    194a:	81 81       	ldd	r24, Z+1	; 0x01
    194c:	e8 2f       	mov	r30, r24
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	f8 87       	std	Y+8, r31	; 0x08
    1952:	ef 83       	std	Y+7, r30	; 0x07
    1954:	2f 81       	ldd	r18, Y+7	; 0x07
    1956:	38 85       	ldd	r19, Y+8	; 0x08
    1958:	21 15       	cp	r18, r1
    195a:	31 05       	cpc	r19, r1
    195c:	31 f0       	breq	.+12     	; 0x196a <Timer_init+0x9c>
    195e:	8f 81       	ldd	r24, Y+7	; 0x07
    1960:	98 85       	ldd	r25, Y+8	; 0x08
    1962:	82 30       	cpi	r24, 0x02	; 2
    1964:	91 05       	cpc	r25, r1
    1966:	91 f1       	breq	.+100    	; 0x19cc <Timer_init+0xfe>
    1968:	c8 c1       	rjmp	.+912    	; 0x1cfa <Timer_init+0x42c>
		{
		case Normal:


			TCCR0  = CLEAR_BIT(TCCR0 , WGM00);//Clear WGM00 bit in TCCR0 register
    196a:	23 e5       	ldi	r18, 0x53	; 83
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	a3 e5       	ldi	r26, 0x53	; 83
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	e3 e5       	ldi	r30, 0x53	; 83
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	8f 7b       	andi	r24, 0xBF	; 191
    197a:	8c 93       	st	X, r24
    197c:	8c 91       	ld	r24, X
    197e:	f9 01       	movw	r30, r18
    1980:	80 83       	st	Z, r24
			TCCR0  = CLEAR_BIT(TCCR0 , WGM01);//Clear WGM01 bit in TCCR0 register
    1982:	23 e5       	ldi	r18, 0x53	; 83
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	a3 e5       	ldi	r26, 0x53	; 83
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	e3 e5       	ldi	r30, 0x53	; 83
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	87 7f       	andi	r24, 0xF7	; 247
    1992:	8c 93       	st	X, r24
    1994:	8c 91       	ld	r24, X
    1996:	f9 01       	movw	r30, r18
    1998:	80 83       	st	Z, r24


			TCCR0 = SET_BIT(TCCR0,FOC0);//Make FOC0 to be Active as it is overflow mode
    199a:	23 e5       	ldi	r18, 0x53	; 83
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	a3 e5       	ldi	r26, 0x53	; 83
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	e3 e5       	ldi	r30, 0x53	; 83
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	80 68       	ori	r24, 0x80	; 128
    19aa:	8c 93       	st	X, r24
    19ac:	8c 91       	ld	r24, X
    19ae:	f9 01       	movw	r30, r18
    19b0:	80 83       	st	Z, r24


			TIMSK = SET_BIT(TIMSK, TOIE0);//Enable Timer0 overflow interrupt
    19b2:	29 e5       	ldi	r18, 0x59	; 89
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	a9 e5       	ldi	r26, 0x59	; 89
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e9 e5       	ldi	r30, 0x59	; 89
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	81 60       	ori	r24, 0x01	; 1
    19c2:	8c 93       	st	X, r24
    19c4:	8c 91       	ld	r24, X
    19c6:	f9 01       	movw	r30, r18
    19c8:	80 83       	st	Z, r24
    19ca:	97 c1       	rjmp	.+814    	; 0x1cfa <Timer_init+0x42c>
						break;


		case CTC:
			TCCR0  = CLEAR_BIT(TCCR0 , WGM00);//Clear WGM00 bit in TCCR0 register
    19cc:	23 e5       	ldi	r18, 0x53	; 83
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	a3 e5       	ldi	r26, 0x53	; 83
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	e3 e5       	ldi	r30, 0x53	; 83
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	8f 7b       	andi	r24, 0xBF	; 191
    19dc:	8c 93       	st	X, r24
    19de:	8c 91       	ld	r24, X
    19e0:	f9 01       	movw	r30, r18
    19e2:	80 83       	st	Z, r24
			TCCR0  = SET_BIT(TCCR0 , WGM01);//Set WGM01 bit in TCCR0 register
    19e4:	23 e5       	ldi	r18, 0x53	; 83
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	a3 e5       	ldi	r26, 0x53	; 83
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e3 e5       	ldi	r30, 0x53	; 83
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	88 60       	ori	r24, 0x08	; 8
    19f4:	8c 93       	st	X, r24
    19f6:	8c 91       	ld	r24, X
    19f8:	f9 01       	movw	r30, r18
    19fa:	80 83       	st	Z, r24

			TCCR0 = SET_BIT(TCCR0,FOC0);//Make FOC0 to be Active as it is overflow mode
    19fc:	23 e5       	ldi	r18, 0x53	; 83
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	a3 e5       	ldi	r26, 0x53	; 83
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	e3 e5       	ldi	r30, 0x53	; 83
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	80 68       	ori	r24, 0x80	; 128
    1a0c:	8c 93       	st	X, r24
    1a0e:	8c 91       	ld	r24, X
    1a10:	f9 01       	movw	r30, r18
    1a12:	80 83       	st	Z, r24

			OCR0  = Config_Ptr->Compare_Value; // Set Compare Value
    1a14:	ac e5       	ldi	r26, 0x5C	; 92
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	e9 81       	ldd	r30, Y+1	; 0x01
    1a1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a1c:	84 81       	ldd	r24, Z+4	; 0x04
    1a1e:	8c 93       	st	X, r24

			TIMSK = SET_BIT(TIMSK, OCIE0);//Enable Timer0 overflow interrupt
    1a20:	29 e5       	ldi	r18, 0x59	; 89
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	a9 e5       	ldi	r26, 0x59	; 89
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	e9 e5       	ldi	r30, 0x59	; 89
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	82 60       	ori	r24, 0x02	; 2
    1a30:	8c 93       	st	X, r24
    1a32:	8c 91       	ld	r24, X
    1a34:	f9 01       	movw	r30, r18
    1a36:	80 83       	st	Z, r24
    1a38:	60 c1       	rjmp	.+704    	; 0x1cfa <Timer_init+0x42c>

			break;
		}

	}
	else if (Config_Ptr->timer_ID == Timer1)
    1a3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a3e:	80 81       	ld	r24, Z
    1a40:	81 30       	cpi	r24, 0x01	; 1
    1a42:	09 f0       	breq	.+2      	; 0x1a46 <Timer_init+0x178>
    1a44:	b2 c0       	rjmp	.+356    	; 0x1baa <Timer_init+0x2dc>
	{
		TCCR1A =0;
    1a46:	ef e4       	ldi	r30, 0x4F	; 79
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	10 82       	st	Z, r1
		TCNT1 = ( (Config_Ptr->initial_Value) ) & 0XFFFF;
    1a4c:	ac e4       	ldi	r26, 0x4C	; 76
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	e9 81       	ldd	r30, Y+1	; 0x01
    1a52:	fa 81       	ldd	r31, Y+2	; 0x02
    1a54:	83 81       	ldd	r24, Z+3	; 0x03
    1a56:	88 2f       	mov	r24, r24
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	11 96       	adiw	r26, 0x01	; 1
    1a5c:	9c 93       	st	X, r25
    1a5e:	8e 93       	st	-X, r24
		TCCR1B =  (TCCR1B & 0XF8) | (Config_Ptr->Prescaler);
    1a60:	ae e4       	ldi	r26, 0x4E	; 78
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	ee e4       	ldi	r30, 0x4E	; 78
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	98 2f       	mov	r25, r24
    1a6c:	98 7f       	andi	r25, 0xF8	; 248
    1a6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a70:	fa 81       	ldd	r31, Y+2	; 0x02
    1a72:	82 81       	ldd	r24, Z+2	; 0x02
    1a74:	89 2b       	or	r24, r25
    1a76:	8c 93       	st	X, r24
		TCCR1A = TCCR1A & 0X0F;
    1a78:	af e4       	ldi	r26, 0x4F	; 79
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	ef e4       	ldi	r30, 0x4F	; 79
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	8f 70       	andi	r24, 0x0F	; 15
    1a84:	8c 93       	st	X, r24


		switch(Config_Ptr->mode)
    1a86:	e9 81       	ldd	r30, Y+1	; 0x01
    1a88:	fa 81       	ldd	r31, Y+2	; 0x02
    1a8a:	81 81       	ldd	r24, Z+1	; 0x01
    1a8c:	28 2f       	mov	r18, r24
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	3e 83       	std	Y+6, r19	; 0x06
    1a92:	2d 83       	std	Y+5, r18	; 0x05
    1a94:	8d 81       	ldd	r24, Y+5	; 0x05
    1a96:	9e 81       	ldd	r25, Y+6	; 0x06
    1a98:	00 97       	sbiw	r24, 0x00	; 0
    1a9a:	31 f0       	breq	.+12     	; 0x1aa8 <Timer_init+0x1da>
    1a9c:	ed 81       	ldd	r30, Y+5	; 0x05
    1a9e:	fe 81       	ldd	r31, Y+6	; 0x06
    1aa0:	e2 30       	cpi	r30, 0x02	; 2
    1aa2:	f1 05       	cpc	r31, r1
    1aa4:	a1 f1       	breq	.+104    	; 0x1b0e <Timer_init+0x240>
    1aa6:	29 c1       	rjmp	.+594    	; 0x1cfa <Timer_init+0x42c>
						/*
						 * Normal Overflow mode:
						 *                      Clear WGM10/WMG11 bit in TCCR1A register
						 *                      Clear WGM12/WGM13 bit in TCCR1B register
						 */
						TCCR1A = TCCR1A & 0XFC ;
    1aa8:	af e4       	ldi	r26, 0x4F	; 79
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	ef e4       	ldi	r30, 0x4F	; 79
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	8c 7f       	andi	r24, 0xFC	; 252
    1ab4:	8c 93       	st	X, r24
						TCCR1B = TCCR1B & 0XE7 ;
    1ab6:	ae e4       	ldi	r26, 0x4E	; 78
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	ee e4       	ldi	r30, 0x4E	; 78
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	87 7e       	andi	r24, 0xE7	; 231
    1ac2:	8c 93       	st	X, r24

						/*
						 * Make FOC1A/FOC1B to be Active as it is overflow mode
						 */
						TCCR1A =  SET_BIT(TCCR1A,FOC1A);
    1ac4:	2f e4       	ldi	r18, 0x4F	; 79
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	af e4       	ldi	r26, 0x4F	; 79
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	ef e4       	ldi	r30, 0x4F	; 79
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	88 60       	ori	r24, 0x08	; 8
    1ad4:	8c 93       	st	X, r24
    1ad6:	8c 91       	ld	r24, X
    1ad8:	f9 01       	movw	r30, r18
    1ada:	80 83       	st	Z, r24
						TCCR1A =  SET_BIT(TCCR1A,FOC1B);
    1adc:	2f e4       	ldi	r18, 0x4F	; 79
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	af e4       	ldi	r26, 0x4F	; 79
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	ef e4       	ldi	r30, 0x4F	; 79
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	84 60       	ori	r24, 0x04	; 4
    1aec:	8c 93       	st	X, r24
    1aee:	8c 91       	ld	r24, X
    1af0:	f9 01       	movw	r30, r18
    1af2:	80 83       	st	Z, r24


						/*
						 * Enable Timer1 overflow interrupt
						 */
						TIMSK = SET_BIT(TIMSK,TOIE1);
    1af4:	29 e5       	ldi	r18, 0x59	; 89
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	a9 e5       	ldi	r26, 0x59	; 89
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e9 e5       	ldi	r30, 0x59	; 89
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	84 60       	ori	r24, 0x04	; 4
    1b04:	8c 93       	st	X, r24
    1b06:	8c 91       	ld	r24, X
    1b08:	f9 01       	movw	r30, r18
    1b0a:	80 83       	st	Z, r24
    1b0c:	f6 c0       	rjmp	.+492    	; 0x1cfa <Timer_init+0x42c>
						 *  Compare mode:
						 *              Clear WGM10/WGM11 bits in TCCR1A register
						 *              Set WGM12 bit in TCCR1B register
						 *              Clear WGM13 bit in TCCR1B register
						 */
						TCCR1A = TCCR1A & 0XFC ;
    1b0e:	af e4       	ldi	r26, 0x4F	; 79
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	ef e4       	ldi	r30, 0x4F	; 79
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	8c 7f       	andi	r24, 0xFC	; 252
    1b1a:	8c 93       	st	X, r24
						TCCR1B = SET_BIT(TCCR1B, WGM12);
    1b1c:	2e e4       	ldi	r18, 0x4E	; 78
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	ae e4       	ldi	r26, 0x4E	; 78
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	ee e4       	ldi	r30, 0x4E	; 78
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	88 60       	ori	r24, 0x08	; 8
    1b2c:	8c 93       	st	X, r24
    1b2e:	8c 91       	ld	r24, X
    1b30:	f9 01       	movw	r30, r18
    1b32:	80 83       	st	Z, r24
						TCCR1B = CLEAR_BIT(TCCR1B, WGM13);
    1b34:	2e e4       	ldi	r18, 0x4E	; 78
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	ae e4       	ldi	r26, 0x4E	; 78
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	ee e4       	ldi	r30, 0x4E	; 78
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	8f 7e       	andi	r24, 0xEF	; 239
    1b44:	8c 93       	st	X, r24
    1b46:	8c 91       	ld	r24, X
    1b48:	f9 01       	movw	r30, r18
    1b4a:	80 83       	st	Z, r24

						/*
						 *  Make FOC1A/FOC1B to be Active as it is compare mode
						 */
						TCCR1A =  SET_BIT(TCCR1A,FOC1A);
    1b4c:	2f e4       	ldi	r18, 0x4F	; 79
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	af e4       	ldi	r26, 0x4F	; 79
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	ef e4       	ldi	r30, 0x4F	; 79
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	88 60       	ori	r24, 0x08	; 8
    1b5c:	8c 93       	st	X, r24
    1b5e:	8c 91       	ld	r24, X
    1b60:	f9 01       	movw	r30, r18
    1b62:	80 83       	st	Z, r24
						TCCR1A =  SET_BIT(TCCR1A,FOC1B);
    1b64:	2f e4       	ldi	r18, 0x4F	; 79
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	af e4       	ldi	r26, 0x4F	; 79
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	ef e4       	ldi	r30, 0x4F	; 79
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	84 60       	ori	r24, 0x04	; 4
    1b74:	8c 93       	st	X, r24
    1b76:	8c 91       	ld	r24, X
    1b78:	f9 01       	movw	r30, r18
    1b7a:	80 83       	st	Z, r24

						/*
						 * Configure Compare match value for Timer1 to start count from it
						 * 0XFFFF so that value doesn't exceed 16_bits
						 */
						OCR1A = ((Config_Ptr->Compare_Value)) & 0XFFFF;
    1b7c:	aa e4       	ldi	r26, 0x4A	; 74
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	e9 81       	ldd	r30, Y+1	; 0x01
    1b82:	fa 81       	ldd	r31, Y+2	; 0x02
    1b84:	84 81       	ldd	r24, Z+4	; 0x04
    1b86:	88 2f       	mov	r24, r24
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	11 96       	adiw	r26, 0x01	; 1
    1b8c:	9c 93       	st	X, r25
    1b8e:	8e 93       	st	-X, r24

						/*
						 * Enable Timer1 compare match interrupt
						 */
						TIMSK= SET_BIT(TIMSK,OCIE1A);
    1b90:	29 e5       	ldi	r18, 0x59	; 89
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	a9 e5       	ldi	r26, 0x59	; 89
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	e9 e5       	ldi	r30, 0x59	; 89
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	80 61       	ori	r24, 0x10	; 16
    1ba0:	8c 93       	st	X, r24
    1ba2:	8c 91       	ld	r24, X
    1ba4:	f9 01       	movw	r30, r18
    1ba6:	80 83       	st	Z, r24
    1ba8:	a8 c0       	rjmp	.+336    	; 0x1cfa <Timer_init+0x42c>

						break;
					}

	}
	else if (Config_Ptr->timer_ID == Timer2)
    1baa:	e9 81       	ldd	r30, Y+1	; 0x01
    1bac:	fa 81       	ldd	r31, Y+2	; 0x02
    1bae:	80 81       	ld	r24, Z
    1bb0:	82 30       	cpi	r24, 0x02	; 2
    1bb2:	09 f0       	breq	.+2      	; 0x1bb6 <Timer_init+0x2e8>
    1bb4:	a2 c0       	rjmp	.+324    	; 0x1cfa <Timer_init+0x42c>
	{


		TCNT2 = ( (Config_Ptr->initial_Value) ) & 0XFF;
    1bb6:	a4 e4       	ldi	r26, 0x44	; 68
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	e9 81       	ldd	r30, Y+1	; 0x01
    1bbc:	fa 81       	ldd	r31, Y+2	; 0x02
    1bbe:	83 81       	ldd	r24, Z+3	; 0x03
    1bc0:	8c 93       	st	X, r24
		TCCR2 = (TCCR2  & 0XF8) | (Config_Ptr->Prescaler);
    1bc2:	a5 e4       	ldi	r26, 0x45	; 69
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	e5 e4       	ldi	r30, 0x45	; 69
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	98 2f       	mov	r25, r24
    1bce:	98 7f       	andi	r25, 0xF8	; 248
    1bd0:	e9 81       	ldd	r30, Y+1	; 0x01
    1bd2:	fa 81       	ldd	r31, Y+2	; 0x02
    1bd4:	82 81       	ldd	r24, Z+2	; 0x02
    1bd6:	89 2b       	or	r24, r25
    1bd8:	8c 93       	st	X, r24
		TCCR2  = CLEAR_BIT(TCCR2, COM20);
    1bda:	25 e4       	ldi	r18, 0x45	; 69
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	a5 e4       	ldi	r26, 0x45	; 69
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	e5 e4       	ldi	r30, 0x45	; 69
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	8f 7e       	andi	r24, 0xEF	; 239
    1bea:	8c 93       	st	X, r24
    1bec:	8c 91       	ld	r24, X
    1bee:	f9 01       	movw	r30, r18
    1bf0:	80 83       	st	Z, r24
		TCCR2  = CLEAR_BIT(TCCR2, COM21);
    1bf2:	25 e4       	ldi	r18, 0x45	; 69
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	a5 e4       	ldi	r26, 0x45	; 69
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	e5 e4       	ldi	r30, 0x45	; 69
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	8f 7d       	andi	r24, 0xDF	; 223
    1c02:	8c 93       	st	X, r24
    1c04:	8c 91       	ld	r24, X
    1c06:	f9 01       	movw	r30, r18
    1c08:	80 83       	st	Z, r24

		switch(Config_Ptr->mode)
    1c0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c0e:	81 81       	ldd	r24, Z+1	; 0x01
    1c10:	28 2f       	mov	r18, r24
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	3c 83       	std	Y+4, r19	; 0x04
    1c16:	2b 83       	std	Y+3, r18	; 0x03
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	31 f0       	breq	.+12     	; 0x1c2c <Timer_init+0x35e>
    1c20:	eb 81       	ldd	r30, Y+3	; 0x03
    1c22:	fc 81       	ldd	r31, Y+4	; 0x04
    1c24:	e2 30       	cpi	r30, 0x02	; 2
    1c26:	f1 05       	cpc	r31, r1
    1c28:	91 f1       	breq	.+100    	; 0x1c8e <Timer_init+0x3c0>
    1c2a:	67 c0       	rjmp	.+206    	; 0x1cfa <Timer_init+0x42c>
			/*
			 * Normal Overflow mode:
			 *                      Clear WGM00 bit in TCCR0 register
			 *                      Clear WGM01 bit in TCCR0 register
			 */
			TCCR2  = CLEAR_BIT(TCCR2 , WGM20);
    1c2c:	25 e4       	ldi	r18, 0x45	; 69
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	a5 e4       	ldi	r26, 0x45	; 69
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	e5 e4       	ldi	r30, 0x45	; 69
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	8f 7b       	andi	r24, 0xBF	; 191
    1c3c:	8c 93       	st	X, r24
    1c3e:	8c 91       	ld	r24, X
    1c40:	f9 01       	movw	r30, r18
    1c42:	80 83       	st	Z, r24
			TCCR2  = CLEAR_BIT(TCCR2 , WGM21);
    1c44:	25 e4       	ldi	r18, 0x45	; 69
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	a5 e4       	ldi	r26, 0x45	; 69
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	e5 e4       	ldi	r30, 0x45	; 69
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	87 7f       	andi	r24, 0xF7	; 247
    1c54:	8c 93       	st	X, r24
    1c56:	8c 91       	ld	r24, X
    1c58:	f9 01       	movw	r30, r18
    1c5a:	80 83       	st	Z, r24

			/*
			 * Make FOC2 to be Active as it is overflow mode
			 */
			TCCR2 =  SET_BIT(TCCR2 ,FOC2);
    1c5c:	25 e4       	ldi	r18, 0x45	; 69
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	a5 e4       	ldi	r26, 0x45	; 69
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	e5 e4       	ldi	r30, 0x45	; 69
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	80 68       	ori	r24, 0x80	; 128
    1c6c:	8c 93       	st	X, r24
    1c6e:	8c 91       	ld	r24, X
    1c70:	f9 01       	movw	r30, r18
    1c72:	80 83       	st	Z, r24


			/*
			 * Enable Timer2 overflow interrupt
			 */
			TIMSK = SET_BIT(TIMSK,TOIE2);
    1c74:	29 e5       	ldi	r18, 0x59	; 89
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	a9 e5       	ldi	r26, 0x59	; 89
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	e9 e5       	ldi	r30, 0x59	; 89
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	80 64       	ori	r24, 0x40	; 64
    1c84:	8c 93       	st	X, r24
    1c86:	8c 91       	ld	r24, X
    1c88:	f9 01       	movw	r30, r18
    1c8a:	80 83       	st	Z, r24
    1c8c:	36 c0       	rjmp	.+108    	; 0x1cfa <Timer_init+0x42c>
			/*
			 *  Compare mode:
			 *               Clear WGM20 bit in TCCR2 register
			 *               Clear WGM21 bit in TCCR2 register
			 */
			TCCR2  = CLEAR_BIT(TCCR2 , WGM20);
    1c8e:	25 e4       	ldi	r18, 0x45	; 69
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	a5 e4       	ldi	r26, 0x45	; 69
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	e5 e4       	ldi	r30, 0x45	; 69
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	8f 7b       	andi	r24, 0xBF	; 191
    1c9e:	8c 93       	st	X, r24
    1ca0:	8c 91       	ld	r24, X
    1ca2:	f9 01       	movw	r30, r18
    1ca4:	80 83       	st	Z, r24
			TCCR2  = SET_BIT(TCCR2 , WGM21);
    1ca6:	25 e4       	ldi	r18, 0x45	; 69
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	a5 e4       	ldi	r26, 0x45	; 69
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	e5 e4       	ldi	r30, 0x45	; 69
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	88 60       	ori	r24, 0x08	; 8
    1cb6:	8c 93       	st	X, r24
    1cb8:	8c 91       	ld	r24, X
    1cba:	f9 01       	movw	r30, r18
    1cbc:	80 83       	st	Z, r24

			/*
			 *  Make FOC2 to be Active as it is compare mode
			 */
			TCCR2 =  SET_BIT(TCCR2 , FOC2);
    1cbe:	25 e4       	ldi	r18, 0x45	; 69
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	a5 e4       	ldi	r26, 0x45	; 69
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	e5 e4       	ldi	r30, 0x45	; 69
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	80 68       	ori	r24, 0x80	; 128
    1cce:	8c 93       	st	X, r24
    1cd0:	8c 91       	ld	r24, X
    1cd2:	f9 01       	movw	r30, r18
    1cd4:	80 83       	st	Z, r24
			/*
			 * Configure compare match value for Timer2 to start count from it
			 * 0XFF so that value doesn't exceed 8_bits
			 */

			OCR2 = ((Config_Ptr->Compare_Value)) & 0XFF;
    1cd6:	a3 e4       	ldi	r26, 0x43	; 67
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	e9 81       	ldd	r30, Y+1	; 0x01
    1cdc:	fa 81       	ldd	r31, Y+2	; 0x02
    1cde:	84 81       	ldd	r24, Z+4	; 0x04
    1ce0:	8c 93       	st	X, r24

			/*
			 * Enable Timer2 compare match interrupt
			 */
			TIMSK = SET_BIT(TIMSK, OCIE2);
    1ce2:	29 e5       	ldi	r18, 0x59	; 89
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	a9 e5       	ldi	r26, 0x59	; 89
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	e9 e5       	ldi	r30, 0x59	; 89
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	80 68       	ori	r24, 0x80	; 128
    1cf2:	8c 93       	st	X, r24
    1cf4:	8c 91       	ld	r24, X
    1cf6:	f9 01       	movw	r30, r18
    1cf8:	80 83       	st	Z, r24

			break;
		}
}

}
    1cfa:	2c 96       	adiw	r28, 0x0c	; 12
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	f8 94       	cli
    1d00:	de bf       	out	0x3e, r29	; 62
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	cd bf       	out	0x3d, r28	; 61
    1d06:	cf 91       	pop	r28
    1d08:	df 91       	pop	r29
    1d0a:	08 95       	ret

00001d0c <Timer_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
*/
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID timer_type )
{
    1d0c:	df 93       	push	r29
    1d0e:	cf 93       	push	r28
    1d10:	00 d0       	rcall	.+0      	; 0x1d12 <Timer_setCallBack+0x6>
    1d12:	00 d0       	rcall	.+0      	; 0x1d14 <Timer_setCallBack+0x8>
    1d14:	0f 92       	push	r0
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
    1d1a:	9a 83       	std	Y+2, r25	; 0x02
    1d1c:	89 83       	std	Y+1, r24	; 0x01
    1d1e:	6b 83       	std	Y+3, r22	; 0x03

	switch(timer_type)
    1d20:	8b 81       	ldd	r24, Y+3	; 0x03
    1d22:	28 2f       	mov	r18, r24
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	3d 83       	std	Y+5, r19	; 0x05
    1d28:	2c 83       	std	Y+4, r18	; 0x04
    1d2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d2e:	81 30       	cpi	r24, 0x01	; 1
    1d30:	91 05       	cpc	r25, r1
    1d32:	81 f0       	breq	.+32     	; 0x1d54 <Timer_setCallBack+0x48>
    1d34:	2c 81       	ldd	r18, Y+4	; 0x04
    1d36:	3d 81       	ldd	r19, Y+5	; 0x05
    1d38:	22 30       	cpi	r18, 0x02	; 2
    1d3a:	31 05       	cpc	r19, r1
    1d3c:	91 f0       	breq	.+36     	; 0x1d62 <Timer_setCallBack+0x56>
    1d3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d40:	9d 81       	ldd	r25, Y+5	; 0x05
    1d42:	00 97       	sbiw	r24, 0x00	; 0
    1d44:	a1 f4       	brne	.+40     	; 0x1d6e <Timer_setCallBack+0x62>
	{
	case Timer0:
		/* Save the address of the Call back function in a global variable */
		g_Timer0CallBackPtr = a_ptr;
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4a:	90 93 48 01 	sts	0x0148, r25
    1d4e:	80 93 47 01 	sts	0x0147, r24
    1d52:	0d c0       	rjmp	.+26     	; 0x1d6e <Timer_setCallBack+0x62>
		break;

	case Timer1:
		/* Save the address of the Call back function in a global variable */
		g_Timer1CallBackPtr = a_ptr;
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	9a 81       	ldd	r25, Y+2	; 0x02
    1d58:	90 93 4a 01 	sts	0x014A, r25
    1d5c:	80 93 49 01 	sts	0x0149, r24
    1d60:	06 c0       	rjmp	.+12     	; 0x1d6e <Timer_setCallBack+0x62>
		break;

	case Timer2:
		/* Save the address of the Call back function in a global variable */
		g_Timer2CallBackPtr = a_ptr;
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
    1d64:	9a 81       	ldd	r25, Y+2	; 0x02
    1d66:	90 93 4c 01 	sts	0x014C, r25
    1d6a:	80 93 4b 01 	sts	0x014B, r24
		break;
	}

}
    1d6e:	0f 90       	pop	r0
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	cf 91       	pop	r28
    1d7a:	df 91       	pop	r29
    1d7c:	08 95       	ret

00001d7e <Timer_deinit>:
/*
 * Description: Function to disable the Timer
 */

void Timer_deinit(Timer_ID timer_type)
{
    1d7e:	df 93       	push	r29
    1d80:	cf 93       	push	r28
    1d82:	00 d0       	rcall	.+0      	; 0x1d84 <Timer_deinit+0x6>
    1d84:	0f 92       	push	r0
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    1d8a:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type)
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
    1d8e:	28 2f       	mov	r18, r24
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	3b 83       	std	Y+3, r19	; 0x03
    1d94:	2a 83       	std	Y+2, r18	; 0x02
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	9b 81       	ldd	r25, Y+3	; 0x03
    1d9a:	81 30       	cpi	r24, 0x01	; 1
    1d9c:	91 05       	cpc	r25, r1
    1d9e:	11 f1       	breq	.+68     	; 0x1de4 <Timer_deinit+0x66>
    1da0:	2a 81       	ldd	r18, Y+2	; 0x02
    1da2:	3b 81       	ldd	r19, Y+3	; 0x03
    1da4:	22 30       	cpi	r18, 0x02	; 2
    1da6:	31 05       	cpc	r19, r1
    1da8:	d1 f1       	breq	.+116    	; 0x1e1e <Timer_deinit+0xa0>
    1daa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dac:	9b 81       	ldd	r25, Y+3	; 0x03
    1dae:	00 97       	sbiw	r24, 0x00	; 0
    1db0:	09 f0       	breq	.+2      	; 0x1db4 <Timer_deinit+0x36>
    1db2:	4c c0       	rjmp	.+152    	; 0x1e4c <Timer_deinit+0xce>
	{
	case Timer0:
		TCCR0 = 0;
    1db4:	e3 e5       	ldi	r30, 0x53	; 83
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	10 82       	st	Z, r1
				TCNT0= 0; /* clear initial value */
    1dba:	e2 e5       	ldi	r30, 0x52	; 82
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	10 82       	st	Z, r1
				OCR0 = 0; /* clear compare value for CTC mode*/
    1dc0:	ec e5       	ldi	r30, 0x5C	; 92
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	10 82       	st	Z, r1
				CLEAR_BIT(TIMSK,OCIE0); /* disable interrupts for CTC mode */
    1dc6:	a9 e5       	ldi	r26, 0x59	; 89
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e9 e5       	ldi	r30, 0x59	; 89
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	8d 7f       	andi	r24, 0xFD	; 253
    1dd2:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK,TOIE0); /* disable interrupts for overflow mode */
    1dd4:	a9 e5       	ldi	r26, 0x59	; 89
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	e9 e5       	ldi	r30, 0x59	; 89
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	8e 7f       	andi	r24, 0xFE	; 254
    1de0:	8c 93       	st	X, r24
    1de2:	34 c0       	rjmp	.+104    	; 0x1e4c <Timer_deinit+0xce>
		break;

	case Timer1:

		TCCR1A =0;
    1de4:	ef e4       	ldi	r30, 0x4F	; 79
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	10 82       	st	Z, r1
				TCCR1B = 0; /* disable clock */
    1dea:	ee e4       	ldi	r30, 0x4E	; 78
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	10 82       	st	Z, r1
				TCNT1 = 0;
    1df0:	ec e4       	ldi	r30, 0x4C	; 76
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	11 82       	std	Z+1, r1	; 0x01
    1df6:	10 82       	st	Z, r1
				CLEAR_BIT(TIMSK, TOIE1); /* disable interrupts for overflow mode */
    1df8:	a9 e5       	ldi	r26, 0x59	; 89
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e9 e5       	ldi	r30, 0x59	; 89
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	8b 7f       	andi	r24, 0xFB	; 251
    1e04:	8c 93       	st	X, r24
				OCR1A = 0;  /* clear compare value for CTC mode */
    1e06:	ea e4       	ldi	r30, 0x4A	; 74
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	11 82       	std	Z+1, r1	; 0x01
    1e0c:	10 82       	st	Z, r1
				CLEAR_BIT(TIMSK, OCIE1A); /* disable interrupts for CTC mode */
    1e0e:	a9 e5       	ldi	r26, 0x59	; 89
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	e9 e5       	ldi	r30, 0x59	; 89
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	8f 7e       	andi	r24, 0xEF	; 239
    1e1a:	8c 93       	st	X, r24
    1e1c:	17 c0       	rjmp	.+46     	; 0x1e4c <Timer_deinit+0xce>
		break;


	case Timer2:

		TCCR2 = 0;
    1e1e:	e5 e4       	ldi	r30, 0x45	; 69
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	10 82       	st	Z, r1
				TCNT2 = 0; /* clear initial value */
    1e24:	e4 e4       	ldi	r30, 0x44	; 68
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	10 82       	st	Z, r1
				OCR2 = 0; /* clear compare value for CTC mode*/
    1e2a:	e3 e4       	ldi	r30, 0x43	; 67
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	10 82       	st	Z, r1
				CLEAR_BIT(TIMSK, OCIE2); /* disable interrupts for CTC mode */
    1e30:	a9 e5       	ldi	r26, 0x59	; 89
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	e9 e5       	ldi	r30, 0x59	; 89
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	8f 77       	andi	r24, 0x7F	; 127
    1e3c:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, TOIE2); /* disable interrupts for overflow mode */
    1e3e:	a9 e5       	ldi	r26, 0x59	; 89
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	e9 e5       	ldi	r30, 0x59	; 89
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	8f 7b       	andi	r24, 0xBF	; 191
    1e4a:	8c 93       	st	X, r24
		break;

	}
}
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	08 95       	ret

00001e58 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	00 d0       	rcall	.+0      	; 0x1e5e <GPIO_setupPinDirection+0x6>
    1e5e:	00 d0       	rcall	.+0      	; 0x1e60 <GPIO_setupPinDirection+0x8>
    1e60:	0f 92       	push	r0
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
    1e66:	89 83       	std	Y+1, r24	; 0x01
    1e68:	6a 83       	std	Y+2, r22	; 0x02
    1e6a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6e:	88 30       	cpi	r24, 0x08	; 8
    1e70:	08 f0       	brcs	.+2      	; 0x1e74 <GPIO_setupPinDirection+0x1c>
    1e72:	d5 c0       	rjmp	.+426    	; 0x201e <GPIO_setupPinDirection+0x1c6>
    1e74:	89 81       	ldd	r24, Y+1	; 0x01
    1e76:	84 30       	cpi	r24, 0x04	; 4
    1e78:	08 f0       	brcs	.+2      	; 0x1e7c <GPIO_setupPinDirection+0x24>
    1e7a:	d1 c0       	rjmp	.+418    	; 0x201e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	28 2f       	mov	r18, r24
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	3d 83       	std	Y+5, r19	; 0x05
    1e84:	2c 83       	std	Y+4, r18	; 0x04
    1e86:	8c 81       	ldd	r24, Y+4	; 0x04
    1e88:	9d 81       	ldd	r25, Y+5	; 0x05
    1e8a:	81 30       	cpi	r24, 0x01	; 1
    1e8c:	91 05       	cpc	r25, r1
    1e8e:	09 f4       	brne	.+2      	; 0x1e92 <GPIO_setupPinDirection+0x3a>
    1e90:	43 c0       	rjmp	.+134    	; 0x1f18 <GPIO_setupPinDirection+0xc0>
    1e92:	2c 81       	ldd	r18, Y+4	; 0x04
    1e94:	3d 81       	ldd	r19, Y+5	; 0x05
    1e96:	22 30       	cpi	r18, 0x02	; 2
    1e98:	31 05       	cpc	r19, r1
    1e9a:	2c f4       	brge	.+10     	; 0x1ea6 <GPIO_setupPinDirection+0x4e>
    1e9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea0:	00 97       	sbiw	r24, 0x00	; 0
    1ea2:	71 f0       	breq	.+28     	; 0x1ec0 <GPIO_setupPinDirection+0x68>
    1ea4:	bc c0       	rjmp	.+376    	; 0x201e <GPIO_setupPinDirection+0x1c6>
    1ea6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ea8:	3d 81       	ldd	r19, Y+5	; 0x05
    1eaa:	22 30       	cpi	r18, 0x02	; 2
    1eac:	31 05       	cpc	r19, r1
    1eae:	09 f4       	brne	.+2      	; 0x1eb2 <GPIO_setupPinDirection+0x5a>
    1eb0:	5f c0       	rjmp	.+190    	; 0x1f70 <GPIO_setupPinDirection+0x118>
    1eb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb6:	83 30       	cpi	r24, 0x03	; 3
    1eb8:	91 05       	cpc	r25, r1
    1eba:	09 f4       	brne	.+2      	; 0x1ebe <GPIO_setupPinDirection+0x66>
    1ebc:	85 c0       	rjmp	.+266    	; 0x1fc8 <GPIO_setupPinDirection+0x170>
    1ebe:	af c0       	rjmp	.+350    	; 0x201e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec2:	81 30       	cpi	r24, 0x01	; 1
    1ec4:	a1 f4       	brne	.+40     	; 0x1eee <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1ec6:	aa e3       	ldi	r26, 0x3A	; 58
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	ea e3       	ldi	r30, 0x3A	; 58
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	48 2f       	mov	r20, r24
    1ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed4:	28 2f       	mov	r18, r24
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	02 2e       	mov	r0, r18
    1ede:	02 c0       	rjmp	.+4      	; 0x1ee4 <GPIO_setupPinDirection+0x8c>
    1ee0:	88 0f       	add	r24, r24
    1ee2:	99 1f       	adc	r25, r25
    1ee4:	0a 94       	dec	r0
    1ee6:	e2 f7       	brpl	.-8      	; 0x1ee0 <GPIO_setupPinDirection+0x88>
    1ee8:	84 2b       	or	r24, r20
    1eea:	8c 93       	st	X, r24
    1eec:	98 c0       	rjmp	.+304    	; 0x201e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1eee:	aa e3       	ldi	r26, 0x3A	; 58
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	ea e3       	ldi	r30, 0x3A	; 58
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	48 2f       	mov	r20, r24
    1efa:	8a 81       	ldd	r24, Y+2	; 0x02
    1efc:	28 2f       	mov	r18, r24
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	02 2e       	mov	r0, r18
    1f06:	02 c0       	rjmp	.+4      	; 0x1f0c <GPIO_setupPinDirection+0xb4>
    1f08:	88 0f       	add	r24, r24
    1f0a:	99 1f       	adc	r25, r25
    1f0c:	0a 94       	dec	r0
    1f0e:	e2 f7       	brpl	.-8      	; 0x1f08 <GPIO_setupPinDirection+0xb0>
    1f10:	80 95       	com	r24
    1f12:	84 23       	and	r24, r20
    1f14:	8c 93       	st	X, r24
    1f16:	83 c0       	rjmp	.+262    	; 0x201e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	81 30       	cpi	r24, 0x01	; 1
    1f1c:	a1 f4       	brne	.+40     	; 0x1f46 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1f1e:	a7 e3       	ldi	r26, 0x37	; 55
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	e7 e3       	ldi	r30, 0x37	; 55
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	80 81       	ld	r24, Z
    1f28:	48 2f       	mov	r20, r24
    1f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2c:	28 2f       	mov	r18, r24
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	02 2e       	mov	r0, r18
    1f36:	02 c0       	rjmp	.+4      	; 0x1f3c <GPIO_setupPinDirection+0xe4>
    1f38:	88 0f       	add	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	0a 94       	dec	r0
    1f3e:	e2 f7       	brpl	.-8      	; 0x1f38 <GPIO_setupPinDirection+0xe0>
    1f40:	84 2b       	or	r24, r20
    1f42:	8c 93       	st	X, r24
    1f44:	6c c0       	rjmp	.+216    	; 0x201e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1f46:	a7 e3       	ldi	r26, 0x37	; 55
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	e7 e3       	ldi	r30, 0x37	; 55
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	48 2f       	mov	r20, r24
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	28 2f       	mov	r18, r24
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	02 2e       	mov	r0, r18
    1f5e:	02 c0       	rjmp	.+4      	; 0x1f64 <GPIO_setupPinDirection+0x10c>
    1f60:	88 0f       	add	r24, r24
    1f62:	99 1f       	adc	r25, r25
    1f64:	0a 94       	dec	r0
    1f66:	e2 f7       	brpl	.-8      	; 0x1f60 <GPIO_setupPinDirection+0x108>
    1f68:	80 95       	com	r24
    1f6a:	84 23       	and	r24, r20
    1f6c:	8c 93       	st	X, r24
    1f6e:	57 c0       	rjmp	.+174    	; 0x201e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	81 30       	cpi	r24, 0x01	; 1
    1f74:	a1 f4       	brne	.+40     	; 0x1f9e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1f76:	a4 e3       	ldi	r26, 0x34	; 52
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	e4 e3       	ldi	r30, 0x34	; 52
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	48 2f       	mov	r20, r24
    1f82:	8a 81       	ldd	r24, Y+2	; 0x02
    1f84:	28 2f       	mov	r18, r24
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	02 2e       	mov	r0, r18
    1f8e:	02 c0       	rjmp	.+4      	; 0x1f94 <GPIO_setupPinDirection+0x13c>
    1f90:	88 0f       	add	r24, r24
    1f92:	99 1f       	adc	r25, r25
    1f94:	0a 94       	dec	r0
    1f96:	e2 f7       	brpl	.-8      	; 0x1f90 <GPIO_setupPinDirection+0x138>
    1f98:	84 2b       	or	r24, r20
    1f9a:	8c 93       	st	X, r24
    1f9c:	40 c0       	rjmp	.+128    	; 0x201e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1f9e:	a4 e3       	ldi	r26, 0x34	; 52
    1fa0:	b0 e0       	ldi	r27, 0x00	; 0
    1fa2:	e4 e3       	ldi	r30, 0x34	; 52
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	48 2f       	mov	r20, r24
    1faa:	8a 81       	ldd	r24, Y+2	; 0x02
    1fac:	28 2f       	mov	r18, r24
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	02 2e       	mov	r0, r18
    1fb6:	02 c0       	rjmp	.+4      	; 0x1fbc <GPIO_setupPinDirection+0x164>
    1fb8:	88 0f       	add	r24, r24
    1fba:	99 1f       	adc	r25, r25
    1fbc:	0a 94       	dec	r0
    1fbe:	e2 f7       	brpl	.-8      	; 0x1fb8 <GPIO_setupPinDirection+0x160>
    1fc0:	80 95       	com	r24
    1fc2:	84 23       	and	r24, r20
    1fc4:	8c 93       	st	X, r24
    1fc6:	2b c0       	rjmp	.+86     	; 0x201e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fca:	81 30       	cpi	r24, 0x01	; 1
    1fcc:	a1 f4       	brne	.+40     	; 0x1ff6 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1fce:	a1 e3       	ldi	r26, 0x31	; 49
    1fd0:	b0 e0       	ldi	r27, 0x00	; 0
    1fd2:	e1 e3       	ldi	r30, 0x31	; 49
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	80 81       	ld	r24, Z
    1fd8:	48 2f       	mov	r20, r24
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	28 2f       	mov	r18, r24
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	02 2e       	mov	r0, r18
    1fe6:	02 c0       	rjmp	.+4      	; 0x1fec <GPIO_setupPinDirection+0x194>
    1fe8:	88 0f       	add	r24, r24
    1fea:	99 1f       	adc	r25, r25
    1fec:	0a 94       	dec	r0
    1fee:	e2 f7       	brpl	.-8      	; 0x1fe8 <GPIO_setupPinDirection+0x190>
    1ff0:	84 2b       	or	r24, r20
    1ff2:	8c 93       	st	X, r24
    1ff4:	14 c0       	rjmp	.+40     	; 0x201e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1ff6:	a1 e3       	ldi	r26, 0x31	; 49
    1ff8:	b0 e0       	ldi	r27, 0x00	; 0
    1ffa:	e1 e3       	ldi	r30, 0x31	; 49
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	80 81       	ld	r24, Z
    2000:	48 2f       	mov	r20, r24
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	28 2f       	mov	r18, r24
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	02 2e       	mov	r0, r18
    200e:	02 c0       	rjmp	.+4      	; 0x2014 <GPIO_setupPinDirection+0x1bc>
    2010:	88 0f       	add	r24, r24
    2012:	99 1f       	adc	r25, r25
    2014:	0a 94       	dec	r0
    2016:	e2 f7       	brpl	.-8      	; 0x2010 <GPIO_setupPinDirection+0x1b8>
    2018:	80 95       	com	r24
    201a:	84 23       	and	r24, r20
    201c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    201e:	0f 90       	pop	r0
    2020:	0f 90       	pop	r0
    2022:	0f 90       	pop	r0
    2024:	0f 90       	pop	r0
    2026:	0f 90       	pop	r0
    2028:	cf 91       	pop	r28
    202a:	df 91       	pop	r29
    202c:	08 95       	ret

0000202e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    202e:	df 93       	push	r29
    2030:	cf 93       	push	r28
    2032:	00 d0       	rcall	.+0      	; 0x2034 <GPIO_writePin+0x6>
    2034:	00 d0       	rcall	.+0      	; 0x2036 <GPIO_writePin+0x8>
    2036:	0f 92       	push	r0
    2038:	cd b7       	in	r28, 0x3d	; 61
    203a:	de b7       	in	r29, 0x3e	; 62
    203c:	89 83       	std	Y+1, r24	; 0x01
    203e:	6a 83       	std	Y+2, r22	; 0x02
    2040:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2042:	8a 81       	ldd	r24, Y+2	; 0x02
    2044:	88 30       	cpi	r24, 0x08	; 8
    2046:	08 f0       	brcs	.+2      	; 0x204a <GPIO_writePin+0x1c>
    2048:	d5 c0       	rjmp	.+426    	; 0x21f4 <GPIO_writePin+0x1c6>
    204a:	89 81       	ldd	r24, Y+1	; 0x01
    204c:	84 30       	cpi	r24, 0x04	; 4
    204e:	08 f0       	brcs	.+2      	; 0x2052 <GPIO_writePin+0x24>
    2050:	d1 c0       	rjmp	.+418    	; 0x21f4 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	28 2f       	mov	r18, r24
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	3d 83       	std	Y+5, r19	; 0x05
    205a:	2c 83       	std	Y+4, r18	; 0x04
    205c:	8c 81       	ldd	r24, Y+4	; 0x04
    205e:	9d 81       	ldd	r25, Y+5	; 0x05
    2060:	81 30       	cpi	r24, 0x01	; 1
    2062:	91 05       	cpc	r25, r1
    2064:	09 f4       	brne	.+2      	; 0x2068 <GPIO_writePin+0x3a>
    2066:	43 c0       	rjmp	.+134    	; 0x20ee <GPIO_writePin+0xc0>
    2068:	2c 81       	ldd	r18, Y+4	; 0x04
    206a:	3d 81       	ldd	r19, Y+5	; 0x05
    206c:	22 30       	cpi	r18, 0x02	; 2
    206e:	31 05       	cpc	r19, r1
    2070:	2c f4       	brge	.+10     	; 0x207c <GPIO_writePin+0x4e>
    2072:	8c 81       	ldd	r24, Y+4	; 0x04
    2074:	9d 81       	ldd	r25, Y+5	; 0x05
    2076:	00 97       	sbiw	r24, 0x00	; 0
    2078:	71 f0       	breq	.+28     	; 0x2096 <GPIO_writePin+0x68>
    207a:	bc c0       	rjmp	.+376    	; 0x21f4 <GPIO_writePin+0x1c6>
    207c:	2c 81       	ldd	r18, Y+4	; 0x04
    207e:	3d 81       	ldd	r19, Y+5	; 0x05
    2080:	22 30       	cpi	r18, 0x02	; 2
    2082:	31 05       	cpc	r19, r1
    2084:	09 f4       	brne	.+2      	; 0x2088 <GPIO_writePin+0x5a>
    2086:	5f c0       	rjmp	.+190    	; 0x2146 <GPIO_writePin+0x118>
    2088:	8c 81       	ldd	r24, Y+4	; 0x04
    208a:	9d 81       	ldd	r25, Y+5	; 0x05
    208c:	83 30       	cpi	r24, 0x03	; 3
    208e:	91 05       	cpc	r25, r1
    2090:	09 f4       	brne	.+2      	; 0x2094 <GPIO_writePin+0x66>
    2092:	85 c0       	rjmp	.+266    	; 0x219e <GPIO_writePin+0x170>
    2094:	af c0       	rjmp	.+350    	; 0x21f4 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2096:	8b 81       	ldd	r24, Y+3	; 0x03
    2098:	81 30       	cpi	r24, 0x01	; 1
    209a:	a1 f4       	brne	.+40     	; 0x20c4 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    209c:	ab e3       	ldi	r26, 0x3B	; 59
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	eb e3       	ldi	r30, 0x3B	; 59
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	48 2f       	mov	r20, r24
    20a8:	8a 81       	ldd	r24, Y+2	; 0x02
    20aa:	28 2f       	mov	r18, r24
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	02 2e       	mov	r0, r18
    20b4:	02 c0       	rjmp	.+4      	; 0x20ba <GPIO_writePin+0x8c>
    20b6:	88 0f       	add	r24, r24
    20b8:	99 1f       	adc	r25, r25
    20ba:	0a 94       	dec	r0
    20bc:	e2 f7       	brpl	.-8      	; 0x20b6 <GPIO_writePin+0x88>
    20be:	84 2b       	or	r24, r20
    20c0:	8c 93       	st	X, r24
    20c2:	98 c0       	rjmp	.+304    	; 0x21f4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    20c4:	ab e3       	ldi	r26, 0x3B	; 59
    20c6:	b0 e0       	ldi	r27, 0x00	; 0
    20c8:	eb e3       	ldi	r30, 0x3B	; 59
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	48 2f       	mov	r20, r24
    20d0:	8a 81       	ldd	r24, Y+2	; 0x02
    20d2:	28 2f       	mov	r18, r24
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	02 2e       	mov	r0, r18
    20dc:	02 c0       	rjmp	.+4      	; 0x20e2 <GPIO_writePin+0xb4>
    20de:	88 0f       	add	r24, r24
    20e0:	99 1f       	adc	r25, r25
    20e2:	0a 94       	dec	r0
    20e4:	e2 f7       	brpl	.-8      	; 0x20de <GPIO_writePin+0xb0>
    20e6:	80 95       	com	r24
    20e8:	84 23       	and	r24, r20
    20ea:	8c 93       	st	X, r24
    20ec:	83 c0       	rjmp	.+262    	; 0x21f4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	81 30       	cpi	r24, 0x01	; 1
    20f2:	a1 f4       	brne	.+40     	; 0x211c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    20f4:	a8 e3       	ldi	r26, 0x38	; 56
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	e8 e3       	ldi	r30, 0x38	; 56
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	80 81       	ld	r24, Z
    20fe:	48 2f       	mov	r20, r24
    2100:	8a 81       	ldd	r24, Y+2	; 0x02
    2102:	28 2f       	mov	r18, r24
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	02 2e       	mov	r0, r18
    210c:	02 c0       	rjmp	.+4      	; 0x2112 <GPIO_writePin+0xe4>
    210e:	88 0f       	add	r24, r24
    2110:	99 1f       	adc	r25, r25
    2112:	0a 94       	dec	r0
    2114:	e2 f7       	brpl	.-8      	; 0x210e <GPIO_writePin+0xe0>
    2116:	84 2b       	or	r24, r20
    2118:	8c 93       	st	X, r24
    211a:	6c c0       	rjmp	.+216    	; 0x21f4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    211c:	a8 e3       	ldi	r26, 0x38	; 56
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	e8 e3       	ldi	r30, 0x38	; 56
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	48 2f       	mov	r20, r24
    2128:	8a 81       	ldd	r24, Y+2	; 0x02
    212a:	28 2f       	mov	r18, r24
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	02 2e       	mov	r0, r18
    2134:	02 c0       	rjmp	.+4      	; 0x213a <GPIO_writePin+0x10c>
    2136:	88 0f       	add	r24, r24
    2138:	99 1f       	adc	r25, r25
    213a:	0a 94       	dec	r0
    213c:	e2 f7       	brpl	.-8      	; 0x2136 <GPIO_writePin+0x108>
    213e:	80 95       	com	r24
    2140:	84 23       	and	r24, r20
    2142:	8c 93       	st	X, r24
    2144:	57 c0       	rjmp	.+174    	; 0x21f4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	81 30       	cpi	r24, 0x01	; 1
    214a:	a1 f4       	brne	.+40     	; 0x2174 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    214c:	a5 e3       	ldi	r26, 0x35	; 53
    214e:	b0 e0       	ldi	r27, 0x00	; 0
    2150:	e5 e3       	ldi	r30, 0x35	; 53
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	80 81       	ld	r24, Z
    2156:	48 2f       	mov	r20, r24
    2158:	8a 81       	ldd	r24, Y+2	; 0x02
    215a:	28 2f       	mov	r18, r24
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	02 2e       	mov	r0, r18
    2164:	02 c0       	rjmp	.+4      	; 0x216a <GPIO_writePin+0x13c>
    2166:	88 0f       	add	r24, r24
    2168:	99 1f       	adc	r25, r25
    216a:	0a 94       	dec	r0
    216c:	e2 f7       	brpl	.-8      	; 0x2166 <GPIO_writePin+0x138>
    216e:	84 2b       	or	r24, r20
    2170:	8c 93       	st	X, r24
    2172:	40 c0       	rjmp	.+128    	; 0x21f4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2174:	a5 e3       	ldi	r26, 0x35	; 53
    2176:	b0 e0       	ldi	r27, 0x00	; 0
    2178:	e5 e3       	ldi	r30, 0x35	; 53
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	48 2f       	mov	r20, r24
    2180:	8a 81       	ldd	r24, Y+2	; 0x02
    2182:	28 2f       	mov	r18, r24
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	02 2e       	mov	r0, r18
    218c:	02 c0       	rjmp	.+4      	; 0x2192 <GPIO_writePin+0x164>
    218e:	88 0f       	add	r24, r24
    2190:	99 1f       	adc	r25, r25
    2192:	0a 94       	dec	r0
    2194:	e2 f7       	brpl	.-8      	; 0x218e <GPIO_writePin+0x160>
    2196:	80 95       	com	r24
    2198:	84 23       	and	r24, r20
    219a:	8c 93       	st	X, r24
    219c:	2b c0       	rjmp	.+86     	; 0x21f4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    219e:	8b 81       	ldd	r24, Y+3	; 0x03
    21a0:	81 30       	cpi	r24, 0x01	; 1
    21a2:	a1 f4       	brne	.+40     	; 0x21cc <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    21a4:	a2 e3       	ldi	r26, 0x32	; 50
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	e2 e3       	ldi	r30, 0x32	; 50
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	48 2f       	mov	r20, r24
    21b0:	8a 81       	ldd	r24, Y+2	; 0x02
    21b2:	28 2f       	mov	r18, r24
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	02 2e       	mov	r0, r18
    21bc:	02 c0       	rjmp	.+4      	; 0x21c2 <GPIO_writePin+0x194>
    21be:	88 0f       	add	r24, r24
    21c0:	99 1f       	adc	r25, r25
    21c2:	0a 94       	dec	r0
    21c4:	e2 f7       	brpl	.-8      	; 0x21be <GPIO_writePin+0x190>
    21c6:	84 2b       	or	r24, r20
    21c8:	8c 93       	st	X, r24
    21ca:	14 c0       	rjmp	.+40     	; 0x21f4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    21cc:	a2 e3       	ldi	r26, 0x32	; 50
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	e2 e3       	ldi	r30, 0x32	; 50
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	48 2f       	mov	r20, r24
    21d8:	8a 81       	ldd	r24, Y+2	; 0x02
    21da:	28 2f       	mov	r18, r24
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	02 2e       	mov	r0, r18
    21e4:	02 c0       	rjmp	.+4      	; 0x21ea <GPIO_writePin+0x1bc>
    21e6:	88 0f       	add	r24, r24
    21e8:	99 1f       	adc	r25, r25
    21ea:	0a 94       	dec	r0
    21ec:	e2 f7       	brpl	.-8      	; 0x21e6 <GPIO_writePin+0x1b8>
    21ee:	80 95       	com	r24
    21f0:	84 23       	and	r24, r20
    21f2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	0f 90       	pop	r0
    21fc:	0f 90       	pop	r0
    21fe:	cf 91       	pop	r28
    2200:	df 91       	pop	r29
    2202:	08 95       	ret

00002204 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2204:	df 93       	push	r29
    2206:	cf 93       	push	r28
    2208:	00 d0       	rcall	.+0      	; 0x220a <GPIO_readPin+0x6>
    220a:	00 d0       	rcall	.+0      	; 0x220c <GPIO_readPin+0x8>
    220c:	0f 92       	push	r0
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
    2212:	8a 83       	std	Y+2, r24	; 0x02
    2214:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2216:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2218:	8b 81       	ldd	r24, Y+3	; 0x03
    221a:	88 30       	cpi	r24, 0x08	; 8
    221c:	08 f0       	brcs	.+2      	; 0x2220 <GPIO_readPin+0x1c>
    221e:	84 c0       	rjmp	.+264    	; 0x2328 <GPIO_readPin+0x124>
    2220:	8a 81       	ldd	r24, Y+2	; 0x02
    2222:	84 30       	cpi	r24, 0x04	; 4
    2224:	08 f0       	brcs	.+2      	; 0x2228 <GPIO_readPin+0x24>
    2226:	80 c0       	rjmp	.+256    	; 0x2328 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2228:	8a 81       	ldd	r24, Y+2	; 0x02
    222a:	28 2f       	mov	r18, r24
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	3d 83       	std	Y+5, r19	; 0x05
    2230:	2c 83       	std	Y+4, r18	; 0x04
    2232:	4c 81       	ldd	r20, Y+4	; 0x04
    2234:	5d 81       	ldd	r21, Y+5	; 0x05
    2236:	41 30       	cpi	r20, 0x01	; 1
    2238:	51 05       	cpc	r21, r1
    223a:	79 f1       	breq	.+94     	; 0x229a <GPIO_readPin+0x96>
    223c:	8c 81       	ldd	r24, Y+4	; 0x04
    223e:	9d 81       	ldd	r25, Y+5	; 0x05
    2240:	82 30       	cpi	r24, 0x02	; 2
    2242:	91 05       	cpc	r25, r1
    2244:	34 f4       	brge	.+12     	; 0x2252 <GPIO_readPin+0x4e>
    2246:	2c 81       	ldd	r18, Y+4	; 0x04
    2248:	3d 81       	ldd	r19, Y+5	; 0x05
    224a:	21 15       	cp	r18, r1
    224c:	31 05       	cpc	r19, r1
    224e:	69 f0       	breq	.+26     	; 0x226a <GPIO_readPin+0x66>
    2250:	6b c0       	rjmp	.+214    	; 0x2328 <GPIO_readPin+0x124>
    2252:	4c 81       	ldd	r20, Y+4	; 0x04
    2254:	5d 81       	ldd	r21, Y+5	; 0x05
    2256:	42 30       	cpi	r20, 0x02	; 2
    2258:	51 05       	cpc	r21, r1
    225a:	b9 f1       	breq	.+110    	; 0x22ca <GPIO_readPin+0xc6>
    225c:	8c 81       	ldd	r24, Y+4	; 0x04
    225e:	9d 81       	ldd	r25, Y+5	; 0x05
    2260:	83 30       	cpi	r24, 0x03	; 3
    2262:	91 05       	cpc	r25, r1
    2264:	09 f4       	brne	.+2      	; 0x2268 <GPIO_readPin+0x64>
    2266:	49 c0       	rjmp	.+146    	; 0x22fa <GPIO_readPin+0xf6>
    2268:	5f c0       	rjmp	.+190    	; 0x2328 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    226a:	e9 e3       	ldi	r30, 0x39	; 57
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	28 2f       	mov	r18, r24
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	8b 81       	ldd	r24, Y+3	; 0x03
    2276:	88 2f       	mov	r24, r24
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	a9 01       	movw	r20, r18
    227c:	02 c0       	rjmp	.+4      	; 0x2282 <GPIO_readPin+0x7e>
    227e:	55 95       	asr	r21
    2280:	47 95       	ror	r20
    2282:	8a 95       	dec	r24
    2284:	e2 f7       	brpl	.-8      	; 0x227e <GPIO_readPin+0x7a>
    2286:	ca 01       	movw	r24, r20
    2288:	81 70       	andi	r24, 0x01	; 1
    228a:	90 70       	andi	r25, 0x00	; 0
    228c:	88 23       	and	r24, r24
    228e:	19 f0       	breq	.+6      	; 0x2296 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	89 83       	std	Y+1, r24	; 0x01
    2294:	49 c0       	rjmp	.+146    	; 0x2328 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2296:	19 82       	std	Y+1, r1	; 0x01
    2298:	47 c0       	rjmp	.+142    	; 0x2328 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    229a:	e6 e3       	ldi	r30, 0x36	; 54
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	28 2f       	mov	r18, r24
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	8b 81       	ldd	r24, Y+3	; 0x03
    22a6:	88 2f       	mov	r24, r24
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	a9 01       	movw	r20, r18
    22ac:	02 c0       	rjmp	.+4      	; 0x22b2 <GPIO_readPin+0xae>
    22ae:	55 95       	asr	r21
    22b0:	47 95       	ror	r20
    22b2:	8a 95       	dec	r24
    22b4:	e2 f7       	brpl	.-8      	; 0x22ae <GPIO_readPin+0xaa>
    22b6:	ca 01       	movw	r24, r20
    22b8:	81 70       	andi	r24, 0x01	; 1
    22ba:	90 70       	andi	r25, 0x00	; 0
    22bc:	88 23       	and	r24, r24
    22be:	19 f0       	breq	.+6      	; 0x22c6 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	89 83       	std	Y+1, r24	; 0x01
    22c4:	31 c0       	rjmp	.+98     	; 0x2328 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    22c6:	19 82       	std	Y+1, r1	; 0x01
    22c8:	2f c0       	rjmp	.+94     	; 0x2328 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    22ca:	e3 e3       	ldi	r30, 0x33	; 51
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	80 81       	ld	r24, Z
    22d0:	28 2f       	mov	r18, r24
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	8b 81       	ldd	r24, Y+3	; 0x03
    22d6:	88 2f       	mov	r24, r24
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	a9 01       	movw	r20, r18
    22dc:	02 c0       	rjmp	.+4      	; 0x22e2 <GPIO_readPin+0xde>
    22de:	55 95       	asr	r21
    22e0:	47 95       	ror	r20
    22e2:	8a 95       	dec	r24
    22e4:	e2 f7       	brpl	.-8      	; 0x22de <GPIO_readPin+0xda>
    22e6:	ca 01       	movw	r24, r20
    22e8:	81 70       	andi	r24, 0x01	; 1
    22ea:	90 70       	andi	r25, 0x00	; 0
    22ec:	88 23       	and	r24, r24
    22ee:	19 f0       	breq	.+6      	; 0x22f6 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	89 83       	std	Y+1, r24	; 0x01
    22f4:	19 c0       	rjmp	.+50     	; 0x2328 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    22f6:	19 82       	std	Y+1, r1	; 0x01
    22f8:	17 c0       	rjmp	.+46     	; 0x2328 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    22fa:	e0 e3       	ldi	r30, 0x30	; 48
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 81       	ld	r24, Z
    2300:	28 2f       	mov	r18, r24
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	8b 81       	ldd	r24, Y+3	; 0x03
    2306:	88 2f       	mov	r24, r24
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	a9 01       	movw	r20, r18
    230c:	02 c0       	rjmp	.+4      	; 0x2312 <GPIO_readPin+0x10e>
    230e:	55 95       	asr	r21
    2310:	47 95       	ror	r20
    2312:	8a 95       	dec	r24
    2314:	e2 f7       	brpl	.-8      	; 0x230e <GPIO_readPin+0x10a>
    2316:	ca 01       	movw	r24, r20
    2318:	81 70       	andi	r24, 0x01	; 1
    231a:	90 70       	andi	r25, 0x00	; 0
    231c:	88 23       	and	r24, r24
    231e:	19 f0       	breq	.+6      	; 0x2326 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	89 83       	std	Y+1, r24	; 0x01
    2324:	01 c0       	rjmp	.+2      	; 0x2328 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2326:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2328:	89 81       	ldd	r24, Y+1	; 0x01
}
    232a:	0f 90       	pop	r0
    232c:	0f 90       	pop	r0
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
    2332:	0f 90       	pop	r0
    2334:	cf 91       	pop	r28
    2336:	df 91       	pop	r29
    2338:	08 95       	ret

0000233a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    233a:	df 93       	push	r29
    233c:	cf 93       	push	r28
    233e:	00 d0       	rcall	.+0      	; 0x2340 <GPIO_setupPortDirection+0x6>
    2340:	00 d0       	rcall	.+0      	; 0x2342 <GPIO_setupPortDirection+0x8>
    2342:	cd b7       	in	r28, 0x3d	; 61
    2344:	de b7       	in	r29, 0x3e	; 62
    2346:	89 83       	std	Y+1, r24	; 0x01
    2348:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	84 30       	cpi	r24, 0x04	; 4
    234e:	90 f5       	brcc	.+100    	; 0x23b4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	28 2f       	mov	r18, r24
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	3c 83       	std	Y+4, r19	; 0x04
    2358:	2b 83       	std	Y+3, r18	; 0x03
    235a:	8b 81       	ldd	r24, Y+3	; 0x03
    235c:	9c 81       	ldd	r25, Y+4	; 0x04
    235e:	81 30       	cpi	r24, 0x01	; 1
    2360:	91 05       	cpc	r25, r1
    2362:	d1 f0       	breq	.+52     	; 0x2398 <GPIO_setupPortDirection+0x5e>
    2364:	2b 81       	ldd	r18, Y+3	; 0x03
    2366:	3c 81       	ldd	r19, Y+4	; 0x04
    2368:	22 30       	cpi	r18, 0x02	; 2
    236a:	31 05       	cpc	r19, r1
    236c:	2c f4       	brge	.+10     	; 0x2378 <GPIO_setupPortDirection+0x3e>
    236e:	8b 81       	ldd	r24, Y+3	; 0x03
    2370:	9c 81       	ldd	r25, Y+4	; 0x04
    2372:	00 97       	sbiw	r24, 0x00	; 0
    2374:	61 f0       	breq	.+24     	; 0x238e <GPIO_setupPortDirection+0x54>
    2376:	1e c0       	rjmp	.+60     	; 0x23b4 <GPIO_setupPortDirection+0x7a>
    2378:	2b 81       	ldd	r18, Y+3	; 0x03
    237a:	3c 81       	ldd	r19, Y+4	; 0x04
    237c:	22 30       	cpi	r18, 0x02	; 2
    237e:	31 05       	cpc	r19, r1
    2380:	81 f0       	breq	.+32     	; 0x23a2 <GPIO_setupPortDirection+0x68>
    2382:	8b 81       	ldd	r24, Y+3	; 0x03
    2384:	9c 81       	ldd	r25, Y+4	; 0x04
    2386:	83 30       	cpi	r24, 0x03	; 3
    2388:	91 05       	cpc	r25, r1
    238a:	81 f0       	breq	.+32     	; 0x23ac <GPIO_setupPortDirection+0x72>
    238c:	13 c0       	rjmp	.+38     	; 0x23b4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    238e:	ea e3       	ldi	r30, 0x3A	; 58
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	8a 81       	ldd	r24, Y+2	; 0x02
    2394:	80 83       	st	Z, r24
    2396:	0e c0       	rjmp	.+28     	; 0x23b4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2398:	e7 e3       	ldi	r30, 0x37	; 55
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	8a 81       	ldd	r24, Y+2	; 0x02
    239e:	80 83       	st	Z, r24
    23a0:	09 c0       	rjmp	.+18     	; 0x23b4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    23a2:	e4 e3       	ldi	r30, 0x34	; 52
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	8a 81       	ldd	r24, Y+2	; 0x02
    23a8:	80 83       	st	Z, r24
    23aa:	04 c0       	rjmp	.+8      	; 0x23b4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    23ac:	e1 e3       	ldi	r30, 0x31	; 49
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	8a 81       	ldd	r24, Y+2	; 0x02
    23b2:	80 83       	st	Z, r24
			break;
		}
	}
}
    23b4:	0f 90       	pop	r0
    23b6:	0f 90       	pop	r0
    23b8:	0f 90       	pop	r0
    23ba:	0f 90       	pop	r0
    23bc:	cf 91       	pop	r28
    23be:	df 91       	pop	r29
    23c0:	08 95       	ret

000023c2 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    23c2:	df 93       	push	r29
    23c4:	cf 93       	push	r28
    23c6:	00 d0       	rcall	.+0      	; 0x23c8 <GPIO_writePort+0x6>
    23c8:	00 d0       	rcall	.+0      	; 0x23ca <GPIO_writePort+0x8>
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62
    23ce:	89 83       	std	Y+1, r24	; 0x01
    23d0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    23d2:	89 81       	ldd	r24, Y+1	; 0x01
    23d4:	84 30       	cpi	r24, 0x04	; 4
    23d6:	90 f5       	brcc	.+100    	; 0x243c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    23d8:	89 81       	ldd	r24, Y+1	; 0x01
    23da:	28 2f       	mov	r18, r24
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	3c 83       	std	Y+4, r19	; 0x04
    23e0:	2b 83       	std	Y+3, r18	; 0x03
    23e2:	8b 81       	ldd	r24, Y+3	; 0x03
    23e4:	9c 81       	ldd	r25, Y+4	; 0x04
    23e6:	81 30       	cpi	r24, 0x01	; 1
    23e8:	91 05       	cpc	r25, r1
    23ea:	d1 f0       	breq	.+52     	; 0x2420 <GPIO_writePort+0x5e>
    23ec:	2b 81       	ldd	r18, Y+3	; 0x03
    23ee:	3c 81       	ldd	r19, Y+4	; 0x04
    23f0:	22 30       	cpi	r18, 0x02	; 2
    23f2:	31 05       	cpc	r19, r1
    23f4:	2c f4       	brge	.+10     	; 0x2400 <GPIO_writePort+0x3e>
    23f6:	8b 81       	ldd	r24, Y+3	; 0x03
    23f8:	9c 81       	ldd	r25, Y+4	; 0x04
    23fa:	00 97       	sbiw	r24, 0x00	; 0
    23fc:	61 f0       	breq	.+24     	; 0x2416 <GPIO_writePort+0x54>
    23fe:	1e c0       	rjmp	.+60     	; 0x243c <GPIO_writePort+0x7a>
    2400:	2b 81       	ldd	r18, Y+3	; 0x03
    2402:	3c 81       	ldd	r19, Y+4	; 0x04
    2404:	22 30       	cpi	r18, 0x02	; 2
    2406:	31 05       	cpc	r19, r1
    2408:	81 f0       	breq	.+32     	; 0x242a <GPIO_writePort+0x68>
    240a:	8b 81       	ldd	r24, Y+3	; 0x03
    240c:	9c 81       	ldd	r25, Y+4	; 0x04
    240e:	83 30       	cpi	r24, 0x03	; 3
    2410:	91 05       	cpc	r25, r1
    2412:	81 f0       	breq	.+32     	; 0x2434 <GPIO_writePort+0x72>
    2414:	13 c0       	rjmp	.+38     	; 0x243c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2416:	eb e3       	ldi	r30, 0x3B	; 59
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	8a 81       	ldd	r24, Y+2	; 0x02
    241c:	80 83       	st	Z, r24
    241e:	0e c0       	rjmp	.+28     	; 0x243c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2420:	e8 e3       	ldi	r30, 0x38	; 56
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	8a 81       	ldd	r24, Y+2	; 0x02
    2426:	80 83       	st	Z, r24
    2428:	09 c0       	rjmp	.+18     	; 0x243c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    242a:	e5 e3       	ldi	r30, 0x35	; 53
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	8a 81       	ldd	r24, Y+2	; 0x02
    2430:	80 83       	st	Z, r24
    2432:	04 c0       	rjmp	.+8      	; 0x243c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2434:	e2 e3       	ldi	r30, 0x32	; 50
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	8a 81       	ldd	r24, Y+2	; 0x02
    243a:	80 83       	st	Z, r24
			break;
		}
	}
}
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	08 95       	ret

0000244a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    244a:	df 93       	push	r29
    244c:	cf 93       	push	r28
    244e:	00 d0       	rcall	.+0      	; 0x2450 <GPIO_readPort+0x6>
    2450:	00 d0       	rcall	.+0      	; 0x2452 <GPIO_readPort+0x8>
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
    2456:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2458:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    245a:	8a 81       	ldd	r24, Y+2	; 0x02
    245c:	84 30       	cpi	r24, 0x04	; 4
    245e:	90 f5       	brcc	.+100    	; 0x24c4 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2460:	8a 81       	ldd	r24, Y+2	; 0x02
    2462:	28 2f       	mov	r18, r24
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	3c 83       	std	Y+4, r19	; 0x04
    2468:	2b 83       	std	Y+3, r18	; 0x03
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	9c 81       	ldd	r25, Y+4	; 0x04
    246e:	81 30       	cpi	r24, 0x01	; 1
    2470:	91 05       	cpc	r25, r1
    2472:	d1 f0       	breq	.+52     	; 0x24a8 <GPIO_readPort+0x5e>
    2474:	2b 81       	ldd	r18, Y+3	; 0x03
    2476:	3c 81       	ldd	r19, Y+4	; 0x04
    2478:	22 30       	cpi	r18, 0x02	; 2
    247a:	31 05       	cpc	r19, r1
    247c:	2c f4       	brge	.+10     	; 0x2488 <GPIO_readPort+0x3e>
    247e:	8b 81       	ldd	r24, Y+3	; 0x03
    2480:	9c 81       	ldd	r25, Y+4	; 0x04
    2482:	00 97       	sbiw	r24, 0x00	; 0
    2484:	61 f0       	breq	.+24     	; 0x249e <GPIO_readPort+0x54>
    2486:	1e c0       	rjmp	.+60     	; 0x24c4 <GPIO_readPort+0x7a>
    2488:	2b 81       	ldd	r18, Y+3	; 0x03
    248a:	3c 81       	ldd	r19, Y+4	; 0x04
    248c:	22 30       	cpi	r18, 0x02	; 2
    248e:	31 05       	cpc	r19, r1
    2490:	81 f0       	breq	.+32     	; 0x24b2 <GPIO_readPort+0x68>
    2492:	8b 81       	ldd	r24, Y+3	; 0x03
    2494:	9c 81       	ldd	r25, Y+4	; 0x04
    2496:	83 30       	cpi	r24, 0x03	; 3
    2498:	91 05       	cpc	r25, r1
    249a:	81 f0       	breq	.+32     	; 0x24bc <GPIO_readPort+0x72>
    249c:	13 c0       	rjmp	.+38     	; 0x24c4 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    249e:	e9 e3       	ldi	r30, 0x39	; 57
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
    24a4:	89 83       	std	Y+1, r24	; 0x01
    24a6:	0e c0       	rjmp	.+28     	; 0x24c4 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    24a8:	e6 e3       	ldi	r30, 0x36	; 54
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	80 81       	ld	r24, Z
    24ae:	89 83       	std	Y+1, r24	; 0x01
    24b0:	09 c0       	rjmp	.+18     	; 0x24c4 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    24b2:	e3 e3       	ldi	r30, 0x33	; 51
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	80 81       	ld	r24, Z
    24b8:	89 83       	std	Y+1, r24	; 0x01
    24ba:	04 c0       	rjmp	.+8      	; 0x24c4 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    24bc:	e0 e3       	ldi	r30, 0x30	; 48
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
    24c2:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    24c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    24c6:	0f 90       	pop	r0
    24c8:	0f 90       	pop	r0
    24ca:	0f 90       	pop	r0
    24cc:	0f 90       	pop	r0
    24ce:	cf 91       	pop	r28
    24d0:	df 91       	pop	r29
    24d2:	08 95       	ret

000024d4 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    24d4:	df 93       	push	r29
    24d6:	cf 93       	push	r28
    24d8:	00 d0       	rcall	.+0      	; 0x24da <KEYPAD_getPressedKey+0x6>
    24da:	0f 92       	push	r0
    24dc:	cd b7       	in	r28, 0x3d	; 61
    24de:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    24e0:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    24e2:	1b 82       	std	Y+3, r1	; 0x03
    24e4:	43 c0       	rjmp	.+134    	; 0x256c <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	60 e0       	ldi	r22, 0x00	; 0
    24ea:	0e 94 9d 11 	call	0x233a	; 0x233a <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    24ee:	8b 81       	ldd	r24, Y+3	; 0x03
    24f0:	98 2f       	mov	r25, r24
    24f2:	9c 5f       	subi	r25, 0xFC	; 252
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	69 2f       	mov	r22, r25
    24f8:	41 e0       	ldi	r20, 0x01	; 1
    24fa:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    24fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2500:	88 2f       	mov	r24, r24
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	9c 01       	movw	r18, r24
    2506:	2c 5f       	subi	r18, 0xFC	; 252
    2508:	3f 4f       	sbci	r19, 0xFF	; 255
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	02 c0       	rjmp	.+4      	; 0x2514 <KEYPAD_getPressedKey+0x40>
    2510:	88 0f       	add	r24, r24
    2512:	99 1f       	adc	r25, r25
    2514:	2a 95       	dec	r18
    2516:	e2 f7       	brpl	.-8      	; 0x2510 <KEYPAD_getPressedKey+0x3c>
    2518:	80 95       	com	r24
    251a:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	69 81       	ldd	r22, Y+1	; 0x01
    2520:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2524:	1a 82       	std	Y+2, r1	; 0x02
    2526:	1c c0       	rjmp	.+56     	; 0x2560 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	6a 81       	ldd	r22, Y+2	; 0x02
    252c:	0e 94 02 11 	call	0x2204	; 0x2204 <GPIO_readPin>
    2530:	88 23       	and	r24, r24
    2532:	99 f4       	brne	.+38     	; 0x255a <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2534:	8a 81       	ldd	r24, Y+2	; 0x02
    2536:	88 2f       	mov	r24, r24
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	88 0f       	add	r24, r24
    253c:	99 1f       	adc	r25, r25
    253e:	88 0f       	add	r24, r24
    2540:	99 1f       	adc	r25, r25
    2542:	98 2f       	mov	r25, r24
    2544:	8b 81       	ldd	r24, Y+3	; 0x03
    2546:	89 0f       	add	r24, r25
    2548:	8f 5f       	subi	r24, 0xFF	; 255
    254a:	0e 94 bb 12 	call	0x2576	; 0x2576 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    254e:	0f 90       	pop	r0
    2550:	0f 90       	pop	r0
    2552:	0f 90       	pop	r0
    2554:	cf 91       	pop	r28
    2556:	df 91       	pop	r29
    2558:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    255a:	8a 81       	ldd	r24, Y+2	; 0x02
    255c:	8f 5f       	subi	r24, 0xFF	; 255
    255e:	8a 83       	std	Y+2, r24	; 0x02
    2560:	8a 81       	ldd	r24, Y+2	; 0x02
    2562:	84 30       	cpi	r24, 0x04	; 4
    2564:	08 f3       	brcs	.-62     	; 0x2528 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2566:	8b 81       	ldd	r24, Y+3	; 0x03
    2568:	8f 5f       	subi	r24, 0xFF	; 255
    256a:	8b 83       	std	Y+3, r24	; 0x03
    256c:	8b 81       	ldd	r24, Y+3	; 0x03
    256e:	84 30       	cpi	r24, 0x04	; 4
    2570:	08 f4       	brcc	.+2      	; 0x2574 <KEYPAD_getPressedKey+0xa0>
    2572:	b9 cf       	rjmp	.-142    	; 0x24e6 <KEYPAD_getPressedKey+0x12>
    2574:	b6 cf       	rjmp	.-148    	; 0x24e2 <KEYPAD_getPressedKey+0xe>

00002576 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2576:	df 93       	push	r29
    2578:	cf 93       	push	r28
    257a:	00 d0       	rcall	.+0      	; 0x257c <KEYPAD_4x4_adjustKeyNumber+0x6>
    257c:	00 d0       	rcall	.+0      	; 0x257e <KEYPAD_4x4_adjustKeyNumber+0x8>
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
    2582:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2584:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2586:	8a 81       	ldd	r24, Y+2	; 0x02
    2588:	28 2f       	mov	r18, r24
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	3c 83       	std	Y+4, r19	; 0x04
    258e:	2b 83       	std	Y+3, r18	; 0x03
    2590:	8b 81       	ldd	r24, Y+3	; 0x03
    2592:	9c 81       	ldd	r25, Y+4	; 0x04
    2594:	88 30       	cpi	r24, 0x08	; 8
    2596:	91 05       	cpc	r25, r1
    2598:	09 f4       	brne	.+2      	; 0x259c <KEYPAD_4x4_adjustKeyNumber+0x26>
    259a:	70 c0       	rjmp	.+224    	; 0x267c <KEYPAD_4x4_adjustKeyNumber+0x106>
    259c:	2b 81       	ldd	r18, Y+3	; 0x03
    259e:	3c 81       	ldd	r19, Y+4	; 0x04
    25a0:	29 30       	cpi	r18, 0x09	; 9
    25a2:	31 05       	cpc	r19, r1
    25a4:	5c f5       	brge	.+86     	; 0x25fc <KEYPAD_4x4_adjustKeyNumber+0x86>
    25a6:	8b 81       	ldd	r24, Y+3	; 0x03
    25a8:	9c 81       	ldd	r25, Y+4	; 0x04
    25aa:	84 30       	cpi	r24, 0x04	; 4
    25ac:	91 05       	cpc	r25, r1
    25ae:	09 f4       	brne	.+2      	; 0x25b2 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    25b0:	59 c0       	rjmp	.+178    	; 0x2664 <KEYPAD_4x4_adjustKeyNumber+0xee>
    25b2:	2b 81       	ldd	r18, Y+3	; 0x03
    25b4:	3c 81       	ldd	r19, Y+4	; 0x04
    25b6:	25 30       	cpi	r18, 0x05	; 5
    25b8:	31 05       	cpc	r19, r1
    25ba:	9c f4       	brge	.+38     	; 0x25e2 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    25bc:	8b 81       	ldd	r24, Y+3	; 0x03
    25be:	9c 81       	ldd	r25, Y+4	; 0x04
    25c0:	82 30       	cpi	r24, 0x02	; 2
    25c2:	91 05       	cpc	r25, r1
    25c4:	09 f4       	brne	.+2      	; 0x25c8 <KEYPAD_4x4_adjustKeyNumber+0x52>
    25c6:	48 c0       	rjmp	.+144    	; 0x2658 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    25c8:	2b 81       	ldd	r18, Y+3	; 0x03
    25ca:	3c 81       	ldd	r19, Y+4	; 0x04
    25cc:	23 30       	cpi	r18, 0x03	; 3
    25ce:	31 05       	cpc	r19, r1
    25d0:	0c f0       	brlt	.+2      	; 0x25d4 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    25d2:	45 c0       	rjmp	.+138    	; 0x265e <KEYPAD_4x4_adjustKeyNumber+0xe8>
    25d4:	8b 81       	ldd	r24, Y+3	; 0x03
    25d6:	9c 81       	ldd	r25, Y+4	; 0x04
    25d8:	81 30       	cpi	r24, 0x01	; 1
    25da:	91 05       	cpc	r25, r1
    25dc:	09 f4       	brne	.+2      	; 0x25e0 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    25de:	39 c0       	rjmp	.+114    	; 0x2652 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    25e0:	67 c0       	rjmp	.+206    	; 0x26b0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    25e2:	2b 81       	ldd	r18, Y+3	; 0x03
    25e4:	3c 81       	ldd	r19, Y+4	; 0x04
    25e6:	26 30       	cpi	r18, 0x06	; 6
    25e8:	31 05       	cpc	r19, r1
    25ea:	09 f4       	brne	.+2      	; 0x25ee <KEYPAD_4x4_adjustKeyNumber+0x78>
    25ec:	41 c0       	rjmp	.+130    	; 0x2670 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    25ee:	8b 81       	ldd	r24, Y+3	; 0x03
    25f0:	9c 81       	ldd	r25, Y+4	; 0x04
    25f2:	87 30       	cpi	r24, 0x07	; 7
    25f4:	91 05       	cpc	r25, r1
    25f6:	0c f0       	brlt	.+2      	; 0x25fa <KEYPAD_4x4_adjustKeyNumber+0x84>
    25f8:	3e c0       	rjmp	.+124    	; 0x2676 <KEYPAD_4x4_adjustKeyNumber+0x100>
    25fa:	37 c0       	rjmp	.+110    	; 0x266a <KEYPAD_4x4_adjustKeyNumber+0xf4>
    25fc:	2b 81       	ldd	r18, Y+3	; 0x03
    25fe:	3c 81       	ldd	r19, Y+4	; 0x04
    2600:	2c 30       	cpi	r18, 0x0C	; 12
    2602:	31 05       	cpc	r19, r1
    2604:	09 f4       	brne	.+2      	; 0x2608 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2606:	46 c0       	rjmp	.+140    	; 0x2694 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2608:	8b 81       	ldd	r24, Y+3	; 0x03
    260a:	9c 81       	ldd	r25, Y+4	; 0x04
    260c:	8d 30       	cpi	r24, 0x0D	; 13
    260e:	91 05       	cpc	r25, r1
    2610:	5c f4       	brge	.+22     	; 0x2628 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2612:	2b 81       	ldd	r18, Y+3	; 0x03
    2614:	3c 81       	ldd	r19, Y+4	; 0x04
    2616:	2a 30       	cpi	r18, 0x0A	; 10
    2618:	31 05       	cpc	r19, r1
    261a:	b1 f1       	breq	.+108    	; 0x2688 <KEYPAD_4x4_adjustKeyNumber+0x112>
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	9c 81       	ldd	r25, Y+4	; 0x04
    2620:	8b 30       	cpi	r24, 0x0B	; 11
    2622:	91 05       	cpc	r25, r1
    2624:	a4 f5       	brge	.+104    	; 0x268e <KEYPAD_4x4_adjustKeyNumber+0x118>
    2626:	2d c0       	rjmp	.+90     	; 0x2682 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2628:	2b 81       	ldd	r18, Y+3	; 0x03
    262a:	3c 81       	ldd	r19, Y+4	; 0x04
    262c:	2e 30       	cpi	r18, 0x0E	; 14
    262e:	31 05       	cpc	r19, r1
    2630:	b9 f1       	breq	.+110    	; 0x26a0 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2632:	8b 81       	ldd	r24, Y+3	; 0x03
    2634:	9c 81       	ldd	r25, Y+4	; 0x04
    2636:	8e 30       	cpi	r24, 0x0E	; 14
    2638:	91 05       	cpc	r25, r1
    263a:	7c f1       	brlt	.+94     	; 0x269a <KEYPAD_4x4_adjustKeyNumber+0x124>
    263c:	2b 81       	ldd	r18, Y+3	; 0x03
    263e:	3c 81       	ldd	r19, Y+4	; 0x04
    2640:	2f 30       	cpi	r18, 0x0F	; 15
    2642:	31 05       	cpc	r19, r1
    2644:	79 f1       	breq	.+94     	; 0x26a4 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2646:	8b 81       	ldd	r24, Y+3	; 0x03
    2648:	9c 81       	ldd	r25, Y+4	; 0x04
    264a:	80 31       	cpi	r24, 0x10	; 16
    264c:	91 05       	cpc	r25, r1
    264e:	69 f1       	breq	.+90     	; 0x26aa <KEYPAD_4x4_adjustKeyNumber+0x134>
    2650:	2f c0       	rjmp	.+94     	; 0x26b0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2652:	87 e0       	ldi	r24, 0x07	; 7
    2654:	89 83       	std	Y+1, r24	; 0x01
    2656:	2e c0       	rjmp	.+92     	; 0x26b4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2658:	88 e0       	ldi	r24, 0x08	; 8
    265a:	89 83       	std	Y+1, r24	; 0x01
    265c:	2b c0       	rjmp	.+86     	; 0x26b4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    265e:	89 e0       	ldi	r24, 0x09	; 9
    2660:	89 83       	std	Y+1, r24	; 0x01
    2662:	28 c0       	rjmp	.+80     	; 0x26b4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2664:	85 e2       	ldi	r24, 0x25	; 37
    2666:	89 83       	std	Y+1, r24	; 0x01
    2668:	25 c0       	rjmp	.+74     	; 0x26b4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    266a:	84 e0       	ldi	r24, 0x04	; 4
    266c:	89 83       	std	Y+1, r24	; 0x01
    266e:	22 c0       	rjmp	.+68     	; 0x26b4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2670:	85 e0       	ldi	r24, 0x05	; 5
    2672:	89 83       	std	Y+1, r24	; 0x01
    2674:	1f c0       	rjmp	.+62     	; 0x26b4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2676:	86 e0       	ldi	r24, 0x06	; 6
    2678:	89 83       	std	Y+1, r24	; 0x01
    267a:	1c c0       	rjmp	.+56     	; 0x26b4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    267c:	8a e2       	ldi	r24, 0x2A	; 42
    267e:	89 83       	std	Y+1, r24	; 0x01
    2680:	19 c0       	rjmp	.+50     	; 0x26b4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	89 83       	std	Y+1, r24	; 0x01
    2686:	16 c0       	rjmp	.+44     	; 0x26b4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2688:	82 e0       	ldi	r24, 0x02	; 2
    268a:	89 83       	std	Y+1, r24	; 0x01
    268c:	13 c0       	rjmp	.+38     	; 0x26b4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    268e:	83 e0       	ldi	r24, 0x03	; 3
    2690:	89 83       	std	Y+1, r24	; 0x01
    2692:	10 c0       	rjmp	.+32     	; 0x26b4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2694:	8d e2       	ldi	r24, 0x2D	; 45
    2696:	89 83       	std	Y+1, r24	; 0x01
    2698:	0d c0       	rjmp	.+26     	; 0x26b4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    269a:	8d e0       	ldi	r24, 0x0D	; 13
    269c:	89 83       	std	Y+1, r24	; 0x01
    269e:	0a c0       	rjmp	.+20     	; 0x26b4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    26a0:	19 82       	std	Y+1, r1	; 0x01
    26a2:	08 c0       	rjmp	.+16     	; 0x26b4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    26a4:	8d e3       	ldi	r24, 0x3D	; 61
    26a6:	89 83       	std	Y+1, r24	; 0x01
    26a8:	05 c0       	rjmp	.+10     	; 0x26b4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    26aa:	8b e2       	ldi	r24, 0x2B	; 43
    26ac:	89 83       	std	Y+1, r24	; 0x01
    26ae:	02 c0       	rjmp	.+4      	; 0x26b4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    26b0:	8a 81       	ldd	r24, Y+2	; 0x02
    26b2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
} 
    26b6:	0f 90       	pop	r0
    26b8:	0f 90       	pop	r0
    26ba:	0f 90       	pop	r0
    26bc:	0f 90       	pop	r0
    26be:	cf 91       	pop	r28
    26c0:	df 91       	pop	r29
    26c2:	08 95       	ret

000026c4 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    26c4:	df 93       	push	r29
    26c6:	cf 93       	push	r28
    26c8:	cd b7       	in	r28, 0x3d	; 61
    26ca:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    26cc:	83 e0       	ldi	r24, 0x03	; 3
    26ce:	64 e0       	ldi	r22, 0x04	; 4
    26d0:	41 e0       	ldi	r20, 0x01	; 1
    26d2:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    26d6:	83 e0       	ldi	r24, 0x03	; 3
    26d8:	65 e0       	ldi	r22, 0x05	; 5
    26da:	41 e0       	ldi	r20, 0x01	; 1
    26dc:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    26e0:	83 e0       	ldi	r24, 0x03	; 3
    26e2:	66 e0       	ldi	r22, 0x06	; 6
    26e4:	41 e0       	ldi	r20, 0x01	; 1
    26e6:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <GPIO_setupPinDirection>

#if (LCD_DATA_BITS_MODE == 4)

	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID,PIN_OUTPUT);
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	64 e0       	ldi	r22, 0x04	; 4
    26ee:	41 e0       	ldi	r20, 0x01	; 1
    26f0:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+1,PIN_OUTPUT);
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	65 e0       	ldi	r22, 0x05	; 5
    26f8:	41 e0       	ldi	r20, 0x01	; 1
    26fa:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+2,PIN_OUTPUT);
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	66 e0       	ldi	r22, 0x06	; 6
    2702:	41 e0       	ldi	r20, 0x01	; 1
    2704:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+3,PIN_OUTPUT);
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	67 e0       	ldi	r22, 0x07	; 7
    270c:	41 e0       	ldi	r20, 0x01	; 1
    270e:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <GPIO_setupPinDirection>

	LCD_sendCommand(LCD_GO_TO_HOME);
    2712:	82 e0       	ldi	r24, 0x02	; 2
    2714:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    2718:	88 e2       	ldi	r24, 0x28	; 40
    271a:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_sendCommand>
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    271e:	8c e0       	ldi	r24, 0x0C	; 12
    2720:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_sendCommand>
}
    272a:	cf 91       	pop	r28
    272c:	df 91       	pop	r29
    272e:	08 95       	ret

00002730 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2730:	0f 93       	push	r16
    2732:	1f 93       	push	r17
    2734:	df 93       	push	r29
    2736:	cf 93       	push	r28
    2738:	cd b7       	in	r28, 0x3d	; 61
    273a:	de b7       	in	r29, 0x3e	; 62
    273c:	c4 56       	subi	r28, 0x64	; 100
    273e:	d0 40       	sbci	r29, 0x00	; 0
    2740:	0f b6       	in	r0, 0x3f	; 63
    2742:	f8 94       	cli
    2744:	de bf       	out	0x3e, r29	; 62
    2746:	0f be       	out	0x3f, r0	; 63
    2748:	cd bf       	out	0x3d, r28	; 61
    274a:	fe 01       	movw	r30, r28
    274c:	ec 59       	subi	r30, 0x9C	; 156
    274e:	ff 4f       	sbci	r31, 0xFF	; 255
    2750:	80 83       	st	Z, r24
	uint8 lcd_port_value = 0;
    2752:	fe 01       	movw	r30, r28
    2754:	ed 59       	subi	r30, 0x9D	; 157
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	10 82       	st	Z, r1
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    275a:	83 e0       	ldi	r24, 0x03	; 3
    275c:	64 e0       	ldi	r22, 0x04	; 4
    275e:	40 e0       	ldi	r20, 0x00	; 0
    2760:	0e 94 17 10 	call	0x202e	; 0x202e <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2764:	83 e0       	ldi	r24, 0x03	; 3
    2766:	65 e0       	ldi	r22, 0x05	; 5
    2768:	40 e0       	ldi	r20, 0x00	; 0
    276a:	0e 94 17 10 	call	0x202e	; 0x202e <GPIO_writePin>
    276e:	fe 01       	movw	r30, r28
    2770:	e1 5a       	subi	r30, 0xA1	; 161
    2772:	ff 4f       	sbci	r31, 0xFF	; 255
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	a0 e8       	ldi	r26, 0x80	; 128
    277a:	bf e3       	ldi	r27, 0x3F	; 63
    277c:	80 83       	st	Z, r24
    277e:	91 83       	std	Z+1, r25	; 0x01
    2780:	a2 83       	std	Z+2, r26	; 0x02
    2782:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2784:	8e 01       	movw	r16, r28
    2786:	05 5a       	subi	r16, 0xA5	; 165
    2788:	1f 4f       	sbci	r17, 0xFF	; 255
    278a:	fe 01       	movw	r30, r28
    278c:	e1 5a       	subi	r30, 0xA1	; 161
    278e:	ff 4f       	sbci	r31, 0xFF	; 255
    2790:	60 81       	ld	r22, Z
    2792:	71 81       	ldd	r23, Z+1	; 0x01
    2794:	82 81       	ldd	r24, Z+2	; 0x02
    2796:	93 81       	ldd	r25, Z+3	; 0x03
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	4a e7       	ldi	r20, 0x7A	; 122
    279e:	53 e4       	ldi	r21, 0x43	; 67
    27a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	f8 01       	movw	r30, r16
    27aa:	80 83       	st	Z, r24
    27ac:	91 83       	std	Z+1, r25	; 0x01
    27ae:	a2 83       	std	Z+2, r26	; 0x02
    27b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27b2:	fe 01       	movw	r30, r28
    27b4:	e5 5a       	subi	r30, 0xA5	; 165
    27b6:	ff 4f       	sbci	r31, 0xFF	; 255
    27b8:	60 81       	ld	r22, Z
    27ba:	71 81       	ldd	r23, Z+1	; 0x01
    27bc:	82 81       	ldd	r24, Z+2	; 0x02
    27be:	93 81       	ldd	r25, Z+3	; 0x03
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	40 e8       	ldi	r20, 0x80	; 128
    27c6:	5f e3       	ldi	r21, 0x3F	; 63
    27c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27cc:	88 23       	and	r24, r24
    27ce:	44 f4       	brge	.+16     	; 0x27e0 <LCD_sendCommand+0xb0>
		__ticks = 1;
    27d0:	fe 01       	movw	r30, r28
    27d2:	e7 5a       	subi	r30, 0xA7	; 167
    27d4:	ff 4f       	sbci	r31, 0xFF	; 255
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	91 83       	std	Z+1, r25	; 0x01
    27dc:	80 83       	st	Z, r24
    27de:	64 c0       	rjmp	.+200    	; 0x28a8 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    27e0:	fe 01       	movw	r30, r28
    27e2:	e5 5a       	subi	r30, 0xA5	; 165
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	60 81       	ld	r22, Z
    27e8:	71 81       	ldd	r23, Z+1	; 0x01
    27ea:	82 81       	ldd	r24, Z+2	; 0x02
    27ec:	93 81       	ldd	r25, Z+3	; 0x03
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	3f ef       	ldi	r19, 0xFF	; 255
    27f2:	4f e7       	ldi	r20, 0x7F	; 127
    27f4:	57 e4       	ldi	r21, 0x47	; 71
    27f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27fa:	18 16       	cp	r1, r24
    27fc:	0c f0       	brlt	.+2      	; 0x2800 <LCD_sendCommand+0xd0>
    27fe:	43 c0       	rjmp	.+134    	; 0x2886 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2800:	fe 01       	movw	r30, r28
    2802:	e1 5a       	subi	r30, 0xA1	; 161
    2804:	ff 4f       	sbci	r31, 0xFF	; 255
    2806:	60 81       	ld	r22, Z
    2808:	71 81       	ldd	r23, Z+1	; 0x01
    280a:	82 81       	ldd	r24, Z+2	; 0x02
    280c:	93 81       	ldd	r25, Z+3	; 0x03
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	40 e2       	ldi	r20, 0x20	; 32
    2814:	51 e4       	ldi	r21, 0x41	; 65
    2816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	8e 01       	movw	r16, r28
    2820:	07 5a       	subi	r16, 0xA7	; 167
    2822:	1f 4f       	sbci	r17, 0xFF	; 255
    2824:	bc 01       	movw	r22, r24
    2826:	cd 01       	movw	r24, r26
    2828:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	f8 01       	movw	r30, r16
    2832:	91 83       	std	Z+1, r25	; 0x01
    2834:	80 83       	st	Z, r24
    2836:	1f c0       	rjmp	.+62     	; 0x2876 <LCD_sendCommand+0x146>
    2838:	fe 01       	movw	r30, r28
    283a:	e9 5a       	subi	r30, 0xA9	; 169
    283c:	ff 4f       	sbci	r31, 0xFF	; 255
    283e:	89 e1       	ldi	r24, 0x19	; 25
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	91 83       	std	Z+1, r25	; 0x01
    2844:	80 83       	st	Z, r24
    2846:	fe 01       	movw	r30, r28
    2848:	e9 5a       	subi	r30, 0xA9	; 169
    284a:	ff 4f       	sbci	r31, 0xFF	; 255
    284c:	80 81       	ld	r24, Z
    284e:	91 81       	ldd	r25, Z+1	; 0x01
    2850:	01 97       	sbiw	r24, 0x01	; 1
    2852:	f1 f7       	brne	.-4      	; 0x2850 <LCD_sendCommand+0x120>
    2854:	fe 01       	movw	r30, r28
    2856:	e9 5a       	subi	r30, 0xA9	; 169
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	91 83       	std	Z+1, r25	; 0x01
    285c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    285e:	de 01       	movw	r26, r28
    2860:	a7 5a       	subi	r26, 0xA7	; 167
    2862:	bf 4f       	sbci	r27, 0xFF	; 255
    2864:	fe 01       	movw	r30, r28
    2866:	e7 5a       	subi	r30, 0xA7	; 167
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	80 81       	ld	r24, Z
    286c:	91 81       	ldd	r25, Z+1	; 0x01
    286e:	01 97       	sbiw	r24, 0x01	; 1
    2870:	11 96       	adiw	r26, 0x01	; 1
    2872:	9c 93       	st	X, r25
    2874:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2876:	fe 01       	movw	r30, r28
    2878:	e7 5a       	subi	r30, 0xA7	; 167
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	80 81       	ld	r24, Z
    287e:	91 81       	ldd	r25, Z+1	; 0x01
    2880:	00 97       	sbiw	r24, 0x00	; 0
    2882:	d1 f6       	brne	.-76     	; 0x2838 <LCD_sendCommand+0x108>
    2884:	27 c0       	rjmp	.+78     	; 0x28d4 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2886:	8e 01       	movw	r16, r28
    2888:	07 5a       	subi	r16, 0xA7	; 167
    288a:	1f 4f       	sbci	r17, 0xFF	; 255
    288c:	fe 01       	movw	r30, r28
    288e:	e5 5a       	subi	r30, 0xA5	; 165
    2890:	ff 4f       	sbci	r31, 0xFF	; 255
    2892:	60 81       	ld	r22, Z
    2894:	71 81       	ldd	r23, Z+1	; 0x01
    2896:	82 81       	ldd	r24, Z+2	; 0x02
    2898:	93 81       	ldd	r25, Z+3	; 0x03
    289a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	f8 01       	movw	r30, r16
    28a4:	91 83       	std	Z+1, r25	; 0x01
    28a6:	80 83       	st	Z, r24
    28a8:	de 01       	movw	r26, r28
    28aa:	ab 5a       	subi	r26, 0xAB	; 171
    28ac:	bf 4f       	sbci	r27, 0xFF	; 255
    28ae:	fe 01       	movw	r30, r28
    28b0:	e7 5a       	subi	r30, 0xA7	; 167
    28b2:	ff 4f       	sbci	r31, 0xFF	; 255
    28b4:	80 81       	ld	r24, Z
    28b6:	91 81       	ldd	r25, Z+1	; 0x01
    28b8:	8d 93       	st	X+, r24
    28ba:	9c 93       	st	X, r25
    28bc:	fe 01       	movw	r30, r28
    28be:	eb 5a       	subi	r30, 0xAB	; 171
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	80 81       	ld	r24, Z
    28c4:	91 81       	ldd	r25, Z+1	; 0x01
    28c6:	01 97       	sbiw	r24, 0x01	; 1
    28c8:	f1 f7       	brne	.-4      	; 0x28c6 <LCD_sendCommand+0x196>
    28ca:	fe 01       	movw	r30, r28
    28cc:	eb 5a       	subi	r30, 0xAB	; 171
    28ce:	ff 4f       	sbci	r31, 0xFF	; 255
    28d0:	91 83       	std	Z+1, r25	; 0x01
    28d2:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    28d4:	83 e0       	ldi	r24, 0x03	; 3
    28d6:	66 e0       	ldi	r22, 0x06	; 6
    28d8:	41 e0       	ldi	r20, 0x01	; 1
    28da:	0e 94 17 10 	call	0x202e	; 0x202e <GPIO_writePin>
    28de:	fe 01       	movw	r30, r28
    28e0:	ef 5a       	subi	r30, 0xAF	; 175
    28e2:	ff 4f       	sbci	r31, 0xFF	; 255
    28e4:	80 e0       	ldi	r24, 0x00	; 0
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	a0 e8       	ldi	r26, 0x80	; 128
    28ea:	bf e3       	ldi	r27, 0x3F	; 63
    28ec:	80 83       	st	Z, r24
    28ee:	91 83       	std	Z+1, r25	; 0x01
    28f0:	a2 83       	std	Z+2, r26	; 0x02
    28f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f4:	8e 01       	movw	r16, r28
    28f6:	03 5b       	subi	r16, 0xB3	; 179
    28f8:	1f 4f       	sbci	r17, 0xFF	; 255
    28fa:	fe 01       	movw	r30, r28
    28fc:	ef 5a       	subi	r30, 0xAF	; 175
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	60 81       	ld	r22, Z
    2902:	71 81       	ldd	r23, Z+1	; 0x01
    2904:	82 81       	ldd	r24, Z+2	; 0x02
    2906:	93 81       	ldd	r25, Z+3	; 0x03
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	4a e7       	ldi	r20, 0x7A	; 122
    290e:	53 e4       	ldi	r21, 0x43	; 67
    2910:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2914:	dc 01       	movw	r26, r24
    2916:	cb 01       	movw	r24, r22
    2918:	f8 01       	movw	r30, r16
    291a:	80 83       	st	Z, r24
    291c:	91 83       	std	Z+1, r25	; 0x01
    291e:	a2 83       	std	Z+2, r26	; 0x02
    2920:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2922:	fe 01       	movw	r30, r28
    2924:	e3 5b       	subi	r30, 0xB3	; 179
    2926:	ff 4f       	sbci	r31, 0xFF	; 255
    2928:	60 81       	ld	r22, Z
    292a:	71 81       	ldd	r23, Z+1	; 0x01
    292c:	82 81       	ldd	r24, Z+2	; 0x02
    292e:	93 81       	ldd	r25, Z+3	; 0x03
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	40 e8       	ldi	r20, 0x80	; 128
    2936:	5f e3       	ldi	r21, 0x3F	; 63
    2938:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    293c:	88 23       	and	r24, r24
    293e:	44 f4       	brge	.+16     	; 0x2950 <LCD_sendCommand+0x220>
		__ticks = 1;
    2940:	fe 01       	movw	r30, r28
    2942:	e5 5b       	subi	r30, 0xB5	; 181
    2944:	ff 4f       	sbci	r31, 0xFF	; 255
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	91 83       	std	Z+1, r25	; 0x01
    294c:	80 83       	st	Z, r24
    294e:	64 c0       	rjmp	.+200    	; 0x2a18 <LCD_sendCommand+0x2e8>
	else if (__tmp > 65535)
    2950:	fe 01       	movw	r30, r28
    2952:	e3 5b       	subi	r30, 0xB3	; 179
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	60 81       	ld	r22, Z
    2958:	71 81       	ldd	r23, Z+1	; 0x01
    295a:	82 81       	ldd	r24, Z+2	; 0x02
    295c:	93 81       	ldd	r25, Z+3	; 0x03
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	3f ef       	ldi	r19, 0xFF	; 255
    2962:	4f e7       	ldi	r20, 0x7F	; 127
    2964:	57 e4       	ldi	r21, 0x47	; 71
    2966:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    296a:	18 16       	cp	r1, r24
    296c:	0c f0       	brlt	.+2      	; 0x2970 <LCD_sendCommand+0x240>
    296e:	43 c0       	rjmp	.+134    	; 0x29f6 <LCD_sendCommand+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2970:	fe 01       	movw	r30, r28
    2972:	ef 5a       	subi	r30, 0xAF	; 175
    2974:	ff 4f       	sbci	r31, 0xFF	; 255
    2976:	60 81       	ld	r22, Z
    2978:	71 81       	ldd	r23, Z+1	; 0x01
    297a:	82 81       	ldd	r24, Z+2	; 0x02
    297c:	93 81       	ldd	r25, Z+3	; 0x03
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	40 e2       	ldi	r20, 0x20	; 32
    2984:	51 e4       	ldi	r21, 0x41	; 65
    2986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	8e 01       	movw	r16, r28
    2990:	05 5b       	subi	r16, 0xB5	; 181
    2992:	1f 4f       	sbci	r17, 0xFF	; 255
    2994:	bc 01       	movw	r22, r24
    2996:	cd 01       	movw	r24, r26
    2998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	f8 01       	movw	r30, r16
    29a2:	91 83       	std	Z+1, r25	; 0x01
    29a4:	80 83       	st	Z, r24
    29a6:	1f c0       	rjmp	.+62     	; 0x29e6 <LCD_sendCommand+0x2b6>
    29a8:	fe 01       	movw	r30, r28
    29aa:	e7 5b       	subi	r30, 0xB7	; 183
    29ac:	ff 4f       	sbci	r31, 0xFF	; 255
    29ae:	89 e1       	ldi	r24, 0x19	; 25
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	91 83       	std	Z+1, r25	; 0x01
    29b4:	80 83       	st	Z, r24
    29b6:	fe 01       	movw	r30, r28
    29b8:	e7 5b       	subi	r30, 0xB7	; 183
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	80 81       	ld	r24, Z
    29be:	91 81       	ldd	r25, Z+1	; 0x01
    29c0:	01 97       	sbiw	r24, 0x01	; 1
    29c2:	f1 f7       	brne	.-4      	; 0x29c0 <LCD_sendCommand+0x290>
    29c4:	fe 01       	movw	r30, r28
    29c6:	e7 5b       	subi	r30, 0xB7	; 183
    29c8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ca:	91 83       	std	Z+1, r25	; 0x01
    29cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ce:	de 01       	movw	r26, r28
    29d0:	a5 5b       	subi	r26, 0xB5	; 181
    29d2:	bf 4f       	sbci	r27, 0xFF	; 255
    29d4:	fe 01       	movw	r30, r28
    29d6:	e5 5b       	subi	r30, 0xB5	; 181
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	80 81       	ld	r24, Z
    29dc:	91 81       	ldd	r25, Z+1	; 0x01
    29de:	01 97       	sbiw	r24, 0x01	; 1
    29e0:	11 96       	adiw	r26, 0x01	; 1
    29e2:	9c 93       	st	X, r25
    29e4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e6:	fe 01       	movw	r30, r28
    29e8:	e5 5b       	subi	r30, 0xB5	; 181
    29ea:	ff 4f       	sbci	r31, 0xFF	; 255
    29ec:	80 81       	ld	r24, Z
    29ee:	91 81       	ldd	r25, Z+1	; 0x01
    29f0:	00 97       	sbiw	r24, 0x00	; 0
    29f2:	d1 f6       	brne	.-76     	; 0x29a8 <LCD_sendCommand+0x278>
    29f4:	27 c0       	rjmp	.+78     	; 0x2a44 <LCD_sendCommand+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f6:	8e 01       	movw	r16, r28
    29f8:	05 5b       	subi	r16, 0xB5	; 181
    29fa:	1f 4f       	sbci	r17, 0xFF	; 255
    29fc:	fe 01       	movw	r30, r28
    29fe:	e3 5b       	subi	r30, 0xB3	; 179
    2a00:	ff 4f       	sbci	r31, 0xFF	; 255
    2a02:	60 81       	ld	r22, Z
    2a04:	71 81       	ldd	r23, Z+1	; 0x01
    2a06:	82 81       	ldd	r24, Z+2	; 0x02
    2a08:	93 81       	ldd	r25, Z+3	; 0x03
    2a0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0e:	dc 01       	movw	r26, r24
    2a10:	cb 01       	movw	r24, r22
    2a12:	f8 01       	movw	r30, r16
    2a14:	91 83       	std	Z+1, r25	; 0x01
    2a16:	80 83       	st	Z, r24
    2a18:	de 01       	movw	r26, r28
    2a1a:	a9 5b       	subi	r26, 0xB9	; 185
    2a1c:	bf 4f       	sbci	r27, 0xFF	; 255
    2a1e:	fe 01       	movw	r30, r28
    2a20:	e5 5b       	subi	r30, 0xB5	; 181
    2a22:	ff 4f       	sbci	r31, 0xFF	; 255
    2a24:	80 81       	ld	r24, Z
    2a26:	91 81       	ldd	r25, Z+1	; 0x01
    2a28:	8d 93       	st	X+, r24
    2a2a:	9c 93       	st	X, r25
    2a2c:	fe 01       	movw	r30, r28
    2a2e:	e9 5b       	subi	r30, 0xB9	; 185
    2a30:	ff 4f       	sbci	r31, 0xFF	; 255
    2a32:	80 81       	ld	r24, Z
    2a34:	91 81       	ldd	r25, Z+1	; 0x01
    2a36:	01 97       	sbiw	r24, 0x01	; 1
    2a38:	f1 f7       	brne	.-4      	; 0x2a36 <LCD_sendCommand+0x306>
    2a3a:	fe 01       	movw	r30, r28
    2a3c:	e9 5b       	subi	r30, 0xB9	; 185
    2a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a40:	91 83       	std	Z+1, r25	; 0x01
    2a42:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required command to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	0e 94 25 12 	call	0x244a	; 0x244a <GPIO_readPort>
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	ed 59       	subi	r30, 0x9D	; 157
    2a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a50:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | (command & 0xF0);
    2a52:	fe 01       	movw	r30, r28
    2a54:	ed 59       	subi	r30, 0x9D	; 157
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	80 81       	ld	r24, Z
    2a5a:	98 2f       	mov	r25, r24
    2a5c:	9f 70       	andi	r25, 0x0F	; 15
    2a5e:	fe 01       	movw	r30, r28
    2a60:	ec 59       	subi	r30, 0x9C	; 156
    2a62:	ff 4f       	sbci	r31, 0xFF	; 255
    2a64:	80 81       	ld	r24, Z
    2a66:	80 7f       	andi	r24, 0xF0	; 240
    2a68:	89 2b       	or	r24, r25
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	ed 59       	subi	r30, 0x9D	; 157
    2a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a70:	80 83       	st	Z, r24
#else
	lcd_port_value = (lcd_port_value & 0xF0) | ((command & 0xF0) >> 4);
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    2a72:	fe 01       	movw	r30, r28
    2a74:	ed 59       	subi	r30, 0x9D	; 157
    2a76:	ff 4f       	sbci	r31, 0xFF	; 255
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	60 81       	ld	r22, Z
    2a7c:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <GPIO_writePort>
    2a80:	fe 01       	movw	r30, r28
    2a82:	ed 5b       	subi	r30, 0xBD	; 189
    2a84:	ff 4f       	sbci	r31, 0xFF	; 255
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	a0 e8       	ldi	r26, 0x80	; 128
    2a8c:	bf e3       	ldi	r27, 0x3F	; 63
    2a8e:	80 83       	st	Z, r24
    2a90:	91 83       	std	Z+1, r25	; 0x01
    2a92:	a2 83       	std	Z+2, r26	; 0x02
    2a94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a96:	8e 01       	movw	r16, r28
    2a98:	01 5c       	subi	r16, 0xC1	; 193
    2a9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	ed 5b       	subi	r30, 0xBD	; 189
    2aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa2:	60 81       	ld	r22, Z
    2aa4:	71 81       	ldd	r23, Z+1	; 0x01
    2aa6:	82 81       	ldd	r24, Z+2	; 0x02
    2aa8:	93 81       	ldd	r25, Z+3	; 0x03
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	4a e7       	ldi	r20, 0x7A	; 122
    2ab0:	53 e4       	ldi	r21, 0x43	; 67
    2ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	f8 01       	movw	r30, r16
    2abc:	80 83       	st	Z, r24
    2abe:	91 83       	std	Z+1, r25	; 0x01
    2ac0:	a2 83       	std	Z+2, r26	; 0x02
    2ac2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ac4:	fe 01       	movw	r30, r28
    2ac6:	ff 96       	adiw	r30, 0x3f	; 63
    2ac8:	60 81       	ld	r22, Z
    2aca:	71 81       	ldd	r23, Z+1	; 0x01
    2acc:	82 81       	ldd	r24, Z+2	; 0x02
    2ace:	93 81       	ldd	r25, Z+3	; 0x03
    2ad0:	20 e0       	ldi	r18, 0x00	; 0
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	40 e8       	ldi	r20, 0x80	; 128
    2ad6:	5f e3       	ldi	r21, 0x3F	; 63
    2ad8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2adc:	88 23       	and	r24, r24
    2ade:	2c f4       	brge	.+10     	; 0x2aea <LCD_sendCommand+0x3ba>
		__ticks = 1;
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	9e af       	std	Y+62, r25	; 0x3e
    2ae6:	8d af       	std	Y+61, r24	; 0x3d
    2ae8:	46 c0       	rjmp	.+140    	; 0x2b76 <LCD_sendCommand+0x446>
	else if (__tmp > 65535)
    2aea:	fe 01       	movw	r30, r28
    2aec:	ff 96       	adiw	r30, 0x3f	; 63
    2aee:	60 81       	ld	r22, Z
    2af0:	71 81       	ldd	r23, Z+1	; 0x01
    2af2:	82 81       	ldd	r24, Z+2	; 0x02
    2af4:	93 81       	ldd	r25, Z+3	; 0x03
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	3f ef       	ldi	r19, 0xFF	; 255
    2afa:	4f e7       	ldi	r20, 0x7F	; 127
    2afc:	57 e4       	ldi	r21, 0x47	; 71
    2afe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b02:	18 16       	cp	r1, r24
    2b04:	64 f5       	brge	.+88     	; 0x2b5e <LCD_sendCommand+0x42e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b06:	fe 01       	movw	r30, r28
    2b08:	ed 5b       	subi	r30, 0xBD	; 189
    2b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0c:	60 81       	ld	r22, Z
    2b0e:	71 81       	ldd	r23, Z+1	; 0x01
    2b10:	82 81       	ldd	r24, Z+2	; 0x02
    2b12:	93 81       	ldd	r25, Z+3	; 0x03
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	40 e2       	ldi	r20, 0x20	; 32
    2b1a:	51 e4       	ldi	r21, 0x41	; 65
    2b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	bc 01       	movw	r22, r24
    2b26:	cd 01       	movw	r24, r26
    2b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b2c:	dc 01       	movw	r26, r24
    2b2e:	cb 01       	movw	r24, r22
    2b30:	9e af       	std	Y+62, r25	; 0x3e
    2b32:	8d af       	std	Y+61, r24	; 0x3d
    2b34:	0f c0       	rjmp	.+30     	; 0x2b54 <LCD_sendCommand+0x424>
    2b36:	89 e1       	ldi	r24, 0x19	; 25
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	9c af       	std	Y+60, r25	; 0x3c
    2b3c:	8b af       	std	Y+59, r24	; 0x3b
    2b3e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2b40:	9c ad       	ldd	r25, Y+60	; 0x3c
    2b42:	01 97       	sbiw	r24, 0x01	; 1
    2b44:	f1 f7       	brne	.-4      	; 0x2b42 <LCD_sendCommand+0x412>
    2b46:	9c af       	std	Y+60, r25	; 0x3c
    2b48:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b4a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b4c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b4e:	01 97       	sbiw	r24, 0x01	; 1
    2b50:	9e af       	std	Y+62, r25	; 0x3e
    2b52:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b54:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b56:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b58:	00 97       	sbiw	r24, 0x00	; 0
    2b5a:	69 f7       	brne	.-38     	; 0x2b36 <LCD_sendCommand+0x406>
    2b5c:	16 c0       	rjmp	.+44     	; 0x2b8a <LCD_sendCommand+0x45a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b5e:	fe 01       	movw	r30, r28
    2b60:	ff 96       	adiw	r30, 0x3f	; 63
    2b62:	60 81       	ld	r22, Z
    2b64:	71 81       	ldd	r23, Z+1	; 0x01
    2b66:	82 81       	ldd	r24, Z+2	; 0x02
    2b68:	93 81       	ldd	r25, Z+3	; 0x03
    2b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6e:	dc 01       	movw	r26, r24
    2b70:	cb 01       	movw	r24, r22
    2b72:	9e af       	std	Y+62, r25	; 0x3e
    2b74:	8d af       	std	Y+61, r24	; 0x3d
    2b76:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b78:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b7a:	9a af       	std	Y+58, r25	; 0x3a
    2b7c:	89 af       	std	Y+57, r24	; 0x39
    2b7e:	89 ad       	ldd	r24, Y+57	; 0x39
    2b80:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b82:	01 97       	sbiw	r24, 0x01	; 1
    2b84:	f1 f7       	brne	.-4      	; 0x2b82 <LCD_sendCommand+0x452>
    2b86:	9a af       	std	Y+58, r25	; 0x3a
    2b88:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2b8a:	83 e0       	ldi	r24, 0x03	; 3
    2b8c:	66 e0       	ldi	r22, 0x06	; 6
    2b8e:	40 e0       	ldi	r20, 0x00	; 0
    2b90:	0e 94 17 10 	call	0x202e	; 0x202e <GPIO_writePin>
    2b94:	80 e0       	ldi	r24, 0x00	; 0
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	a0 e8       	ldi	r26, 0x80	; 128
    2b9a:	bf e3       	ldi	r27, 0x3F	; 63
    2b9c:	8d ab       	std	Y+53, r24	; 0x35
    2b9e:	9e ab       	std	Y+54, r25	; 0x36
    2ba0:	af ab       	std	Y+55, r26	; 0x37
    2ba2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ba4:	6d a9       	ldd	r22, Y+53	; 0x35
    2ba6:	7e a9       	ldd	r23, Y+54	; 0x36
    2ba8:	8f a9       	ldd	r24, Y+55	; 0x37
    2baa:	98 ad       	ldd	r25, Y+56	; 0x38
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	4a e7       	ldi	r20, 0x7A	; 122
    2bb2:	53 e4       	ldi	r21, 0x43	; 67
    2bb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb8:	dc 01       	movw	r26, r24
    2bba:	cb 01       	movw	r24, r22
    2bbc:	89 ab       	std	Y+49, r24	; 0x31
    2bbe:	9a ab       	std	Y+50, r25	; 0x32
    2bc0:	ab ab       	std	Y+51, r26	; 0x33
    2bc2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2bc4:	69 a9       	ldd	r22, Y+49	; 0x31
    2bc6:	7a a9       	ldd	r23, Y+50	; 0x32
    2bc8:	8b a9       	ldd	r24, Y+51	; 0x33
    2bca:	9c a9       	ldd	r25, Y+52	; 0x34
    2bcc:	20 e0       	ldi	r18, 0x00	; 0
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	40 e8       	ldi	r20, 0x80	; 128
    2bd2:	5f e3       	ldi	r21, 0x3F	; 63
    2bd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bd8:	88 23       	and	r24, r24
    2bda:	2c f4       	brge	.+10     	; 0x2be6 <LCD_sendCommand+0x4b6>
		__ticks = 1;
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	98 ab       	std	Y+48, r25	; 0x30
    2be2:	8f a7       	std	Y+47, r24	; 0x2f
    2be4:	3f c0       	rjmp	.+126    	; 0x2c64 <LCD_sendCommand+0x534>
	else if (__tmp > 65535)
    2be6:	69 a9       	ldd	r22, Y+49	; 0x31
    2be8:	7a a9       	ldd	r23, Y+50	; 0x32
    2bea:	8b a9       	ldd	r24, Y+51	; 0x33
    2bec:	9c a9       	ldd	r25, Y+52	; 0x34
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	3f ef       	ldi	r19, 0xFF	; 255
    2bf2:	4f e7       	ldi	r20, 0x7F	; 127
    2bf4:	57 e4       	ldi	r21, 0x47	; 71
    2bf6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bfa:	18 16       	cp	r1, r24
    2bfc:	4c f5       	brge	.+82     	; 0x2c50 <LCD_sendCommand+0x520>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bfe:	6d a9       	ldd	r22, Y+53	; 0x35
    2c00:	7e a9       	ldd	r23, Y+54	; 0x36
    2c02:	8f a9       	ldd	r24, Y+55	; 0x37
    2c04:	98 ad       	ldd	r25, Y+56	; 0x38
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	40 e2       	ldi	r20, 0x20	; 32
    2c0c:	51 e4       	ldi	r21, 0x41	; 65
    2c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	bc 01       	movw	r22, r24
    2c18:	cd 01       	movw	r24, r26
    2c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1e:	dc 01       	movw	r26, r24
    2c20:	cb 01       	movw	r24, r22
    2c22:	98 ab       	std	Y+48, r25	; 0x30
    2c24:	8f a7       	std	Y+47, r24	; 0x2f
    2c26:	0f c0       	rjmp	.+30     	; 0x2c46 <LCD_sendCommand+0x516>
    2c28:	89 e1       	ldi	r24, 0x19	; 25
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	9e a7       	std	Y+46, r25	; 0x2e
    2c2e:	8d a7       	std	Y+45, r24	; 0x2d
    2c30:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c32:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c34:	01 97       	sbiw	r24, 0x01	; 1
    2c36:	f1 f7       	brne	.-4      	; 0x2c34 <LCD_sendCommand+0x504>
    2c38:	9e a7       	std	Y+46, r25	; 0x2e
    2c3a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c3e:	98 a9       	ldd	r25, Y+48	; 0x30
    2c40:	01 97       	sbiw	r24, 0x01	; 1
    2c42:	98 ab       	std	Y+48, r25	; 0x30
    2c44:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c46:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c48:	98 a9       	ldd	r25, Y+48	; 0x30
    2c4a:	00 97       	sbiw	r24, 0x00	; 0
    2c4c:	69 f7       	brne	.-38     	; 0x2c28 <LCD_sendCommand+0x4f8>
    2c4e:	14 c0       	rjmp	.+40     	; 0x2c78 <LCD_sendCommand+0x548>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c50:	69 a9       	ldd	r22, Y+49	; 0x31
    2c52:	7a a9       	ldd	r23, Y+50	; 0x32
    2c54:	8b a9       	ldd	r24, Y+51	; 0x33
    2c56:	9c a9       	ldd	r25, Y+52	; 0x34
    2c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	98 ab       	std	Y+48, r25	; 0x30
    2c62:	8f a7       	std	Y+47, r24	; 0x2f
    2c64:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c66:	98 a9       	ldd	r25, Y+48	; 0x30
    2c68:	9c a7       	std	Y+44, r25	; 0x2c
    2c6a:	8b a7       	std	Y+43, r24	; 0x2b
    2c6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c6e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c70:	01 97       	sbiw	r24, 0x01	; 1
    2c72:	f1 f7       	brne	.-4      	; 0x2c70 <LCD_sendCommand+0x540>
    2c74:	9c a7       	std	Y+44, r25	; 0x2c
    2c76:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2c78:	83 e0       	ldi	r24, 0x03	; 3
    2c7a:	66 e0       	ldi	r22, 0x06	; 6
    2c7c:	41 e0       	ldi	r20, 0x01	; 1
    2c7e:	0e 94 17 10 	call	0x202e	; 0x202e <GPIO_writePin>
    2c82:	80 e0       	ldi	r24, 0x00	; 0
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	a0 e8       	ldi	r26, 0x80	; 128
    2c88:	bf e3       	ldi	r27, 0x3F	; 63
    2c8a:	8f a3       	std	Y+39, r24	; 0x27
    2c8c:	98 a7       	std	Y+40, r25	; 0x28
    2c8e:	a9 a7       	std	Y+41, r26	; 0x29
    2c90:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c92:	6f a1       	ldd	r22, Y+39	; 0x27
    2c94:	78 a5       	ldd	r23, Y+40	; 0x28
    2c96:	89 a5       	ldd	r24, Y+41	; 0x29
    2c98:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	4a e7       	ldi	r20, 0x7A	; 122
    2ca0:	53 e4       	ldi	r21, 0x43	; 67
    2ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	cb 01       	movw	r24, r22
    2caa:	8b a3       	std	Y+35, r24	; 0x23
    2cac:	9c a3       	std	Y+36, r25	; 0x24
    2cae:	ad a3       	std	Y+37, r26	; 0x25
    2cb0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2cb2:	6b a1       	ldd	r22, Y+35	; 0x23
    2cb4:	7c a1       	ldd	r23, Y+36	; 0x24
    2cb6:	8d a1       	ldd	r24, Y+37	; 0x25
    2cb8:	9e a1       	ldd	r25, Y+38	; 0x26
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	40 e8       	ldi	r20, 0x80	; 128
    2cc0:	5f e3       	ldi	r21, 0x3F	; 63
    2cc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cc6:	88 23       	and	r24, r24
    2cc8:	2c f4       	brge	.+10     	; 0x2cd4 <LCD_sendCommand+0x5a4>
		__ticks = 1;
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	9a a3       	std	Y+34, r25	; 0x22
    2cd0:	89 a3       	std	Y+33, r24	; 0x21
    2cd2:	3f c0       	rjmp	.+126    	; 0x2d52 <LCD_sendCommand+0x622>
	else if (__tmp > 65535)
    2cd4:	6b a1       	ldd	r22, Y+35	; 0x23
    2cd6:	7c a1       	ldd	r23, Y+36	; 0x24
    2cd8:	8d a1       	ldd	r24, Y+37	; 0x25
    2cda:	9e a1       	ldd	r25, Y+38	; 0x26
    2cdc:	20 e0       	ldi	r18, 0x00	; 0
    2cde:	3f ef       	ldi	r19, 0xFF	; 255
    2ce0:	4f e7       	ldi	r20, 0x7F	; 127
    2ce2:	57 e4       	ldi	r21, 0x47	; 71
    2ce4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ce8:	18 16       	cp	r1, r24
    2cea:	4c f5       	brge	.+82     	; 0x2d3e <LCD_sendCommand+0x60e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cec:	6f a1       	ldd	r22, Y+39	; 0x27
    2cee:	78 a5       	ldd	r23, Y+40	; 0x28
    2cf0:	89 a5       	ldd	r24, Y+41	; 0x29
    2cf2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	40 e2       	ldi	r20, 0x20	; 32
    2cfa:	51 e4       	ldi	r21, 0x41	; 65
    2cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	bc 01       	movw	r22, r24
    2d06:	cd 01       	movw	r24, r26
    2d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0c:	dc 01       	movw	r26, r24
    2d0e:	cb 01       	movw	r24, r22
    2d10:	9a a3       	std	Y+34, r25	; 0x22
    2d12:	89 a3       	std	Y+33, r24	; 0x21
    2d14:	0f c0       	rjmp	.+30     	; 0x2d34 <LCD_sendCommand+0x604>
    2d16:	89 e1       	ldi	r24, 0x19	; 25
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	98 a3       	std	Y+32, r25	; 0x20
    2d1c:	8f 8f       	std	Y+31, r24	; 0x1f
    2d1e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d20:	98 a1       	ldd	r25, Y+32	; 0x20
    2d22:	01 97       	sbiw	r24, 0x01	; 1
    2d24:	f1 f7       	brne	.-4      	; 0x2d22 <LCD_sendCommand+0x5f2>
    2d26:	98 a3       	std	Y+32, r25	; 0x20
    2d28:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d2a:	89 a1       	ldd	r24, Y+33	; 0x21
    2d2c:	9a a1       	ldd	r25, Y+34	; 0x22
    2d2e:	01 97       	sbiw	r24, 0x01	; 1
    2d30:	9a a3       	std	Y+34, r25	; 0x22
    2d32:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d34:	89 a1       	ldd	r24, Y+33	; 0x21
    2d36:	9a a1       	ldd	r25, Y+34	; 0x22
    2d38:	00 97       	sbiw	r24, 0x00	; 0
    2d3a:	69 f7       	brne	.-38     	; 0x2d16 <LCD_sendCommand+0x5e6>
    2d3c:	14 c0       	rjmp	.+40     	; 0x2d66 <LCD_sendCommand+0x636>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d3e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d40:	7c a1       	ldd	r23, Y+36	; 0x24
    2d42:	8d a1       	ldd	r24, Y+37	; 0x25
    2d44:	9e a1       	ldd	r25, Y+38	; 0x26
    2d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	9a a3       	std	Y+34, r25	; 0x22
    2d50:	89 a3       	std	Y+33, r24	; 0x21
    2d52:	89 a1       	ldd	r24, Y+33	; 0x21
    2d54:	9a a1       	ldd	r25, Y+34	; 0x22
    2d56:	9e 8f       	std	Y+30, r25	; 0x1e
    2d58:	8d 8f       	std	Y+29, r24	; 0x1d
    2d5a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d5c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d5e:	01 97       	sbiw	r24, 0x01	; 1
    2d60:	f1 f7       	brne	.-4      	; 0x2d5e <LCD_sendCommand+0x62e>
    2d62:	9e 8f       	std	Y+30, r25	; 0x1e
    2d64:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the first 4 bits of the required command to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	0e 94 25 12 	call	0x244a	; 0x244a <GPIO_readPort>
    2d6c:	fe 01       	movw	r30, r28
    2d6e:	ed 59       	subi	r30, 0x9D	; 157
    2d70:	ff 4f       	sbci	r31, 0xFF	; 255
    2d72:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | ((command & 0x0F) << 4);
    2d74:	fe 01       	movw	r30, r28
    2d76:	ed 59       	subi	r30, 0x9D	; 157
    2d78:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7a:	80 81       	ld	r24, Z
    2d7c:	28 2f       	mov	r18, r24
    2d7e:	2f 70       	andi	r18, 0x0F	; 15
    2d80:	fe 01       	movw	r30, r28
    2d82:	ec 59       	subi	r30, 0x9C	; 156
    2d84:	ff 4f       	sbci	r31, 0xFF	; 255
    2d86:	80 81       	ld	r24, Z
    2d88:	88 2f       	mov	r24, r24
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	82 95       	swap	r24
    2d8e:	92 95       	swap	r25
    2d90:	90 7f       	andi	r25, 0xF0	; 240
    2d92:	98 27       	eor	r25, r24
    2d94:	80 7f       	andi	r24, 0xF0	; 240
    2d96:	98 27       	eor	r25, r24
    2d98:	82 2b       	or	r24, r18
    2d9a:	fe 01       	movw	r30, r28
    2d9c:	ed 59       	subi	r30, 0x9D	; 157
    2d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2da0:	80 83       	st	Z, r24
#else
	lcd_port_value = (lcd_port_value & 0xF0) | (command & 0x0F);
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    2da2:	fe 01       	movw	r30, r28
    2da4:	ed 59       	subi	r30, 0x9D	; 157
    2da6:	ff 4f       	sbci	r31, 0xFF	; 255
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	60 81       	ld	r22, Z
    2dac:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <GPIO_writePort>
    2db0:	80 e0       	ldi	r24, 0x00	; 0
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	a0 e8       	ldi	r26, 0x80	; 128
    2db6:	bf e3       	ldi	r27, 0x3F	; 63
    2db8:	89 8f       	std	Y+25, r24	; 0x19
    2dba:	9a 8f       	std	Y+26, r25	; 0x1a
    2dbc:	ab 8f       	std	Y+27, r26	; 0x1b
    2dbe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dc0:	69 8d       	ldd	r22, Y+25	; 0x19
    2dc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dc8:	20 e0       	ldi	r18, 0x00	; 0
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    2dcc:	4a e7       	ldi	r20, 0x7A	; 122
    2dce:	53 e4       	ldi	r21, 0x43	; 67
    2dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	8d 8b       	std	Y+21, r24	; 0x15
    2dda:	9e 8b       	std	Y+22, r25	; 0x16
    2ddc:	af 8b       	std	Y+23, r26	; 0x17
    2dde:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2de0:	6d 89       	ldd	r22, Y+21	; 0x15
    2de2:	7e 89       	ldd	r23, Y+22	; 0x16
    2de4:	8f 89       	ldd	r24, Y+23	; 0x17
    2de6:	98 8d       	ldd	r25, Y+24	; 0x18
    2de8:	20 e0       	ldi	r18, 0x00	; 0
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	40 e8       	ldi	r20, 0x80	; 128
    2dee:	5f e3       	ldi	r21, 0x3F	; 63
    2df0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2df4:	88 23       	and	r24, r24
    2df6:	2c f4       	brge	.+10     	; 0x2e02 <LCD_sendCommand+0x6d2>
		__ticks = 1;
    2df8:	81 e0       	ldi	r24, 0x01	; 1
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	9c 8b       	std	Y+20, r25	; 0x14
    2dfe:	8b 8b       	std	Y+19, r24	; 0x13
    2e00:	3f c0       	rjmp	.+126    	; 0x2e80 <LCD_sendCommand+0x750>
	else if (__tmp > 65535)
    2e02:	6d 89       	ldd	r22, Y+21	; 0x15
    2e04:	7e 89       	ldd	r23, Y+22	; 0x16
    2e06:	8f 89       	ldd	r24, Y+23	; 0x17
    2e08:	98 8d       	ldd	r25, Y+24	; 0x18
    2e0a:	20 e0       	ldi	r18, 0x00	; 0
    2e0c:	3f ef       	ldi	r19, 0xFF	; 255
    2e0e:	4f e7       	ldi	r20, 0x7F	; 127
    2e10:	57 e4       	ldi	r21, 0x47	; 71
    2e12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e16:	18 16       	cp	r1, r24
    2e18:	4c f5       	brge	.+82     	; 0x2e6c <LCD_sendCommand+0x73c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e1a:	69 8d       	ldd	r22, Y+25	; 0x19
    2e1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e22:	20 e0       	ldi	r18, 0x00	; 0
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	40 e2       	ldi	r20, 0x20	; 32
    2e28:	51 e4       	ldi	r21, 0x41	; 65
    2e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e2e:	dc 01       	movw	r26, r24
    2e30:	cb 01       	movw	r24, r22
    2e32:	bc 01       	movw	r22, r24
    2e34:	cd 01       	movw	r24, r26
    2e36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3a:	dc 01       	movw	r26, r24
    2e3c:	cb 01       	movw	r24, r22
    2e3e:	9c 8b       	std	Y+20, r25	; 0x14
    2e40:	8b 8b       	std	Y+19, r24	; 0x13
    2e42:	0f c0       	rjmp	.+30     	; 0x2e62 <LCD_sendCommand+0x732>
    2e44:	89 e1       	ldi	r24, 0x19	; 25
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	9a 8b       	std	Y+18, r25	; 0x12
    2e4a:	89 8b       	std	Y+17, r24	; 0x11
    2e4c:	89 89       	ldd	r24, Y+17	; 0x11
    2e4e:	9a 89       	ldd	r25, Y+18	; 0x12
    2e50:	01 97       	sbiw	r24, 0x01	; 1
    2e52:	f1 f7       	brne	.-4      	; 0x2e50 <LCD_sendCommand+0x720>
    2e54:	9a 8b       	std	Y+18, r25	; 0x12
    2e56:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e58:	8b 89       	ldd	r24, Y+19	; 0x13
    2e5a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e5c:	01 97       	sbiw	r24, 0x01	; 1
    2e5e:	9c 8b       	std	Y+20, r25	; 0x14
    2e60:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e62:	8b 89       	ldd	r24, Y+19	; 0x13
    2e64:	9c 89       	ldd	r25, Y+20	; 0x14
    2e66:	00 97       	sbiw	r24, 0x00	; 0
    2e68:	69 f7       	brne	.-38     	; 0x2e44 <LCD_sendCommand+0x714>
    2e6a:	14 c0       	rjmp	.+40     	; 0x2e94 <LCD_sendCommand+0x764>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e6c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e6e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e70:	8f 89       	ldd	r24, Y+23	; 0x17
    2e72:	98 8d       	ldd	r25, Y+24	; 0x18
    2e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e78:	dc 01       	movw	r26, r24
    2e7a:	cb 01       	movw	r24, r22
    2e7c:	9c 8b       	std	Y+20, r25	; 0x14
    2e7e:	8b 8b       	std	Y+19, r24	; 0x13
    2e80:	8b 89       	ldd	r24, Y+19	; 0x13
    2e82:	9c 89       	ldd	r25, Y+20	; 0x14
    2e84:	98 8b       	std	Y+16, r25	; 0x10
    2e86:	8f 87       	std	Y+15, r24	; 0x0f
    2e88:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e8a:	98 89       	ldd	r25, Y+16	; 0x10
    2e8c:	01 97       	sbiw	r24, 0x01	; 1
    2e8e:	f1 f7       	brne	.-4      	; 0x2e8c <LCD_sendCommand+0x75c>
    2e90:	98 8b       	std	Y+16, r25	; 0x10
    2e92:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2e94:	83 e0       	ldi	r24, 0x03	; 3
    2e96:	66 e0       	ldi	r22, 0x06	; 6
    2e98:	40 e0       	ldi	r20, 0x00	; 0
    2e9a:	0e 94 17 10 	call	0x202e	; 0x202e <GPIO_writePin>
    2e9e:	80 e0       	ldi	r24, 0x00	; 0
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	a0 e8       	ldi	r26, 0x80	; 128
    2ea4:	bf e3       	ldi	r27, 0x3F	; 63
    2ea6:	8b 87       	std	Y+11, r24	; 0x0b
    2ea8:	9c 87       	std	Y+12, r25	; 0x0c
    2eaa:	ad 87       	std	Y+13, r26	; 0x0d
    2eac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eae:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eb6:	20 e0       	ldi	r18, 0x00	; 0
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	4a e7       	ldi	r20, 0x7A	; 122
    2ebc:	53 e4       	ldi	r21, 0x43	; 67
    2ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	cb 01       	movw	r24, r22
    2ec6:	8f 83       	std	Y+7, r24	; 0x07
    2ec8:	98 87       	std	Y+8, r25	; 0x08
    2eca:	a9 87       	std	Y+9, r26	; 0x09
    2ecc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ece:	6f 81       	ldd	r22, Y+7	; 0x07
    2ed0:	78 85       	ldd	r23, Y+8	; 0x08
    2ed2:	89 85       	ldd	r24, Y+9	; 0x09
    2ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed6:	20 e0       	ldi	r18, 0x00	; 0
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	40 e8       	ldi	r20, 0x80	; 128
    2edc:	5f e3       	ldi	r21, 0x3F	; 63
    2ede:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ee2:	88 23       	and	r24, r24
    2ee4:	2c f4       	brge	.+10     	; 0x2ef0 <LCD_sendCommand+0x7c0>
		__ticks = 1;
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	9e 83       	std	Y+6, r25	; 0x06
    2eec:	8d 83       	std	Y+5, r24	; 0x05
    2eee:	3f c0       	rjmp	.+126    	; 0x2f6e <LCD_sendCommand+0x83e>
	else if (__tmp > 65535)
    2ef0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef2:	78 85       	ldd	r23, Y+8	; 0x08
    2ef4:	89 85       	ldd	r24, Y+9	; 0x09
    2ef6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef8:	20 e0       	ldi	r18, 0x00	; 0
    2efa:	3f ef       	ldi	r19, 0xFF	; 255
    2efc:	4f e7       	ldi	r20, 0x7F	; 127
    2efe:	57 e4       	ldi	r21, 0x47	; 71
    2f00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f04:	18 16       	cp	r1, r24
    2f06:	4c f5       	brge	.+82     	; 0x2f5a <LCD_sendCommand+0x82a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f08:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f10:	20 e0       	ldi	r18, 0x00	; 0
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	40 e2       	ldi	r20, 0x20	; 32
    2f16:	51 e4       	ldi	r21, 0x41	; 65
    2f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f1c:	dc 01       	movw	r26, r24
    2f1e:	cb 01       	movw	r24, r22
    2f20:	bc 01       	movw	r22, r24
    2f22:	cd 01       	movw	r24, r26
    2f24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f28:	dc 01       	movw	r26, r24
    2f2a:	cb 01       	movw	r24, r22
    2f2c:	9e 83       	std	Y+6, r25	; 0x06
    2f2e:	8d 83       	std	Y+5, r24	; 0x05
    2f30:	0f c0       	rjmp	.+30     	; 0x2f50 <LCD_sendCommand+0x820>
    2f32:	89 e1       	ldi	r24, 0x19	; 25
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	9c 83       	std	Y+4, r25	; 0x04
    2f38:	8b 83       	std	Y+3, r24	; 0x03
    2f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f3e:	01 97       	sbiw	r24, 0x01	; 1
    2f40:	f1 f7       	brne	.-4      	; 0x2f3e <LCD_sendCommand+0x80e>
    2f42:	9c 83       	std	Y+4, r25	; 0x04
    2f44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f46:	8d 81       	ldd	r24, Y+5	; 0x05
    2f48:	9e 81       	ldd	r25, Y+6	; 0x06
    2f4a:	01 97       	sbiw	r24, 0x01	; 1
    2f4c:	9e 83       	std	Y+6, r25	; 0x06
    2f4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f50:	8d 81       	ldd	r24, Y+5	; 0x05
    2f52:	9e 81       	ldd	r25, Y+6	; 0x06
    2f54:	00 97       	sbiw	r24, 0x00	; 0
    2f56:	69 f7       	brne	.-38     	; 0x2f32 <LCD_sendCommand+0x802>
    2f58:	14 c0       	rjmp	.+40     	; 0x2f82 <LCD_sendCommand+0x852>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f5c:	78 85       	ldd	r23, Y+8	; 0x08
    2f5e:	89 85       	ldd	r24, Y+9	; 0x09
    2f60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f66:	dc 01       	movw	r26, r24
    2f68:	cb 01       	movw	r24, r22
    2f6a:	9e 83       	std	Y+6, r25	; 0x06
    2f6c:	8d 83       	std	Y+5, r24	; 0x05
    2f6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f70:	9e 81       	ldd	r25, Y+6	; 0x06
    2f72:	9a 83       	std	Y+2, r25	; 0x02
    2f74:	89 83       	std	Y+1, r24	; 0x01
    2f76:	89 81       	ldd	r24, Y+1	; 0x01
    2f78:	9a 81       	ldd	r25, Y+2	; 0x02
    2f7a:	01 97       	sbiw	r24, 0x01	; 1
    2f7c:	f1 f7       	brne	.-4      	; 0x2f7a <LCD_sendCommand+0x84a>
    2f7e:	9a 83       	std	Y+2, r25	; 0x02
    2f80:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2f82:	cc 59       	subi	r28, 0x9C	; 156
    2f84:	df 4f       	sbci	r29, 0xFF	; 255
    2f86:	0f b6       	in	r0, 0x3f	; 63
    2f88:	f8 94       	cli
    2f8a:	de bf       	out	0x3e, r29	; 62
    2f8c:	0f be       	out	0x3f, r0	; 63
    2f8e:	cd bf       	out	0x3d, r28	; 61
    2f90:	cf 91       	pop	r28
    2f92:	df 91       	pop	r29
    2f94:	1f 91       	pop	r17
    2f96:	0f 91       	pop	r16
    2f98:	08 95       	ret

00002f9a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2f9a:	0f 93       	push	r16
    2f9c:	1f 93       	push	r17
    2f9e:	df 93       	push	r29
    2fa0:	cf 93       	push	r28
    2fa2:	cd b7       	in	r28, 0x3d	; 61
    2fa4:	de b7       	in	r29, 0x3e	; 62
    2fa6:	c4 56       	subi	r28, 0x64	; 100
    2fa8:	d0 40       	sbci	r29, 0x00	; 0
    2faa:	0f b6       	in	r0, 0x3f	; 63
    2fac:	f8 94       	cli
    2fae:	de bf       	out	0x3e, r29	; 62
    2fb0:	0f be       	out	0x3f, r0	; 63
    2fb2:	cd bf       	out	0x3d, r28	; 61
    2fb4:	fe 01       	movw	r30, r28
    2fb6:	ec 59       	subi	r30, 0x9C	; 156
    2fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fba:	80 83       	st	Z, r24
	uint8 lcd_port_value = 0;
    2fbc:	fe 01       	movw	r30, r28
    2fbe:	ed 59       	subi	r30, 0x9D	; 157
    2fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc2:	10 82       	st	Z, r1
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2fc4:	83 e0       	ldi	r24, 0x03	; 3
    2fc6:	64 e0       	ldi	r22, 0x04	; 4
    2fc8:	41 e0       	ldi	r20, 0x01	; 1
    2fca:	0e 94 17 10 	call	0x202e	; 0x202e <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2fce:	83 e0       	ldi	r24, 0x03	; 3
    2fd0:	65 e0       	ldi	r22, 0x05	; 5
    2fd2:	40 e0       	ldi	r20, 0x00	; 0
    2fd4:	0e 94 17 10 	call	0x202e	; 0x202e <GPIO_writePin>
    2fd8:	fe 01       	movw	r30, r28
    2fda:	e1 5a       	subi	r30, 0xA1	; 161
    2fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fde:	80 e0       	ldi	r24, 0x00	; 0
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	a0 e8       	ldi	r26, 0x80	; 128
    2fe4:	bf e3       	ldi	r27, 0x3F	; 63
    2fe6:	80 83       	st	Z, r24
    2fe8:	91 83       	std	Z+1, r25	; 0x01
    2fea:	a2 83       	std	Z+2, r26	; 0x02
    2fec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fee:	8e 01       	movw	r16, r28
    2ff0:	05 5a       	subi	r16, 0xA5	; 165
    2ff2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ff4:	fe 01       	movw	r30, r28
    2ff6:	e1 5a       	subi	r30, 0xA1	; 161
    2ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffa:	60 81       	ld	r22, Z
    2ffc:	71 81       	ldd	r23, Z+1	; 0x01
    2ffe:	82 81       	ldd	r24, Z+2	; 0x02
    3000:	93 81       	ldd	r25, Z+3	; 0x03
    3002:	20 e0       	ldi	r18, 0x00	; 0
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	4a e7       	ldi	r20, 0x7A	; 122
    3008:	53 e4       	ldi	r21, 0x43	; 67
    300a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    300e:	dc 01       	movw	r26, r24
    3010:	cb 01       	movw	r24, r22
    3012:	f8 01       	movw	r30, r16
    3014:	80 83       	st	Z, r24
    3016:	91 83       	std	Z+1, r25	; 0x01
    3018:	a2 83       	std	Z+2, r26	; 0x02
    301a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    301c:	fe 01       	movw	r30, r28
    301e:	e5 5a       	subi	r30, 0xA5	; 165
    3020:	ff 4f       	sbci	r31, 0xFF	; 255
    3022:	60 81       	ld	r22, Z
    3024:	71 81       	ldd	r23, Z+1	; 0x01
    3026:	82 81       	ldd	r24, Z+2	; 0x02
    3028:	93 81       	ldd	r25, Z+3	; 0x03
    302a:	20 e0       	ldi	r18, 0x00	; 0
    302c:	30 e0       	ldi	r19, 0x00	; 0
    302e:	40 e8       	ldi	r20, 0x80	; 128
    3030:	5f e3       	ldi	r21, 0x3F	; 63
    3032:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3036:	88 23       	and	r24, r24
    3038:	44 f4       	brge	.+16     	; 0x304a <LCD_displayCharacter+0xb0>
		__ticks = 1;
    303a:	fe 01       	movw	r30, r28
    303c:	e7 5a       	subi	r30, 0xA7	; 167
    303e:	ff 4f       	sbci	r31, 0xFF	; 255
    3040:	81 e0       	ldi	r24, 0x01	; 1
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	91 83       	std	Z+1, r25	; 0x01
    3046:	80 83       	st	Z, r24
    3048:	64 c0       	rjmp	.+200    	; 0x3112 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    304a:	fe 01       	movw	r30, r28
    304c:	e5 5a       	subi	r30, 0xA5	; 165
    304e:	ff 4f       	sbci	r31, 0xFF	; 255
    3050:	60 81       	ld	r22, Z
    3052:	71 81       	ldd	r23, Z+1	; 0x01
    3054:	82 81       	ldd	r24, Z+2	; 0x02
    3056:	93 81       	ldd	r25, Z+3	; 0x03
    3058:	20 e0       	ldi	r18, 0x00	; 0
    305a:	3f ef       	ldi	r19, 0xFF	; 255
    305c:	4f e7       	ldi	r20, 0x7F	; 127
    305e:	57 e4       	ldi	r21, 0x47	; 71
    3060:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3064:	18 16       	cp	r1, r24
    3066:	0c f0       	brlt	.+2      	; 0x306a <LCD_displayCharacter+0xd0>
    3068:	43 c0       	rjmp	.+134    	; 0x30f0 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    306a:	fe 01       	movw	r30, r28
    306c:	e1 5a       	subi	r30, 0xA1	; 161
    306e:	ff 4f       	sbci	r31, 0xFF	; 255
    3070:	60 81       	ld	r22, Z
    3072:	71 81       	ldd	r23, Z+1	; 0x01
    3074:	82 81       	ldd	r24, Z+2	; 0x02
    3076:	93 81       	ldd	r25, Z+3	; 0x03
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	40 e2       	ldi	r20, 0x20	; 32
    307e:	51 e4       	ldi	r21, 0x41	; 65
    3080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3084:	dc 01       	movw	r26, r24
    3086:	cb 01       	movw	r24, r22
    3088:	8e 01       	movw	r16, r28
    308a:	07 5a       	subi	r16, 0xA7	; 167
    308c:	1f 4f       	sbci	r17, 0xFF	; 255
    308e:	bc 01       	movw	r22, r24
    3090:	cd 01       	movw	r24, r26
    3092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3096:	dc 01       	movw	r26, r24
    3098:	cb 01       	movw	r24, r22
    309a:	f8 01       	movw	r30, r16
    309c:	91 83       	std	Z+1, r25	; 0x01
    309e:	80 83       	st	Z, r24
    30a0:	1f c0       	rjmp	.+62     	; 0x30e0 <LCD_displayCharacter+0x146>
    30a2:	fe 01       	movw	r30, r28
    30a4:	e9 5a       	subi	r30, 0xA9	; 169
    30a6:	ff 4f       	sbci	r31, 0xFF	; 255
    30a8:	89 e1       	ldi	r24, 0x19	; 25
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	91 83       	std	Z+1, r25	; 0x01
    30ae:	80 83       	st	Z, r24
    30b0:	fe 01       	movw	r30, r28
    30b2:	e9 5a       	subi	r30, 0xA9	; 169
    30b4:	ff 4f       	sbci	r31, 0xFF	; 255
    30b6:	80 81       	ld	r24, Z
    30b8:	91 81       	ldd	r25, Z+1	; 0x01
    30ba:	01 97       	sbiw	r24, 0x01	; 1
    30bc:	f1 f7       	brne	.-4      	; 0x30ba <LCD_displayCharacter+0x120>
    30be:	fe 01       	movw	r30, r28
    30c0:	e9 5a       	subi	r30, 0xA9	; 169
    30c2:	ff 4f       	sbci	r31, 0xFF	; 255
    30c4:	91 83       	std	Z+1, r25	; 0x01
    30c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30c8:	de 01       	movw	r26, r28
    30ca:	a7 5a       	subi	r26, 0xA7	; 167
    30cc:	bf 4f       	sbci	r27, 0xFF	; 255
    30ce:	fe 01       	movw	r30, r28
    30d0:	e7 5a       	subi	r30, 0xA7	; 167
    30d2:	ff 4f       	sbci	r31, 0xFF	; 255
    30d4:	80 81       	ld	r24, Z
    30d6:	91 81       	ldd	r25, Z+1	; 0x01
    30d8:	01 97       	sbiw	r24, 0x01	; 1
    30da:	11 96       	adiw	r26, 0x01	; 1
    30dc:	9c 93       	st	X, r25
    30de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30e0:	fe 01       	movw	r30, r28
    30e2:	e7 5a       	subi	r30, 0xA7	; 167
    30e4:	ff 4f       	sbci	r31, 0xFF	; 255
    30e6:	80 81       	ld	r24, Z
    30e8:	91 81       	ldd	r25, Z+1	; 0x01
    30ea:	00 97       	sbiw	r24, 0x00	; 0
    30ec:	d1 f6       	brne	.-76     	; 0x30a2 <LCD_displayCharacter+0x108>
    30ee:	27 c0       	rjmp	.+78     	; 0x313e <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f0:	8e 01       	movw	r16, r28
    30f2:	07 5a       	subi	r16, 0xA7	; 167
    30f4:	1f 4f       	sbci	r17, 0xFF	; 255
    30f6:	fe 01       	movw	r30, r28
    30f8:	e5 5a       	subi	r30, 0xA5	; 165
    30fa:	ff 4f       	sbci	r31, 0xFF	; 255
    30fc:	60 81       	ld	r22, Z
    30fe:	71 81       	ldd	r23, Z+1	; 0x01
    3100:	82 81       	ldd	r24, Z+2	; 0x02
    3102:	93 81       	ldd	r25, Z+3	; 0x03
    3104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3108:	dc 01       	movw	r26, r24
    310a:	cb 01       	movw	r24, r22
    310c:	f8 01       	movw	r30, r16
    310e:	91 83       	std	Z+1, r25	; 0x01
    3110:	80 83       	st	Z, r24
    3112:	de 01       	movw	r26, r28
    3114:	ab 5a       	subi	r26, 0xAB	; 171
    3116:	bf 4f       	sbci	r27, 0xFF	; 255
    3118:	fe 01       	movw	r30, r28
    311a:	e7 5a       	subi	r30, 0xA7	; 167
    311c:	ff 4f       	sbci	r31, 0xFF	; 255
    311e:	80 81       	ld	r24, Z
    3120:	91 81       	ldd	r25, Z+1	; 0x01
    3122:	8d 93       	st	X+, r24
    3124:	9c 93       	st	X, r25
    3126:	fe 01       	movw	r30, r28
    3128:	eb 5a       	subi	r30, 0xAB	; 171
    312a:	ff 4f       	sbci	r31, 0xFF	; 255
    312c:	80 81       	ld	r24, Z
    312e:	91 81       	ldd	r25, Z+1	; 0x01
    3130:	01 97       	sbiw	r24, 0x01	; 1
    3132:	f1 f7       	brne	.-4      	; 0x3130 <LCD_displayCharacter+0x196>
    3134:	fe 01       	movw	r30, r28
    3136:	eb 5a       	subi	r30, 0xAB	; 171
    3138:	ff 4f       	sbci	r31, 0xFF	; 255
    313a:	91 83       	std	Z+1, r25	; 0x01
    313c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    313e:	83 e0       	ldi	r24, 0x03	; 3
    3140:	66 e0       	ldi	r22, 0x06	; 6
    3142:	41 e0       	ldi	r20, 0x01	; 1
    3144:	0e 94 17 10 	call	0x202e	; 0x202e <GPIO_writePin>
    3148:	fe 01       	movw	r30, r28
    314a:	ef 5a       	subi	r30, 0xAF	; 175
    314c:	ff 4f       	sbci	r31, 0xFF	; 255
    314e:	80 e0       	ldi	r24, 0x00	; 0
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	a0 e8       	ldi	r26, 0x80	; 128
    3154:	bf e3       	ldi	r27, 0x3F	; 63
    3156:	80 83       	st	Z, r24
    3158:	91 83       	std	Z+1, r25	; 0x01
    315a:	a2 83       	std	Z+2, r26	; 0x02
    315c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    315e:	8e 01       	movw	r16, r28
    3160:	03 5b       	subi	r16, 0xB3	; 179
    3162:	1f 4f       	sbci	r17, 0xFF	; 255
    3164:	fe 01       	movw	r30, r28
    3166:	ef 5a       	subi	r30, 0xAF	; 175
    3168:	ff 4f       	sbci	r31, 0xFF	; 255
    316a:	60 81       	ld	r22, Z
    316c:	71 81       	ldd	r23, Z+1	; 0x01
    316e:	82 81       	ldd	r24, Z+2	; 0x02
    3170:	93 81       	ldd	r25, Z+3	; 0x03
    3172:	20 e0       	ldi	r18, 0x00	; 0
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	4a e7       	ldi	r20, 0x7A	; 122
    3178:	53 e4       	ldi	r21, 0x43	; 67
    317a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    317e:	dc 01       	movw	r26, r24
    3180:	cb 01       	movw	r24, r22
    3182:	f8 01       	movw	r30, r16
    3184:	80 83       	st	Z, r24
    3186:	91 83       	std	Z+1, r25	; 0x01
    3188:	a2 83       	std	Z+2, r26	; 0x02
    318a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    318c:	fe 01       	movw	r30, r28
    318e:	e3 5b       	subi	r30, 0xB3	; 179
    3190:	ff 4f       	sbci	r31, 0xFF	; 255
    3192:	60 81       	ld	r22, Z
    3194:	71 81       	ldd	r23, Z+1	; 0x01
    3196:	82 81       	ldd	r24, Z+2	; 0x02
    3198:	93 81       	ldd	r25, Z+3	; 0x03
    319a:	20 e0       	ldi	r18, 0x00	; 0
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	40 e8       	ldi	r20, 0x80	; 128
    31a0:	5f e3       	ldi	r21, 0x3F	; 63
    31a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31a6:	88 23       	and	r24, r24
    31a8:	44 f4       	brge	.+16     	; 0x31ba <LCD_displayCharacter+0x220>
		__ticks = 1;
    31aa:	fe 01       	movw	r30, r28
    31ac:	e5 5b       	subi	r30, 0xB5	; 181
    31ae:	ff 4f       	sbci	r31, 0xFF	; 255
    31b0:	81 e0       	ldi	r24, 0x01	; 1
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	91 83       	std	Z+1, r25	; 0x01
    31b6:	80 83       	st	Z, r24
    31b8:	64 c0       	rjmp	.+200    	; 0x3282 <LCD_displayCharacter+0x2e8>
	else if (__tmp > 65535)
    31ba:	fe 01       	movw	r30, r28
    31bc:	e3 5b       	subi	r30, 0xB3	; 179
    31be:	ff 4f       	sbci	r31, 0xFF	; 255
    31c0:	60 81       	ld	r22, Z
    31c2:	71 81       	ldd	r23, Z+1	; 0x01
    31c4:	82 81       	ldd	r24, Z+2	; 0x02
    31c6:	93 81       	ldd	r25, Z+3	; 0x03
    31c8:	20 e0       	ldi	r18, 0x00	; 0
    31ca:	3f ef       	ldi	r19, 0xFF	; 255
    31cc:	4f e7       	ldi	r20, 0x7F	; 127
    31ce:	57 e4       	ldi	r21, 0x47	; 71
    31d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31d4:	18 16       	cp	r1, r24
    31d6:	0c f0       	brlt	.+2      	; 0x31da <LCD_displayCharacter+0x240>
    31d8:	43 c0       	rjmp	.+134    	; 0x3260 <LCD_displayCharacter+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31da:	fe 01       	movw	r30, r28
    31dc:	ef 5a       	subi	r30, 0xAF	; 175
    31de:	ff 4f       	sbci	r31, 0xFF	; 255
    31e0:	60 81       	ld	r22, Z
    31e2:	71 81       	ldd	r23, Z+1	; 0x01
    31e4:	82 81       	ldd	r24, Z+2	; 0x02
    31e6:	93 81       	ldd	r25, Z+3	; 0x03
    31e8:	20 e0       	ldi	r18, 0x00	; 0
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	40 e2       	ldi	r20, 0x20	; 32
    31ee:	51 e4       	ldi	r21, 0x41	; 65
    31f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f4:	dc 01       	movw	r26, r24
    31f6:	cb 01       	movw	r24, r22
    31f8:	8e 01       	movw	r16, r28
    31fa:	05 5b       	subi	r16, 0xB5	; 181
    31fc:	1f 4f       	sbci	r17, 0xFF	; 255
    31fe:	bc 01       	movw	r22, r24
    3200:	cd 01       	movw	r24, r26
    3202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3206:	dc 01       	movw	r26, r24
    3208:	cb 01       	movw	r24, r22
    320a:	f8 01       	movw	r30, r16
    320c:	91 83       	std	Z+1, r25	; 0x01
    320e:	80 83       	st	Z, r24
    3210:	1f c0       	rjmp	.+62     	; 0x3250 <LCD_displayCharacter+0x2b6>
    3212:	fe 01       	movw	r30, r28
    3214:	e7 5b       	subi	r30, 0xB7	; 183
    3216:	ff 4f       	sbci	r31, 0xFF	; 255
    3218:	89 e1       	ldi	r24, 0x19	; 25
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	91 83       	std	Z+1, r25	; 0x01
    321e:	80 83       	st	Z, r24
    3220:	fe 01       	movw	r30, r28
    3222:	e7 5b       	subi	r30, 0xB7	; 183
    3224:	ff 4f       	sbci	r31, 0xFF	; 255
    3226:	80 81       	ld	r24, Z
    3228:	91 81       	ldd	r25, Z+1	; 0x01
    322a:	01 97       	sbiw	r24, 0x01	; 1
    322c:	f1 f7       	brne	.-4      	; 0x322a <LCD_displayCharacter+0x290>
    322e:	fe 01       	movw	r30, r28
    3230:	e7 5b       	subi	r30, 0xB7	; 183
    3232:	ff 4f       	sbci	r31, 0xFF	; 255
    3234:	91 83       	std	Z+1, r25	; 0x01
    3236:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3238:	de 01       	movw	r26, r28
    323a:	a5 5b       	subi	r26, 0xB5	; 181
    323c:	bf 4f       	sbci	r27, 0xFF	; 255
    323e:	fe 01       	movw	r30, r28
    3240:	e5 5b       	subi	r30, 0xB5	; 181
    3242:	ff 4f       	sbci	r31, 0xFF	; 255
    3244:	80 81       	ld	r24, Z
    3246:	91 81       	ldd	r25, Z+1	; 0x01
    3248:	01 97       	sbiw	r24, 0x01	; 1
    324a:	11 96       	adiw	r26, 0x01	; 1
    324c:	9c 93       	st	X, r25
    324e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3250:	fe 01       	movw	r30, r28
    3252:	e5 5b       	subi	r30, 0xB5	; 181
    3254:	ff 4f       	sbci	r31, 0xFF	; 255
    3256:	80 81       	ld	r24, Z
    3258:	91 81       	ldd	r25, Z+1	; 0x01
    325a:	00 97       	sbiw	r24, 0x00	; 0
    325c:	d1 f6       	brne	.-76     	; 0x3212 <LCD_displayCharacter+0x278>
    325e:	27 c0       	rjmp	.+78     	; 0x32ae <LCD_displayCharacter+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3260:	8e 01       	movw	r16, r28
    3262:	05 5b       	subi	r16, 0xB5	; 181
    3264:	1f 4f       	sbci	r17, 0xFF	; 255
    3266:	fe 01       	movw	r30, r28
    3268:	e3 5b       	subi	r30, 0xB3	; 179
    326a:	ff 4f       	sbci	r31, 0xFF	; 255
    326c:	60 81       	ld	r22, Z
    326e:	71 81       	ldd	r23, Z+1	; 0x01
    3270:	82 81       	ldd	r24, Z+2	; 0x02
    3272:	93 81       	ldd	r25, Z+3	; 0x03
    3274:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3278:	dc 01       	movw	r26, r24
    327a:	cb 01       	movw	r24, r22
    327c:	f8 01       	movw	r30, r16
    327e:	91 83       	std	Z+1, r25	; 0x01
    3280:	80 83       	st	Z, r24
    3282:	de 01       	movw	r26, r28
    3284:	a9 5b       	subi	r26, 0xB9	; 185
    3286:	bf 4f       	sbci	r27, 0xFF	; 255
    3288:	fe 01       	movw	r30, r28
    328a:	e5 5b       	subi	r30, 0xB5	; 181
    328c:	ff 4f       	sbci	r31, 0xFF	; 255
    328e:	80 81       	ld	r24, Z
    3290:	91 81       	ldd	r25, Z+1	; 0x01
    3292:	8d 93       	st	X+, r24
    3294:	9c 93       	st	X, r25
    3296:	fe 01       	movw	r30, r28
    3298:	e9 5b       	subi	r30, 0xB9	; 185
    329a:	ff 4f       	sbci	r31, 0xFF	; 255
    329c:	80 81       	ld	r24, Z
    329e:	91 81       	ldd	r25, Z+1	; 0x01
    32a0:	01 97       	sbiw	r24, 0x01	; 1
    32a2:	f1 f7       	brne	.-4      	; 0x32a0 <LCD_displayCharacter+0x306>
    32a4:	fe 01       	movw	r30, r28
    32a6:	e9 5b       	subi	r30, 0xB9	; 185
    32a8:	ff 4f       	sbci	r31, 0xFF	; 255
    32aa:	91 83       	std	Z+1, r25	; 0x01
    32ac:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required data to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    32ae:	81 e0       	ldi	r24, 0x01	; 1
    32b0:	0e 94 25 12 	call	0x244a	; 0x244a <GPIO_readPort>
    32b4:	fe 01       	movw	r30, r28
    32b6:	ed 59       	subi	r30, 0x9D	; 157
    32b8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ba:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | (data & 0xF0);
    32bc:	fe 01       	movw	r30, r28
    32be:	ed 59       	subi	r30, 0x9D	; 157
    32c0:	ff 4f       	sbci	r31, 0xFF	; 255
    32c2:	80 81       	ld	r24, Z
    32c4:	98 2f       	mov	r25, r24
    32c6:	9f 70       	andi	r25, 0x0F	; 15
    32c8:	fe 01       	movw	r30, r28
    32ca:	ec 59       	subi	r30, 0x9C	; 156
    32cc:	ff 4f       	sbci	r31, 0xFF	; 255
    32ce:	80 81       	ld	r24, Z
    32d0:	80 7f       	andi	r24, 0xF0	; 240
    32d2:	89 2b       	or	r24, r25
    32d4:	fe 01       	movw	r30, r28
    32d6:	ed 59       	subi	r30, 0x9D	; 157
    32d8:	ff 4f       	sbci	r31, 0xFF	; 255
    32da:	80 83       	st	Z, r24
#else
	lcd_port_value = (lcd_port_value & 0xF0) | ((data & 0xF0) >> 4);
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    32dc:	fe 01       	movw	r30, r28
    32de:	ed 59       	subi	r30, 0x9D	; 157
    32e0:	ff 4f       	sbci	r31, 0xFF	; 255
    32e2:	81 e0       	ldi	r24, 0x01	; 1
    32e4:	60 81       	ld	r22, Z
    32e6:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <GPIO_writePort>
    32ea:	fe 01       	movw	r30, r28
    32ec:	ed 5b       	subi	r30, 0xBD	; 189
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	80 e0       	ldi	r24, 0x00	; 0
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	a0 e8       	ldi	r26, 0x80	; 128
    32f6:	bf e3       	ldi	r27, 0x3F	; 63
    32f8:	80 83       	st	Z, r24
    32fa:	91 83       	std	Z+1, r25	; 0x01
    32fc:	a2 83       	std	Z+2, r26	; 0x02
    32fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3300:	8e 01       	movw	r16, r28
    3302:	01 5c       	subi	r16, 0xC1	; 193
    3304:	1f 4f       	sbci	r17, 0xFF	; 255
    3306:	fe 01       	movw	r30, r28
    3308:	ed 5b       	subi	r30, 0xBD	; 189
    330a:	ff 4f       	sbci	r31, 0xFF	; 255
    330c:	60 81       	ld	r22, Z
    330e:	71 81       	ldd	r23, Z+1	; 0x01
    3310:	82 81       	ldd	r24, Z+2	; 0x02
    3312:	93 81       	ldd	r25, Z+3	; 0x03
    3314:	20 e0       	ldi	r18, 0x00	; 0
    3316:	30 e0       	ldi	r19, 0x00	; 0
    3318:	4a e7       	ldi	r20, 0x7A	; 122
    331a:	53 e4       	ldi	r21, 0x43	; 67
    331c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3320:	dc 01       	movw	r26, r24
    3322:	cb 01       	movw	r24, r22
    3324:	f8 01       	movw	r30, r16
    3326:	80 83       	st	Z, r24
    3328:	91 83       	std	Z+1, r25	; 0x01
    332a:	a2 83       	std	Z+2, r26	; 0x02
    332c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    332e:	fe 01       	movw	r30, r28
    3330:	ff 96       	adiw	r30, 0x3f	; 63
    3332:	60 81       	ld	r22, Z
    3334:	71 81       	ldd	r23, Z+1	; 0x01
    3336:	82 81       	ldd	r24, Z+2	; 0x02
    3338:	93 81       	ldd	r25, Z+3	; 0x03
    333a:	20 e0       	ldi	r18, 0x00	; 0
    333c:	30 e0       	ldi	r19, 0x00	; 0
    333e:	40 e8       	ldi	r20, 0x80	; 128
    3340:	5f e3       	ldi	r21, 0x3F	; 63
    3342:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3346:	88 23       	and	r24, r24
    3348:	2c f4       	brge	.+10     	; 0x3354 <LCD_displayCharacter+0x3ba>
		__ticks = 1;
    334a:	81 e0       	ldi	r24, 0x01	; 1
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	9e af       	std	Y+62, r25	; 0x3e
    3350:	8d af       	std	Y+61, r24	; 0x3d
    3352:	46 c0       	rjmp	.+140    	; 0x33e0 <LCD_displayCharacter+0x446>
	else if (__tmp > 65535)
    3354:	fe 01       	movw	r30, r28
    3356:	ff 96       	adiw	r30, 0x3f	; 63
    3358:	60 81       	ld	r22, Z
    335a:	71 81       	ldd	r23, Z+1	; 0x01
    335c:	82 81       	ldd	r24, Z+2	; 0x02
    335e:	93 81       	ldd	r25, Z+3	; 0x03
    3360:	20 e0       	ldi	r18, 0x00	; 0
    3362:	3f ef       	ldi	r19, 0xFF	; 255
    3364:	4f e7       	ldi	r20, 0x7F	; 127
    3366:	57 e4       	ldi	r21, 0x47	; 71
    3368:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    336c:	18 16       	cp	r1, r24
    336e:	64 f5       	brge	.+88     	; 0x33c8 <LCD_displayCharacter+0x42e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3370:	fe 01       	movw	r30, r28
    3372:	ed 5b       	subi	r30, 0xBD	; 189
    3374:	ff 4f       	sbci	r31, 0xFF	; 255
    3376:	60 81       	ld	r22, Z
    3378:	71 81       	ldd	r23, Z+1	; 0x01
    337a:	82 81       	ldd	r24, Z+2	; 0x02
    337c:	93 81       	ldd	r25, Z+3	; 0x03
    337e:	20 e0       	ldi	r18, 0x00	; 0
    3380:	30 e0       	ldi	r19, 0x00	; 0
    3382:	40 e2       	ldi	r20, 0x20	; 32
    3384:	51 e4       	ldi	r21, 0x41	; 65
    3386:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    338a:	dc 01       	movw	r26, r24
    338c:	cb 01       	movw	r24, r22
    338e:	bc 01       	movw	r22, r24
    3390:	cd 01       	movw	r24, r26
    3392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3396:	dc 01       	movw	r26, r24
    3398:	cb 01       	movw	r24, r22
    339a:	9e af       	std	Y+62, r25	; 0x3e
    339c:	8d af       	std	Y+61, r24	; 0x3d
    339e:	0f c0       	rjmp	.+30     	; 0x33be <LCD_displayCharacter+0x424>
    33a0:	89 e1       	ldi	r24, 0x19	; 25
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	9c af       	std	Y+60, r25	; 0x3c
    33a6:	8b af       	std	Y+59, r24	; 0x3b
    33a8:	8b ad       	ldd	r24, Y+59	; 0x3b
    33aa:	9c ad       	ldd	r25, Y+60	; 0x3c
    33ac:	01 97       	sbiw	r24, 0x01	; 1
    33ae:	f1 f7       	brne	.-4      	; 0x33ac <LCD_displayCharacter+0x412>
    33b0:	9c af       	std	Y+60, r25	; 0x3c
    33b2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    33b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    33b8:	01 97       	sbiw	r24, 0x01	; 1
    33ba:	9e af       	std	Y+62, r25	; 0x3e
    33bc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33be:	8d ad       	ldd	r24, Y+61	; 0x3d
    33c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    33c2:	00 97       	sbiw	r24, 0x00	; 0
    33c4:	69 f7       	brne	.-38     	; 0x33a0 <LCD_displayCharacter+0x406>
    33c6:	16 c0       	rjmp	.+44     	; 0x33f4 <LCD_displayCharacter+0x45a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33c8:	fe 01       	movw	r30, r28
    33ca:	ff 96       	adiw	r30, 0x3f	; 63
    33cc:	60 81       	ld	r22, Z
    33ce:	71 81       	ldd	r23, Z+1	; 0x01
    33d0:	82 81       	ldd	r24, Z+2	; 0x02
    33d2:	93 81       	ldd	r25, Z+3	; 0x03
    33d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d8:	dc 01       	movw	r26, r24
    33da:	cb 01       	movw	r24, r22
    33dc:	9e af       	std	Y+62, r25	; 0x3e
    33de:	8d af       	std	Y+61, r24	; 0x3d
    33e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    33e2:	9e ad       	ldd	r25, Y+62	; 0x3e
    33e4:	9a af       	std	Y+58, r25	; 0x3a
    33e6:	89 af       	std	Y+57, r24	; 0x39
    33e8:	89 ad       	ldd	r24, Y+57	; 0x39
    33ea:	9a ad       	ldd	r25, Y+58	; 0x3a
    33ec:	01 97       	sbiw	r24, 0x01	; 1
    33ee:	f1 f7       	brne	.-4      	; 0x33ec <LCD_displayCharacter+0x452>
    33f0:	9a af       	std	Y+58, r25	; 0x3a
    33f2:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    33f4:	83 e0       	ldi	r24, 0x03	; 3
    33f6:	66 e0       	ldi	r22, 0x06	; 6
    33f8:	40 e0       	ldi	r20, 0x00	; 0
    33fa:	0e 94 17 10 	call	0x202e	; 0x202e <GPIO_writePin>
    33fe:	80 e0       	ldi	r24, 0x00	; 0
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	a0 e8       	ldi	r26, 0x80	; 128
    3404:	bf e3       	ldi	r27, 0x3F	; 63
    3406:	8d ab       	std	Y+53, r24	; 0x35
    3408:	9e ab       	std	Y+54, r25	; 0x36
    340a:	af ab       	std	Y+55, r26	; 0x37
    340c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    340e:	6d a9       	ldd	r22, Y+53	; 0x35
    3410:	7e a9       	ldd	r23, Y+54	; 0x36
    3412:	8f a9       	ldd	r24, Y+55	; 0x37
    3414:	98 ad       	ldd	r25, Y+56	; 0x38
    3416:	20 e0       	ldi	r18, 0x00	; 0
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	4a e7       	ldi	r20, 0x7A	; 122
    341c:	53 e4       	ldi	r21, 0x43	; 67
    341e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3422:	dc 01       	movw	r26, r24
    3424:	cb 01       	movw	r24, r22
    3426:	89 ab       	std	Y+49, r24	; 0x31
    3428:	9a ab       	std	Y+50, r25	; 0x32
    342a:	ab ab       	std	Y+51, r26	; 0x33
    342c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    342e:	69 a9       	ldd	r22, Y+49	; 0x31
    3430:	7a a9       	ldd	r23, Y+50	; 0x32
    3432:	8b a9       	ldd	r24, Y+51	; 0x33
    3434:	9c a9       	ldd	r25, Y+52	; 0x34
    3436:	20 e0       	ldi	r18, 0x00	; 0
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	40 e8       	ldi	r20, 0x80	; 128
    343c:	5f e3       	ldi	r21, 0x3F	; 63
    343e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3442:	88 23       	and	r24, r24
    3444:	2c f4       	brge	.+10     	; 0x3450 <LCD_displayCharacter+0x4b6>
		__ticks = 1;
    3446:	81 e0       	ldi	r24, 0x01	; 1
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	98 ab       	std	Y+48, r25	; 0x30
    344c:	8f a7       	std	Y+47, r24	; 0x2f
    344e:	3f c0       	rjmp	.+126    	; 0x34ce <LCD_displayCharacter+0x534>
	else if (__tmp > 65535)
    3450:	69 a9       	ldd	r22, Y+49	; 0x31
    3452:	7a a9       	ldd	r23, Y+50	; 0x32
    3454:	8b a9       	ldd	r24, Y+51	; 0x33
    3456:	9c a9       	ldd	r25, Y+52	; 0x34
    3458:	20 e0       	ldi	r18, 0x00	; 0
    345a:	3f ef       	ldi	r19, 0xFF	; 255
    345c:	4f e7       	ldi	r20, 0x7F	; 127
    345e:	57 e4       	ldi	r21, 0x47	; 71
    3460:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3464:	18 16       	cp	r1, r24
    3466:	4c f5       	brge	.+82     	; 0x34ba <LCD_displayCharacter+0x520>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3468:	6d a9       	ldd	r22, Y+53	; 0x35
    346a:	7e a9       	ldd	r23, Y+54	; 0x36
    346c:	8f a9       	ldd	r24, Y+55	; 0x37
    346e:	98 ad       	ldd	r25, Y+56	; 0x38
    3470:	20 e0       	ldi	r18, 0x00	; 0
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	40 e2       	ldi	r20, 0x20	; 32
    3476:	51 e4       	ldi	r21, 0x41	; 65
    3478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    347c:	dc 01       	movw	r26, r24
    347e:	cb 01       	movw	r24, r22
    3480:	bc 01       	movw	r22, r24
    3482:	cd 01       	movw	r24, r26
    3484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3488:	dc 01       	movw	r26, r24
    348a:	cb 01       	movw	r24, r22
    348c:	98 ab       	std	Y+48, r25	; 0x30
    348e:	8f a7       	std	Y+47, r24	; 0x2f
    3490:	0f c0       	rjmp	.+30     	; 0x34b0 <LCD_displayCharacter+0x516>
    3492:	89 e1       	ldi	r24, 0x19	; 25
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	9e a7       	std	Y+46, r25	; 0x2e
    3498:	8d a7       	std	Y+45, r24	; 0x2d
    349a:	8d a5       	ldd	r24, Y+45	; 0x2d
    349c:	9e a5       	ldd	r25, Y+46	; 0x2e
    349e:	01 97       	sbiw	r24, 0x01	; 1
    34a0:	f1 f7       	brne	.-4      	; 0x349e <LCD_displayCharacter+0x504>
    34a2:	9e a7       	std	Y+46, r25	; 0x2e
    34a4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    34a8:	98 a9       	ldd	r25, Y+48	; 0x30
    34aa:	01 97       	sbiw	r24, 0x01	; 1
    34ac:	98 ab       	std	Y+48, r25	; 0x30
    34ae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    34b2:	98 a9       	ldd	r25, Y+48	; 0x30
    34b4:	00 97       	sbiw	r24, 0x00	; 0
    34b6:	69 f7       	brne	.-38     	; 0x3492 <LCD_displayCharacter+0x4f8>
    34b8:	14 c0       	rjmp	.+40     	; 0x34e2 <LCD_displayCharacter+0x548>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ba:	69 a9       	ldd	r22, Y+49	; 0x31
    34bc:	7a a9       	ldd	r23, Y+50	; 0x32
    34be:	8b a9       	ldd	r24, Y+51	; 0x33
    34c0:	9c a9       	ldd	r25, Y+52	; 0x34
    34c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c6:	dc 01       	movw	r26, r24
    34c8:	cb 01       	movw	r24, r22
    34ca:	98 ab       	std	Y+48, r25	; 0x30
    34cc:	8f a7       	std	Y+47, r24	; 0x2f
    34ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    34d0:	98 a9       	ldd	r25, Y+48	; 0x30
    34d2:	9c a7       	std	Y+44, r25	; 0x2c
    34d4:	8b a7       	std	Y+43, r24	; 0x2b
    34d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    34d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    34da:	01 97       	sbiw	r24, 0x01	; 1
    34dc:	f1 f7       	brne	.-4      	; 0x34da <LCD_displayCharacter+0x540>
    34de:	9c a7       	std	Y+44, r25	; 0x2c
    34e0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    34e2:	83 e0       	ldi	r24, 0x03	; 3
    34e4:	66 e0       	ldi	r22, 0x06	; 6
    34e6:	41 e0       	ldi	r20, 0x01	; 1
    34e8:	0e 94 17 10 	call	0x202e	; 0x202e <GPIO_writePin>
    34ec:	80 e0       	ldi	r24, 0x00	; 0
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	a0 e8       	ldi	r26, 0x80	; 128
    34f2:	bf e3       	ldi	r27, 0x3F	; 63
    34f4:	8f a3       	std	Y+39, r24	; 0x27
    34f6:	98 a7       	std	Y+40, r25	; 0x28
    34f8:	a9 a7       	std	Y+41, r26	; 0x29
    34fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34fc:	6f a1       	ldd	r22, Y+39	; 0x27
    34fe:	78 a5       	ldd	r23, Y+40	; 0x28
    3500:	89 a5       	ldd	r24, Y+41	; 0x29
    3502:	9a a5       	ldd	r25, Y+42	; 0x2a
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	4a e7       	ldi	r20, 0x7A	; 122
    350a:	53 e4       	ldi	r21, 0x43	; 67
    350c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3510:	dc 01       	movw	r26, r24
    3512:	cb 01       	movw	r24, r22
    3514:	8b a3       	std	Y+35, r24	; 0x23
    3516:	9c a3       	std	Y+36, r25	; 0x24
    3518:	ad a3       	std	Y+37, r26	; 0x25
    351a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    351c:	6b a1       	ldd	r22, Y+35	; 0x23
    351e:	7c a1       	ldd	r23, Y+36	; 0x24
    3520:	8d a1       	ldd	r24, Y+37	; 0x25
    3522:	9e a1       	ldd	r25, Y+38	; 0x26
    3524:	20 e0       	ldi	r18, 0x00	; 0
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	40 e8       	ldi	r20, 0x80	; 128
    352a:	5f e3       	ldi	r21, 0x3F	; 63
    352c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3530:	88 23       	and	r24, r24
    3532:	2c f4       	brge	.+10     	; 0x353e <LCD_displayCharacter+0x5a4>
		__ticks = 1;
    3534:	81 e0       	ldi	r24, 0x01	; 1
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	9a a3       	std	Y+34, r25	; 0x22
    353a:	89 a3       	std	Y+33, r24	; 0x21
    353c:	3f c0       	rjmp	.+126    	; 0x35bc <LCD_displayCharacter+0x622>
	else if (__tmp > 65535)
    353e:	6b a1       	ldd	r22, Y+35	; 0x23
    3540:	7c a1       	ldd	r23, Y+36	; 0x24
    3542:	8d a1       	ldd	r24, Y+37	; 0x25
    3544:	9e a1       	ldd	r25, Y+38	; 0x26
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	3f ef       	ldi	r19, 0xFF	; 255
    354a:	4f e7       	ldi	r20, 0x7F	; 127
    354c:	57 e4       	ldi	r21, 0x47	; 71
    354e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3552:	18 16       	cp	r1, r24
    3554:	4c f5       	brge	.+82     	; 0x35a8 <LCD_displayCharacter+0x60e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3556:	6f a1       	ldd	r22, Y+39	; 0x27
    3558:	78 a5       	ldd	r23, Y+40	; 0x28
    355a:	89 a5       	ldd	r24, Y+41	; 0x29
    355c:	9a a5       	ldd	r25, Y+42	; 0x2a
    355e:	20 e0       	ldi	r18, 0x00	; 0
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	40 e2       	ldi	r20, 0x20	; 32
    3564:	51 e4       	ldi	r21, 0x41	; 65
    3566:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    356a:	dc 01       	movw	r26, r24
    356c:	cb 01       	movw	r24, r22
    356e:	bc 01       	movw	r22, r24
    3570:	cd 01       	movw	r24, r26
    3572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3576:	dc 01       	movw	r26, r24
    3578:	cb 01       	movw	r24, r22
    357a:	9a a3       	std	Y+34, r25	; 0x22
    357c:	89 a3       	std	Y+33, r24	; 0x21
    357e:	0f c0       	rjmp	.+30     	; 0x359e <LCD_displayCharacter+0x604>
    3580:	89 e1       	ldi	r24, 0x19	; 25
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	98 a3       	std	Y+32, r25	; 0x20
    3586:	8f 8f       	std	Y+31, r24	; 0x1f
    3588:	8f 8d       	ldd	r24, Y+31	; 0x1f
    358a:	98 a1       	ldd	r25, Y+32	; 0x20
    358c:	01 97       	sbiw	r24, 0x01	; 1
    358e:	f1 f7       	brne	.-4      	; 0x358c <LCD_displayCharacter+0x5f2>
    3590:	98 a3       	std	Y+32, r25	; 0x20
    3592:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3594:	89 a1       	ldd	r24, Y+33	; 0x21
    3596:	9a a1       	ldd	r25, Y+34	; 0x22
    3598:	01 97       	sbiw	r24, 0x01	; 1
    359a:	9a a3       	std	Y+34, r25	; 0x22
    359c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    359e:	89 a1       	ldd	r24, Y+33	; 0x21
    35a0:	9a a1       	ldd	r25, Y+34	; 0x22
    35a2:	00 97       	sbiw	r24, 0x00	; 0
    35a4:	69 f7       	brne	.-38     	; 0x3580 <LCD_displayCharacter+0x5e6>
    35a6:	14 c0       	rjmp	.+40     	; 0x35d0 <LCD_displayCharacter+0x636>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35a8:	6b a1       	ldd	r22, Y+35	; 0x23
    35aa:	7c a1       	ldd	r23, Y+36	; 0x24
    35ac:	8d a1       	ldd	r24, Y+37	; 0x25
    35ae:	9e a1       	ldd	r25, Y+38	; 0x26
    35b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b4:	dc 01       	movw	r26, r24
    35b6:	cb 01       	movw	r24, r22
    35b8:	9a a3       	std	Y+34, r25	; 0x22
    35ba:	89 a3       	std	Y+33, r24	; 0x21
    35bc:	89 a1       	ldd	r24, Y+33	; 0x21
    35be:	9a a1       	ldd	r25, Y+34	; 0x22
    35c0:	9e 8f       	std	Y+30, r25	; 0x1e
    35c2:	8d 8f       	std	Y+29, r24	; 0x1d
    35c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35c8:	01 97       	sbiw	r24, 0x01	; 1
    35ca:	f1 f7       	brne	.-4      	; 0x35c8 <LCD_displayCharacter+0x62e>
    35cc:	9e 8f       	std	Y+30, r25	; 0x1e
    35ce:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the first 4 bits of the required data to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    35d0:	81 e0       	ldi	r24, 0x01	; 1
    35d2:	0e 94 25 12 	call	0x244a	; 0x244a <GPIO_readPort>
    35d6:	fe 01       	movw	r30, r28
    35d8:	ed 59       	subi	r30, 0x9D	; 157
    35da:	ff 4f       	sbci	r31, 0xFF	; 255
    35dc:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | ((data & 0x0F) << 4);
    35de:	fe 01       	movw	r30, r28
    35e0:	ed 59       	subi	r30, 0x9D	; 157
    35e2:	ff 4f       	sbci	r31, 0xFF	; 255
    35e4:	80 81       	ld	r24, Z
    35e6:	28 2f       	mov	r18, r24
    35e8:	2f 70       	andi	r18, 0x0F	; 15
    35ea:	fe 01       	movw	r30, r28
    35ec:	ec 59       	subi	r30, 0x9C	; 156
    35ee:	ff 4f       	sbci	r31, 0xFF	; 255
    35f0:	80 81       	ld	r24, Z
    35f2:	88 2f       	mov	r24, r24
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	82 95       	swap	r24
    35f8:	92 95       	swap	r25
    35fa:	90 7f       	andi	r25, 0xF0	; 240
    35fc:	98 27       	eor	r25, r24
    35fe:	80 7f       	andi	r24, 0xF0	; 240
    3600:	98 27       	eor	r25, r24
    3602:	82 2b       	or	r24, r18
    3604:	fe 01       	movw	r30, r28
    3606:	ed 59       	subi	r30, 0x9D	; 157
    3608:	ff 4f       	sbci	r31, 0xFF	; 255
    360a:	80 83       	st	Z, r24
#else
	lcd_port_value = (lcd_port_value & 0xF0) | (data & 0x0F);
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    360c:	fe 01       	movw	r30, r28
    360e:	ed 59       	subi	r30, 0x9D	; 157
    3610:	ff 4f       	sbci	r31, 0xFF	; 255
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	60 81       	ld	r22, Z
    3616:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <GPIO_writePort>
    361a:	80 e0       	ldi	r24, 0x00	; 0
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	a0 e8       	ldi	r26, 0x80	; 128
    3620:	bf e3       	ldi	r27, 0x3F	; 63
    3622:	89 8f       	std	Y+25, r24	; 0x19
    3624:	9a 8f       	std	Y+26, r25	; 0x1a
    3626:	ab 8f       	std	Y+27, r26	; 0x1b
    3628:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    362a:	69 8d       	ldd	r22, Y+25	; 0x19
    362c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    362e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3630:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3632:	20 e0       	ldi	r18, 0x00	; 0
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	4a e7       	ldi	r20, 0x7A	; 122
    3638:	53 e4       	ldi	r21, 0x43	; 67
    363a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    363e:	dc 01       	movw	r26, r24
    3640:	cb 01       	movw	r24, r22
    3642:	8d 8b       	std	Y+21, r24	; 0x15
    3644:	9e 8b       	std	Y+22, r25	; 0x16
    3646:	af 8b       	std	Y+23, r26	; 0x17
    3648:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    364a:	6d 89       	ldd	r22, Y+21	; 0x15
    364c:	7e 89       	ldd	r23, Y+22	; 0x16
    364e:	8f 89       	ldd	r24, Y+23	; 0x17
    3650:	98 8d       	ldd	r25, Y+24	; 0x18
    3652:	20 e0       	ldi	r18, 0x00	; 0
    3654:	30 e0       	ldi	r19, 0x00	; 0
    3656:	40 e8       	ldi	r20, 0x80	; 128
    3658:	5f e3       	ldi	r21, 0x3F	; 63
    365a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    365e:	88 23       	and	r24, r24
    3660:	2c f4       	brge	.+10     	; 0x366c <LCD_displayCharacter+0x6d2>
		__ticks = 1;
    3662:	81 e0       	ldi	r24, 0x01	; 1
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	9c 8b       	std	Y+20, r25	; 0x14
    3668:	8b 8b       	std	Y+19, r24	; 0x13
    366a:	3f c0       	rjmp	.+126    	; 0x36ea <LCD_displayCharacter+0x750>
	else if (__tmp > 65535)
    366c:	6d 89       	ldd	r22, Y+21	; 0x15
    366e:	7e 89       	ldd	r23, Y+22	; 0x16
    3670:	8f 89       	ldd	r24, Y+23	; 0x17
    3672:	98 8d       	ldd	r25, Y+24	; 0x18
    3674:	20 e0       	ldi	r18, 0x00	; 0
    3676:	3f ef       	ldi	r19, 0xFF	; 255
    3678:	4f e7       	ldi	r20, 0x7F	; 127
    367a:	57 e4       	ldi	r21, 0x47	; 71
    367c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3680:	18 16       	cp	r1, r24
    3682:	4c f5       	brge	.+82     	; 0x36d6 <LCD_displayCharacter+0x73c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3684:	69 8d       	ldd	r22, Y+25	; 0x19
    3686:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3688:	8b 8d       	ldd	r24, Y+27	; 0x1b
    368a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    368c:	20 e0       	ldi	r18, 0x00	; 0
    368e:	30 e0       	ldi	r19, 0x00	; 0
    3690:	40 e2       	ldi	r20, 0x20	; 32
    3692:	51 e4       	ldi	r21, 0x41	; 65
    3694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3698:	dc 01       	movw	r26, r24
    369a:	cb 01       	movw	r24, r22
    369c:	bc 01       	movw	r22, r24
    369e:	cd 01       	movw	r24, r26
    36a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a4:	dc 01       	movw	r26, r24
    36a6:	cb 01       	movw	r24, r22
    36a8:	9c 8b       	std	Y+20, r25	; 0x14
    36aa:	8b 8b       	std	Y+19, r24	; 0x13
    36ac:	0f c0       	rjmp	.+30     	; 0x36cc <LCD_displayCharacter+0x732>
    36ae:	89 e1       	ldi	r24, 0x19	; 25
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	9a 8b       	std	Y+18, r25	; 0x12
    36b4:	89 8b       	std	Y+17, r24	; 0x11
    36b6:	89 89       	ldd	r24, Y+17	; 0x11
    36b8:	9a 89       	ldd	r25, Y+18	; 0x12
    36ba:	01 97       	sbiw	r24, 0x01	; 1
    36bc:	f1 f7       	brne	.-4      	; 0x36ba <LCD_displayCharacter+0x720>
    36be:	9a 8b       	std	Y+18, r25	; 0x12
    36c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36c2:	8b 89       	ldd	r24, Y+19	; 0x13
    36c4:	9c 89       	ldd	r25, Y+20	; 0x14
    36c6:	01 97       	sbiw	r24, 0x01	; 1
    36c8:	9c 8b       	std	Y+20, r25	; 0x14
    36ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36cc:	8b 89       	ldd	r24, Y+19	; 0x13
    36ce:	9c 89       	ldd	r25, Y+20	; 0x14
    36d0:	00 97       	sbiw	r24, 0x00	; 0
    36d2:	69 f7       	brne	.-38     	; 0x36ae <LCD_displayCharacter+0x714>
    36d4:	14 c0       	rjmp	.+40     	; 0x36fe <LCD_displayCharacter+0x764>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36d6:	6d 89       	ldd	r22, Y+21	; 0x15
    36d8:	7e 89       	ldd	r23, Y+22	; 0x16
    36da:	8f 89       	ldd	r24, Y+23	; 0x17
    36dc:	98 8d       	ldd	r25, Y+24	; 0x18
    36de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e2:	dc 01       	movw	r26, r24
    36e4:	cb 01       	movw	r24, r22
    36e6:	9c 8b       	std	Y+20, r25	; 0x14
    36e8:	8b 8b       	std	Y+19, r24	; 0x13
    36ea:	8b 89       	ldd	r24, Y+19	; 0x13
    36ec:	9c 89       	ldd	r25, Y+20	; 0x14
    36ee:	98 8b       	std	Y+16, r25	; 0x10
    36f0:	8f 87       	std	Y+15, r24	; 0x0f
    36f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    36f4:	98 89       	ldd	r25, Y+16	; 0x10
    36f6:	01 97       	sbiw	r24, 0x01	; 1
    36f8:	f1 f7       	brne	.-4      	; 0x36f6 <LCD_displayCharacter+0x75c>
    36fa:	98 8b       	std	Y+16, r25	; 0x10
    36fc:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    36fe:	83 e0       	ldi	r24, 0x03	; 3
    3700:	66 e0       	ldi	r22, 0x06	; 6
    3702:	40 e0       	ldi	r20, 0x00	; 0
    3704:	0e 94 17 10 	call	0x202e	; 0x202e <GPIO_writePin>
    3708:	80 e0       	ldi	r24, 0x00	; 0
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	a0 e8       	ldi	r26, 0x80	; 128
    370e:	bf e3       	ldi	r27, 0x3F	; 63
    3710:	8b 87       	std	Y+11, r24	; 0x0b
    3712:	9c 87       	std	Y+12, r25	; 0x0c
    3714:	ad 87       	std	Y+13, r26	; 0x0d
    3716:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3718:	6b 85       	ldd	r22, Y+11	; 0x0b
    371a:	7c 85       	ldd	r23, Y+12	; 0x0c
    371c:	8d 85       	ldd	r24, Y+13	; 0x0d
    371e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3720:	20 e0       	ldi	r18, 0x00	; 0
    3722:	30 e0       	ldi	r19, 0x00	; 0
    3724:	4a e7       	ldi	r20, 0x7A	; 122
    3726:	53 e4       	ldi	r21, 0x43	; 67
    3728:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    372c:	dc 01       	movw	r26, r24
    372e:	cb 01       	movw	r24, r22
    3730:	8f 83       	std	Y+7, r24	; 0x07
    3732:	98 87       	std	Y+8, r25	; 0x08
    3734:	a9 87       	std	Y+9, r26	; 0x09
    3736:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3738:	6f 81       	ldd	r22, Y+7	; 0x07
    373a:	78 85       	ldd	r23, Y+8	; 0x08
    373c:	89 85       	ldd	r24, Y+9	; 0x09
    373e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3740:	20 e0       	ldi	r18, 0x00	; 0
    3742:	30 e0       	ldi	r19, 0x00	; 0
    3744:	40 e8       	ldi	r20, 0x80	; 128
    3746:	5f e3       	ldi	r21, 0x3F	; 63
    3748:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    374c:	88 23       	and	r24, r24
    374e:	2c f4       	brge	.+10     	; 0x375a <LCD_displayCharacter+0x7c0>
		__ticks = 1;
    3750:	81 e0       	ldi	r24, 0x01	; 1
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	9e 83       	std	Y+6, r25	; 0x06
    3756:	8d 83       	std	Y+5, r24	; 0x05
    3758:	3f c0       	rjmp	.+126    	; 0x37d8 <LCD_displayCharacter+0x83e>
	else if (__tmp > 65535)
    375a:	6f 81       	ldd	r22, Y+7	; 0x07
    375c:	78 85       	ldd	r23, Y+8	; 0x08
    375e:	89 85       	ldd	r24, Y+9	; 0x09
    3760:	9a 85       	ldd	r25, Y+10	; 0x0a
    3762:	20 e0       	ldi	r18, 0x00	; 0
    3764:	3f ef       	ldi	r19, 0xFF	; 255
    3766:	4f e7       	ldi	r20, 0x7F	; 127
    3768:	57 e4       	ldi	r21, 0x47	; 71
    376a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    376e:	18 16       	cp	r1, r24
    3770:	4c f5       	brge	.+82     	; 0x37c4 <LCD_displayCharacter+0x82a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3772:	6b 85       	ldd	r22, Y+11	; 0x0b
    3774:	7c 85       	ldd	r23, Y+12	; 0x0c
    3776:	8d 85       	ldd	r24, Y+13	; 0x0d
    3778:	9e 85       	ldd	r25, Y+14	; 0x0e
    377a:	20 e0       	ldi	r18, 0x00	; 0
    377c:	30 e0       	ldi	r19, 0x00	; 0
    377e:	40 e2       	ldi	r20, 0x20	; 32
    3780:	51 e4       	ldi	r21, 0x41	; 65
    3782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3786:	dc 01       	movw	r26, r24
    3788:	cb 01       	movw	r24, r22
    378a:	bc 01       	movw	r22, r24
    378c:	cd 01       	movw	r24, r26
    378e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3792:	dc 01       	movw	r26, r24
    3794:	cb 01       	movw	r24, r22
    3796:	9e 83       	std	Y+6, r25	; 0x06
    3798:	8d 83       	std	Y+5, r24	; 0x05
    379a:	0f c0       	rjmp	.+30     	; 0x37ba <LCD_displayCharacter+0x820>
    379c:	89 e1       	ldi	r24, 0x19	; 25
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	9c 83       	std	Y+4, r25	; 0x04
    37a2:	8b 83       	std	Y+3, r24	; 0x03
    37a4:	8b 81       	ldd	r24, Y+3	; 0x03
    37a6:	9c 81       	ldd	r25, Y+4	; 0x04
    37a8:	01 97       	sbiw	r24, 0x01	; 1
    37aa:	f1 f7       	brne	.-4      	; 0x37a8 <LCD_displayCharacter+0x80e>
    37ac:	9c 83       	std	Y+4, r25	; 0x04
    37ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37b0:	8d 81       	ldd	r24, Y+5	; 0x05
    37b2:	9e 81       	ldd	r25, Y+6	; 0x06
    37b4:	01 97       	sbiw	r24, 0x01	; 1
    37b6:	9e 83       	std	Y+6, r25	; 0x06
    37b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37ba:	8d 81       	ldd	r24, Y+5	; 0x05
    37bc:	9e 81       	ldd	r25, Y+6	; 0x06
    37be:	00 97       	sbiw	r24, 0x00	; 0
    37c0:	69 f7       	brne	.-38     	; 0x379c <LCD_displayCharacter+0x802>
    37c2:	14 c0       	rjmp	.+40     	; 0x37ec <LCD_displayCharacter+0x852>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37c4:	6f 81       	ldd	r22, Y+7	; 0x07
    37c6:	78 85       	ldd	r23, Y+8	; 0x08
    37c8:	89 85       	ldd	r24, Y+9	; 0x09
    37ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    37cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37d0:	dc 01       	movw	r26, r24
    37d2:	cb 01       	movw	r24, r22
    37d4:	9e 83       	std	Y+6, r25	; 0x06
    37d6:	8d 83       	std	Y+5, r24	; 0x05
    37d8:	8d 81       	ldd	r24, Y+5	; 0x05
    37da:	9e 81       	ldd	r25, Y+6	; 0x06
    37dc:	9a 83       	std	Y+2, r25	; 0x02
    37de:	89 83       	std	Y+1, r24	; 0x01
    37e0:	89 81       	ldd	r24, Y+1	; 0x01
    37e2:	9a 81       	ldd	r25, Y+2	; 0x02
    37e4:	01 97       	sbiw	r24, 0x01	; 1
    37e6:	f1 f7       	brne	.-4      	; 0x37e4 <LCD_displayCharacter+0x84a>
    37e8:	9a 83       	std	Y+2, r25	; 0x02
    37ea:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    37ec:	cc 59       	subi	r28, 0x9C	; 156
    37ee:	df 4f       	sbci	r29, 0xFF	; 255
    37f0:	0f b6       	in	r0, 0x3f	; 63
    37f2:	f8 94       	cli
    37f4:	de bf       	out	0x3e, r29	; 62
    37f6:	0f be       	out	0x3f, r0	; 63
    37f8:	cd bf       	out	0x3d, r28	; 61
    37fa:	cf 91       	pop	r28
    37fc:	df 91       	pop	r29
    37fe:	1f 91       	pop	r17
    3800:	0f 91       	pop	r16
    3802:	08 95       	ret

00003804 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3804:	df 93       	push	r29
    3806:	cf 93       	push	r28
    3808:	00 d0       	rcall	.+0      	; 0x380a <LCD_displayString+0x6>
    380a:	0f 92       	push	r0
    380c:	cd b7       	in	r28, 0x3d	; 61
    380e:	de b7       	in	r29, 0x3e	; 62
    3810:	9b 83       	std	Y+3, r25	; 0x03
    3812:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3814:	19 82       	std	Y+1, r1	; 0x01
    3816:	0e c0       	rjmp	.+28     	; 0x3834 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3818:	89 81       	ldd	r24, Y+1	; 0x01
    381a:	28 2f       	mov	r18, r24
    381c:	30 e0       	ldi	r19, 0x00	; 0
    381e:	8a 81       	ldd	r24, Y+2	; 0x02
    3820:	9b 81       	ldd	r25, Y+3	; 0x03
    3822:	fc 01       	movw	r30, r24
    3824:	e2 0f       	add	r30, r18
    3826:	f3 1f       	adc	r31, r19
    3828:	80 81       	ld	r24, Z
    382a:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_displayCharacter>
		i++;
    382e:	89 81       	ldd	r24, Y+1	; 0x01
    3830:	8f 5f       	subi	r24, 0xFF	; 255
    3832:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3834:	89 81       	ldd	r24, Y+1	; 0x01
    3836:	28 2f       	mov	r18, r24
    3838:	30 e0       	ldi	r19, 0x00	; 0
    383a:	8a 81       	ldd	r24, Y+2	; 0x02
    383c:	9b 81       	ldd	r25, Y+3	; 0x03
    383e:	fc 01       	movw	r30, r24
    3840:	e2 0f       	add	r30, r18
    3842:	f3 1f       	adc	r31, r19
    3844:	80 81       	ld	r24, Z
    3846:	88 23       	and	r24, r24
    3848:	39 f7       	brne	.-50     	; 0x3818 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    384a:	0f 90       	pop	r0
    384c:	0f 90       	pop	r0
    384e:	0f 90       	pop	r0
    3850:	cf 91       	pop	r28
    3852:	df 91       	pop	r29
    3854:	08 95       	ret

00003856 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3856:	df 93       	push	r29
    3858:	cf 93       	push	r28
    385a:	00 d0       	rcall	.+0      	; 0x385c <LCD_moveCursor+0x6>
    385c:	00 d0       	rcall	.+0      	; 0x385e <LCD_moveCursor+0x8>
    385e:	0f 92       	push	r0
    3860:	cd b7       	in	r28, 0x3d	; 61
    3862:	de b7       	in	r29, 0x3e	; 62
    3864:	8a 83       	std	Y+2, r24	; 0x02
    3866:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3868:	8a 81       	ldd	r24, Y+2	; 0x02
    386a:	28 2f       	mov	r18, r24
    386c:	30 e0       	ldi	r19, 0x00	; 0
    386e:	3d 83       	std	Y+5, r19	; 0x05
    3870:	2c 83       	std	Y+4, r18	; 0x04
    3872:	8c 81       	ldd	r24, Y+4	; 0x04
    3874:	9d 81       	ldd	r25, Y+5	; 0x05
    3876:	81 30       	cpi	r24, 0x01	; 1
    3878:	91 05       	cpc	r25, r1
    387a:	c1 f0       	breq	.+48     	; 0x38ac <LCD_moveCursor+0x56>
    387c:	2c 81       	ldd	r18, Y+4	; 0x04
    387e:	3d 81       	ldd	r19, Y+5	; 0x05
    3880:	22 30       	cpi	r18, 0x02	; 2
    3882:	31 05       	cpc	r19, r1
    3884:	2c f4       	brge	.+10     	; 0x3890 <LCD_moveCursor+0x3a>
    3886:	8c 81       	ldd	r24, Y+4	; 0x04
    3888:	9d 81       	ldd	r25, Y+5	; 0x05
    388a:	00 97       	sbiw	r24, 0x00	; 0
    388c:	61 f0       	breq	.+24     	; 0x38a6 <LCD_moveCursor+0x50>
    388e:	19 c0       	rjmp	.+50     	; 0x38c2 <LCD_moveCursor+0x6c>
    3890:	2c 81       	ldd	r18, Y+4	; 0x04
    3892:	3d 81       	ldd	r19, Y+5	; 0x05
    3894:	22 30       	cpi	r18, 0x02	; 2
    3896:	31 05       	cpc	r19, r1
    3898:	69 f0       	breq	.+26     	; 0x38b4 <LCD_moveCursor+0x5e>
    389a:	8c 81       	ldd	r24, Y+4	; 0x04
    389c:	9d 81       	ldd	r25, Y+5	; 0x05
    389e:	83 30       	cpi	r24, 0x03	; 3
    38a0:	91 05       	cpc	r25, r1
    38a2:	61 f0       	breq	.+24     	; 0x38bc <LCD_moveCursor+0x66>
    38a4:	0e c0       	rjmp	.+28     	; 0x38c2 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    38a6:	8b 81       	ldd	r24, Y+3	; 0x03
    38a8:	89 83       	std	Y+1, r24	; 0x01
    38aa:	0b c0       	rjmp	.+22     	; 0x38c2 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    38ac:	8b 81       	ldd	r24, Y+3	; 0x03
    38ae:	80 5c       	subi	r24, 0xC0	; 192
    38b0:	89 83       	std	Y+1, r24	; 0x01
    38b2:	07 c0       	rjmp	.+14     	; 0x38c2 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    38b4:	8b 81       	ldd	r24, Y+3	; 0x03
    38b6:	80 5f       	subi	r24, 0xF0	; 240
    38b8:	89 83       	std	Y+1, r24	; 0x01
    38ba:	03 c0       	rjmp	.+6      	; 0x38c2 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    38bc:	8b 81       	ldd	r24, Y+3	; 0x03
    38be:	80 5b       	subi	r24, 0xB0	; 176
    38c0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    38c2:	89 81       	ldd	r24, Y+1	; 0x01
    38c4:	80 68       	ori	r24, 0x80	; 128
    38c6:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_sendCommand>
}
    38ca:	0f 90       	pop	r0
    38cc:	0f 90       	pop	r0
    38ce:	0f 90       	pop	r0
    38d0:	0f 90       	pop	r0
    38d2:	0f 90       	pop	r0
    38d4:	cf 91       	pop	r28
    38d6:	df 91       	pop	r29
    38d8:	08 95       	ret

000038da <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    38da:	df 93       	push	r29
    38dc:	cf 93       	push	r28
    38de:	00 d0       	rcall	.+0      	; 0x38e0 <LCD_displayStringRowColumn+0x6>
    38e0:	00 d0       	rcall	.+0      	; 0x38e2 <LCD_displayStringRowColumn+0x8>
    38e2:	cd b7       	in	r28, 0x3d	; 61
    38e4:	de b7       	in	r29, 0x3e	; 62
    38e6:	89 83       	std	Y+1, r24	; 0x01
    38e8:	6a 83       	std	Y+2, r22	; 0x02
    38ea:	5c 83       	std	Y+4, r21	; 0x04
    38ec:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    38ee:	89 81       	ldd	r24, Y+1	; 0x01
    38f0:	6a 81       	ldd	r22, Y+2	; 0x02
    38f2:	0e 94 2b 1c 	call	0x3856	; 0x3856 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    38f6:	8b 81       	ldd	r24, Y+3	; 0x03
    38f8:	9c 81       	ldd	r25, Y+4	; 0x04
    38fa:	0e 94 02 1c 	call	0x3804	; 0x3804 <LCD_displayString>
}
    38fe:	0f 90       	pop	r0
    3900:	0f 90       	pop	r0
    3902:	0f 90       	pop	r0
    3904:	0f 90       	pop	r0
    3906:	cf 91       	pop	r28
    3908:	df 91       	pop	r29
    390a:	08 95       	ret

0000390c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    390c:	df 93       	push	r29
    390e:	cf 93       	push	r28
    3910:	cd b7       	in	r28, 0x3d	; 61
    3912:	de b7       	in	r29, 0x3e	; 62
    3914:	62 97       	sbiw	r28, 0x12	; 18
    3916:	0f b6       	in	r0, 0x3f	; 63
    3918:	f8 94       	cli
    391a:	de bf       	out	0x3e, r29	; 62
    391c:	0f be       	out	0x3f, r0	; 63
    391e:	cd bf       	out	0x3d, r28	; 61
    3920:	9a 8b       	std	Y+18, r25	; 0x12
    3922:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3924:	89 89       	ldd	r24, Y+17	; 0x11
    3926:	9a 89       	ldd	r25, Y+18	; 0x12
    3928:	9e 01       	movw	r18, r28
    392a:	2f 5f       	subi	r18, 0xFF	; 255
    392c:	3f 4f       	sbci	r19, 0xFF	; 255
    392e:	b9 01       	movw	r22, r18
    3930:	4a e0       	ldi	r20, 0x0A	; 10
    3932:	50 e0       	ldi	r21, 0x00	; 0
    3934:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <itoa>
   LCD_displayString(buff); /* Display the string */
    3938:	ce 01       	movw	r24, r28
    393a:	01 96       	adiw	r24, 0x01	; 1
    393c:	0e 94 02 1c 	call	0x3804	; 0x3804 <LCD_displayString>
}
    3940:	62 96       	adiw	r28, 0x12	; 18
    3942:	0f b6       	in	r0, 0x3f	; 63
    3944:	f8 94       	cli
    3946:	de bf       	out	0x3e, r29	; 62
    3948:	0f be       	out	0x3f, r0	; 63
    394a:	cd bf       	out	0x3d, r28	; 61
    394c:	cf 91       	pop	r28
    394e:	df 91       	pop	r29
    3950:	08 95       	ret

00003952 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3952:	df 93       	push	r29
    3954:	cf 93       	push	r28
    3956:	cd b7       	in	r28, 0x3d	; 61
    3958:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    395a:	81 e0       	ldi	r24, 0x01	; 1
    395c:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_sendCommand>
}
    3960:	cf 91       	pop	r28
    3962:	df 91       	pop	r29
    3964:	08 95       	ret

00003966 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    3966:	df 93       	push	r29
    3968:	cf 93       	push	r28
    396a:	00 d0       	rcall	.+0      	; 0x396c <UART_init+0x6>
    396c:	00 d0       	rcall	.+0      	; 0x396e <UART_init+0x8>
    396e:	cd b7       	in	r28, 0x3d	; 61
    3970:	de b7       	in	r29, 0x3e	; 62
    3972:	9c 83       	std	Y+4, r25	; 0x04
    3974:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3976:	1a 82       	std	Y+2, r1	; 0x02
    3978:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    397a:	eb e2       	ldi	r30, 0x2B	; 43
    397c:	f0 e0       	ldi	r31, 0x00	; 0
    397e:	82 e0       	ldi	r24, 0x02	; 2
    3980:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3982:	ea e2       	ldi	r30, 0x2A	; 42
    3984:	f0 e0       	ldi	r31, 0x00	; 0
    3986:	88 e1       	ldi	r24, 0x18	; 24
    3988:	80 83       	st	Z, r24
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	

	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->ch_size)<<1) ;
    398a:	a0 e4       	ldi	r26, 0x40	; 64
    398c:	b0 e0       	ldi	r27, 0x00	; 0
    398e:	e0 e4       	ldi	r30, 0x40	; 64
    3990:	f0 e0       	ldi	r31, 0x00	; 0
    3992:	80 81       	ld	r24, Z
    3994:	28 2f       	mov	r18, r24
    3996:	29 7f       	andi	r18, 0xF9	; 249
    3998:	eb 81       	ldd	r30, Y+3	; 0x03
    399a:	fc 81       	ldd	r31, Y+4	; 0x04
    399c:	86 81       	ldd	r24, Z+6	; 0x06
    399e:	88 2f       	mov	r24, r24
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	88 0f       	add	r24, r24
    39a4:	99 1f       	adc	r25, r25
    39a6:	82 2b       	or	r24, r18
    39a8:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->Parity)<<4) ;
    39aa:	a0 e4       	ldi	r26, 0x40	; 64
    39ac:	b0 e0       	ldi	r27, 0x00	; 0
    39ae:	e0 e4       	ldi	r30, 0x40	; 64
    39b0:	f0 e0       	ldi	r31, 0x00	; 0
    39b2:	80 81       	ld	r24, Z
    39b4:	28 2f       	mov	r18, r24
    39b6:	2f 7c       	andi	r18, 0xCF	; 207
    39b8:	eb 81       	ldd	r30, Y+3	; 0x03
    39ba:	fc 81       	ldd	r31, Y+4	; 0x04
    39bc:	84 81       	ldd	r24, Z+4	; 0x04
    39be:	88 2f       	mov	r24, r24
    39c0:	90 e0       	ldi	r25, 0x00	; 0
    39c2:	82 95       	swap	r24
    39c4:	92 95       	swap	r25
    39c6:	90 7f       	andi	r25, 0xF0	; 240
    39c8:	98 27       	eor	r25, r24
    39ca:	80 7f       	andi	r24, 0xF0	; 240
    39cc:	98 27       	eor	r25, r24
    39ce:	82 2b       	or	r24, r18
    39d0:	8c 93       	st	X, r24
	
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->Stop)<<3) ;
    39d2:	a0 e4       	ldi	r26, 0x40	; 64
    39d4:	b0 e0       	ldi	r27, 0x00	; 0
    39d6:	e0 e4       	ldi	r30, 0x40	; 64
    39d8:	f0 e0       	ldi	r31, 0x00	; 0
    39da:	80 81       	ld	r24, Z
    39dc:	28 2f       	mov	r18, r24
    39de:	27 7f       	andi	r18, 0xF7	; 247
    39e0:	eb 81       	ldd	r30, Y+3	; 0x03
    39e2:	fc 81       	ldd	r31, Y+4	; 0x04
    39e4:	85 81       	ldd	r24, Z+5	; 0x05
    39e6:	88 2f       	mov	r24, r24
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	88 0f       	add	r24, r24
    39ec:	99 1f       	adc	r25, r25
    39ee:	88 0f       	add	r24, r24
    39f0:	99 1f       	adc	r25, r25
    39f2:	88 0f       	add	r24, r24
    39f4:	99 1f       	adc	r25, r25
    39f6:	82 2b       	or	r24, r18
    39f8:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    39fa:	eb 81       	ldd	r30, Y+3	; 0x03
    39fc:	fc 81       	ldd	r31, Y+4	; 0x04
    39fe:	80 81       	ld	r24, Z
    3a00:	91 81       	ldd	r25, Z+1	; 0x01
    3a02:	a2 81       	ldd	r26, Z+2	; 0x02
    3a04:	b3 81       	ldd	r27, Z+3	; 0x03
    3a06:	88 0f       	add	r24, r24
    3a08:	99 1f       	adc	r25, r25
    3a0a:	aa 1f       	adc	r26, r26
    3a0c:	bb 1f       	adc	r27, r27
    3a0e:	88 0f       	add	r24, r24
    3a10:	99 1f       	adc	r25, r25
    3a12:	aa 1f       	adc	r26, r26
    3a14:	bb 1f       	adc	r27, r27
    3a16:	88 0f       	add	r24, r24
    3a18:	99 1f       	adc	r25, r25
    3a1a:	aa 1f       	adc	r26, r26
    3a1c:	bb 1f       	adc	r27, r27
    3a1e:	9c 01       	movw	r18, r24
    3a20:	ad 01       	movw	r20, r26
    3a22:	80 e4       	ldi	r24, 0x40	; 64
    3a24:	92 e4       	ldi	r25, 0x42	; 66
    3a26:	af e0       	ldi	r26, 0x0F	; 15
    3a28:	b0 e0       	ldi	r27, 0x00	; 0
    3a2a:	bc 01       	movw	r22, r24
    3a2c:	cd 01       	movw	r24, r26
    3a2e:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <__udivmodsi4>
    3a32:	da 01       	movw	r26, r20
    3a34:	c9 01       	movw	r24, r18
    3a36:	01 97       	sbiw	r24, 0x01	; 1
    3a38:	9a 83       	std	Y+2, r25	; 0x02
    3a3a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3a3c:	e0 e4       	ldi	r30, 0x40	; 64
    3a3e:	f0 e0       	ldi	r31, 0x00	; 0
    3a40:	89 81       	ldd	r24, Y+1	; 0x01
    3a42:	9a 81       	ldd	r25, Y+2	; 0x02
    3a44:	89 2f       	mov	r24, r25
    3a46:	99 27       	eor	r25, r25
    3a48:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3a4a:	e9 e2       	ldi	r30, 0x29	; 41
    3a4c:	f0 e0       	ldi	r31, 0x00	; 0
    3a4e:	89 81       	ldd	r24, Y+1	; 0x01
    3a50:	80 83       	st	Z, r24
}
    3a52:	0f 90       	pop	r0
    3a54:	0f 90       	pop	r0
    3a56:	0f 90       	pop	r0
    3a58:	0f 90       	pop	r0
    3a5a:	cf 91       	pop	r28
    3a5c:	df 91       	pop	r29
    3a5e:	08 95       	ret

00003a60 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3a60:	df 93       	push	r29
    3a62:	cf 93       	push	r28
    3a64:	0f 92       	push	r0
    3a66:	cd b7       	in	r28, 0x3d	; 61
    3a68:	de b7       	in	r29, 0x3e	; 62
    3a6a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3a6c:	eb e2       	ldi	r30, 0x2B	; 43
    3a6e:	f0 e0       	ldi	r31, 0x00	; 0
    3a70:	80 81       	ld	r24, Z
    3a72:	88 2f       	mov	r24, r24
    3a74:	90 e0       	ldi	r25, 0x00	; 0
    3a76:	80 72       	andi	r24, 0x20	; 32
    3a78:	90 70       	andi	r25, 0x00	; 0
    3a7a:	00 97       	sbiw	r24, 0x00	; 0
    3a7c:	b9 f3       	breq	.-18     	; 0x3a6c <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3a7e:	ec e2       	ldi	r30, 0x2C	; 44
    3a80:	f0 e0       	ldi	r31, 0x00	; 0
    3a82:	89 81       	ldd	r24, Y+1	; 0x01
    3a84:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3a86:	0f 90       	pop	r0
    3a88:	cf 91       	pop	r28
    3a8a:	df 91       	pop	r29
    3a8c:	08 95       	ret

00003a8e <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3a8e:	df 93       	push	r29
    3a90:	cf 93       	push	r28
    3a92:	cd b7       	in	r28, 0x3d	; 61
    3a94:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3a96:	eb e2       	ldi	r30, 0x2B	; 43
    3a98:	f0 e0       	ldi	r31, 0x00	; 0
    3a9a:	80 81       	ld	r24, Z
    3a9c:	88 23       	and	r24, r24
    3a9e:	dc f7       	brge	.-10     	; 0x3a96 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3aa0:	ec e2       	ldi	r30, 0x2C	; 44
    3aa2:	f0 e0       	ldi	r31, 0x00	; 0
    3aa4:	80 81       	ld	r24, Z
}
    3aa6:	cf 91       	pop	r28
    3aa8:	df 91       	pop	r29
    3aaa:	08 95       	ret

00003aac <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3aac:	df 93       	push	r29
    3aae:	cf 93       	push	r28
    3ab0:	00 d0       	rcall	.+0      	; 0x3ab2 <UART_sendString+0x6>
    3ab2:	0f 92       	push	r0
    3ab4:	cd b7       	in	r28, 0x3d	; 61
    3ab6:	de b7       	in	r29, 0x3e	; 62
    3ab8:	9b 83       	std	Y+3, r25	; 0x03
    3aba:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3abc:	19 82       	std	Y+1, r1	; 0x01
    3abe:	0e c0       	rjmp	.+28     	; 0x3adc <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3ac0:	89 81       	ldd	r24, Y+1	; 0x01
    3ac2:	28 2f       	mov	r18, r24
    3ac4:	30 e0       	ldi	r19, 0x00	; 0
    3ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ac8:	9b 81       	ldd	r25, Y+3	; 0x03
    3aca:	fc 01       	movw	r30, r24
    3acc:	e2 0f       	add	r30, r18
    3ace:	f3 1f       	adc	r31, r19
    3ad0:	80 81       	ld	r24, Z
    3ad2:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <UART_sendByte>
		i++;
    3ad6:	89 81       	ldd	r24, Y+1	; 0x01
    3ad8:	8f 5f       	subi	r24, 0xFF	; 255
    3ada:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3adc:	89 81       	ldd	r24, Y+1	; 0x01
    3ade:	28 2f       	mov	r18, r24
    3ae0:	30 e0       	ldi	r19, 0x00	; 0
    3ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ae4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ae6:	fc 01       	movw	r30, r24
    3ae8:	e2 0f       	add	r30, r18
    3aea:	f3 1f       	adc	r31, r19
    3aec:	80 81       	ld	r24, Z
    3aee:	88 23       	and	r24, r24
    3af0:	39 f7       	brne	.-50     	; 0x3ac0 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3af2:	0f 90       	pop	r0
    3af4:	0f 90       	pop	r0
    3af6:	0f 90       	pop	r0
    3af8:	cf 91       	pop	r28
    3afa:	df 91       	pop	r29
    3afc:	08 95       	ret

00003afe <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3afe:	0f 93       	push	r16
    3b00:	1f 93       	push	r17
    3b02:	df 93       	push	r29
    3b04:	cf 93       	push	r28
    3b06:	00 d0       	rcall	.+0      	; 0x3b08 <UART_receiveString+0xa>
    3b08:	0f 92       	push	r0
    3b0a:	cd b7       	in	r28, 0x3d	; 61
    3b0c:	de b7       	in	r29, 0x3e	; 62
    3b0e:	9b 83       	std	Y+3, r25	; 0x03
    3b10:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3b12:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3b14:	89 81       	ldd	r24, Y+1	; 0x01
    3b16:	28 2f       	mov	r18, r24
    3b18:	30 e0       	ldi	r19, 0x00	; 0
    3b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b1c:	9b 81       	ldd	r25, Y+3	; 0x03
    3b1e:	8c 01       	movw	r16, r24
    3b20:	02 0f       	add	r16, r18
    3b22:	13 1f       	adc	r17, r19
    3b24:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <UART_recieveByte>
    3b28:	f8 01       	movw	r30, r16
    3b2a:	80 83       	st	Z, r24
    3b2c:	0f c0       	rjmp	.+30     	; 0x3b4c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3b2e:	89 81       	ldd	r24, Y+1	; 0x01
    3b30:	8f 5f       	subi	r24, 0xFF	; 255
    3b32:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3b34:	89 81       	ldd	r24, Y+1	; 0x01
    3b36:	28 2f       	mov	r18, r24
    3b38:	30 e0       	ldi	r19, 0x00	; 0
    3b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    3b3e:	8c 01       	movw	r16, r24
    3b40:	02 0f       	add	r16, r18
    3b42:	13 1f       	adc	r17, r19
    3b44:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <UART_recieveByte>
    3b48:	f8 01       	movw	r30, r16
    3b4a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3b4c:	89 81       	ldd	r24, Y+1	; 0x01
    3b4e:	28 2f       	mov	r18, r24
    3b50:	30 e0       	ldi	r19, 0x00	; 0
    3b52:	8a 81       	ldd	r24, Y+2	; 0x02
    3b54:	9b 81       	ldd	r25, Y+3	; 0x03
    3b56:	fc 01       	movw	r30, r24
    3b58:	e2 0f       	add	r30, r18
    3b5a:	f3 1f       	adc	r31, r19
    3b5c:	80 81       	ld	r24, Z
    3b5e:	83 32       	cpi	r24, 0x23	; 35
    3b60:	31 f7       	brne	.-52     	; 0x3b2e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3b62:	89 81       	ldd	r24, Y+1	; 0x01
    3b64:	28 2f       	mov	r18, r24
    3b66:	30 e0       	ldi	r19, 0x00	; 0
    3b68:	8a 81       	ldd	r24, Y+2	; 0x02
    3b6a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b6c:	fc 01       	movw	r30, r24
    3b6e:	e2 0f       	add	r30, r18
    3b70:	f3 1f       	adc	r31, r19
    3b72:	10 82       	st	Z, r1
}
    3b74:	0f 90       	pop	r0
    3b76:	0f 90       	pop	r0
    3b78:	0f 90       	pop	r0
    3b7a:	cf 91       	pop	r28
    3b7c:	df 91       	pop	r29
    3b7e:	1f 91       	pop	r17
    3b80:	0f 91       	pop	r16
    3b82:	08 95       	ret

00003b84 <__udivmodsi4>:
    3b84:	a1 e2       	ldi	r26, 0x21	; 33
    3b86:	1a 2e       	mov	r1, r26
    3b88:	aa 1b       	sub	r26, r26
    3b8a:	bb 1b       	sub	r27, r27
    3b8c:	fd 01       	movw	r30, r26
    3b8e:	0d c0       	rjmp	.+26     	; 0x3baa <__udivmodsi4_ep>

00003b90 <__udivmodsi4_loop>:
    3b90:	aa 1f       	adc	r26, r26
    3b92:	bb 1f       	adc	r27, r27
    3b94:	ee 1f       	adc	r30, r30
    3b96:	ff 1f       	adc	r31, r31
    3b98:	a2 17       	cp	r26, r18
    3b9a:	b3 07       	cpc	r27, r19
    3b9c:	e4 07       	cpc	r30, r20
    3b9e:	f5 07       	cpc	r31, r21
    3ba0:	20 f0       	brcs	.+8      	; 0x3baa <__udivmodsi4_ep>
    3ba2:	a2 1b       	sub	r26, r18
    3ba4:	b3 0b       	sbc	r27, r19
    3ba6:	e4 0b       	sbc	r30, r20
    3ba8:	f5 0b       	sbc	r31, r21

00003baa <__udivmodsi4_ep>:
    3baa:	66 1f       	adc	r22, r22
    3bac:	77 1f       	adc	r23, r23
    3bae:	88 1f       	adc	r24, r24
    3bb0:	99 1f       	adc	r25, r25
    3bb2:	1a 94       	dec	r1
    3bb4:	69 f7       	brne	.-38     	; 0x3b90 <__udivmodsi4_loop>
    3bb6:	60 95       	com	r22
    3bb8:	70 95       	com	r23
    3bba:	80 95       	com	r24
    3bbc:	90 95       	com	r25
    3bbe:	9b 01       	movw	r18, r22
    3bc0:	ac 01       	movw	r20, r24
    3bc2:	bd 01       	movw	r22, r26
    3bc4:	cf 01       	movw	r24, r30
    3bc6:	08 95       	ret

00003bc8 <__prologue_saves__>:
    3bc8:	2f 92       	push	r2
    3bca:	3f 92       	push	r3
    3bcc:	4f 92       	push	r4
    3bce:	5f 92       	push	r5
    3bd0:	6f 92       	push	r6
    3bd2:	7f 92       	push	r7
    3bd4:	8f 92       	push	r8
    3bd6:	9f 92       	push	r9
    3bd8:	af 92       	push	r10
    3bda:	bf 92       	push	r11
    3bdc:	cf 92       	push	r12
    3bde:	df 92       	push	r13
    3be0:	ef 92       	push	r14
    3be2:	ff 92       	push	r15
    3be4:	0f 93       	push	r16
    3be6:	1f 93       	push	r17
    3be8:	cf 93       	push	r28
    3bea:	df 93       	push	r29
    3bec:	cd b7       	in	r28, 0x3d	; 61
    3bee:	de b7       	in	r29, 0x3e	; 62
    3bf0:	ca 1b       	sub	r28, r26
    3bf2:	db 0b       	sbc	r29, r27
    3bf4:	0f b6       	in	r0, 0x3f	; 63
    3bf6:	f8 94       	cli
    3bf8:	de bf       	out	0x3e, r29	; 62
    3bfa:	0f be       	out	0x3f, r0	; 63
    3bfc:	cd bf       	out	0x3d, r28	; 61
    3bfe:	09 94       	ijmp

00003c00 <__epilogue_restores__>:
    3c00:	2a 88       	ldd	r2, Y+18	; 0x12
    3c02:	39 88       	ldd	r3, Y+17	; 0x11
    3c04:	48 88       	ldd	r4, Y+16	; 0x10
    3c06:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c08:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c0a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c0c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c0e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c10:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c12:	b9 84       	ldd	r11, Y+9	; 0x09
    3c14:	c8 84       	ldd	r12, Y+8	; 0x08
    3c16:	df 80       	ldd	r13, Y+7	; 0x07
    3c18:	ee 80       	ldd	r14, Y+6	; 0x06
    3c1a:	fd 80       	ldd	r15, Y+5	; 0x05
    3c1c:	0c 81       	ldd	r16, Y+4	; 0x04
    3c1e:	1b 81       	ldd	r17, Y+3	; 0x03
    3c20:	aa 81       	ldd	r26, Y+2	; 0x02
    3c22:	b9 81       	ldd	r27, Y+1	; 0x01
    3c24:	ce 0f       	add	r28, r30
    3c26:	d1 1d       	adc	r29, r1
    3c28:	0f b6       	in	r0, 0x3f	; 63
    3c2a:	f8 94       	cli
    3c2c:	de bf       	out	0x3e, r29	; 62
    3c2e:	0f be       	out	0x3f, r0	; 63
    3c30:	cd bf       	out	0x3d, r28	; 61
    3c32:	ed 01       	movw	r28, r26
    3c34:	08 95       	ret

00003c36 <itoa>:
    3c36:	fb 01       	movw	r30, r22
    3c38:	9f 01       	movw	r18, r30
    3c3a:	e8 94       	clt
    3c3c:	42 30       	cpi	r20, 0x02	; 2
    3c3e:	c4 f0       	brlt	.+48     	; 0x3c70 <itoa+0x3a>
    3c40:	45 32       	cpi	r20, 0x25	; 37
    3c42:	b4 f4       	brge	.+44     	; 0x3c70 <itoa+0x3a>
    3c44:	4a 30       	cpi	r20, 0x0A	; 10
    3c46:	29 f4       	brne	.+10     	; 0x3c52 <itoa+0x1c>
    3c48:	97 fb       	bst	r25, 7
    3c4a:	1e f4       	brtc	.+6      	; 0x3c52 <itoa+0x1c>
    3c4c:	90 95       	com	r25
    3c4e:	81 95       	neg	r24
    3c50:	9f 4f       	sbci	r25, 0xFF	; 255
    3c52:	64 2f       	mov	r22, r20
    3c54:	77 27       	eor	r23, r23
    3c56:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <__udivmodhi4>
    3c5a:	80 5d       	subi	r24, 0xD0	; 208
    3c5c:	8a 33       	cpi	r24, 0x3A	; 58
    3c5e:	0c f0       	brlt	.+2      	; 0x3c62 <itoa+0x2c>
    3c60:	89 5d       	subi	r24, 0xD9	; 217
    3c62:	81 93       	st	Z+, r24
    3c64:	cb 01       	movw	r24, r22
    3c66:	00 97       	sbiw	r24, 0x00	; 0
    3c68:	a1 f7       	brne	.-24     	; 0x3c52 <itoa+0x1c>
    3c6a:	16 f4       	brtc	.+4      	; 0x3c70 <itoa+0x3a>
    3c6c:	5d e2       	ldi	r21, 0x2D	; 45
    3c6e:	51 93       	st	Z+, r21
    3c70:	10 82       	st	Z, r1
    3c72:	c9 01       	movw	r24, r18
    3c74:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <strrev>

00003c78 <strrev>:
    3c78:	dc 01       	movw	r26, r24
    3c7a:	fc 01       	movw	r30, r24
    3c7c:	67 2f       	mov	r22, r23
    3c7e:	71 91       	ld	r23, Z+
    3c80:	77 23       	and	r23, r23
    3c82:	e1 f7       	brne	.-8      	; 0x3c7c <strrev+0x4>
    3c84:	32 97       	sbiw	r30, 0x02	; 2
    3c86:	04 c0       	rjmp	.+8      	; 0x3c90 <strrev+0x18>
    3c88:	7c 91       	ld	r23, X
    3c8a:	6d 93       	st	X+, r22
    3c8c:	70 83       	st	Z, r23
    3c8e:	62 91       	ld	r22, -Z
    3c90:	ae 17       	cp	r26, r30
    3c92:	bf 07       	cpc	r27, r31
    3c94:	c8 f3       	brcs	.-14     	; 0x3c88 <strrev+0x10>
    3c96:	08 95       	ret

00003c98 <__udivmodhi4>:
    3c98:	aa 1b       	sub	r26, r26
    3c9a:	bb 1b       	sub	r27, r27
    3c9c:	51 e1       	ldi	r21, 0x11	; 17
    3c9e:	07 c0       	rjmp	.+14     	; 0x3cae <__udivmodhi4_ep>

00003ca0 <__udivmodhi4_loop>:
    3ca0:	aa 1f       	adc	r26, r26
    3ca2:	bb 1f       	adc	r27, r27
    3ca4:	a6 17       	cp	r26, r22
    3ca6:	b7 07       	cpc	r27, r23
    3ca8:	10 f0       	brcs	.+4      	; 0x3cae <__udivmodhi4_ep>
    3caa:	a6 1b       	sub	r26, r22
    3cac:	b7 0b       	sbc	r27, r23

00003cae <__udivmodhi4_ep>:
    3cae:	88 1f       	adc	r24, r24
    3cb0:	99 1f       	adc	r25, r25
    3cb2:	5a 95       	dec	r21
    3cb4:	a9 f7       	brne	.-22     	; 0x3ca0 <__udivmodhi4_loop>
    3cb6:	80 95       	com	r24
    3cb8:	90 95       	com	r25
    3cba:	bc 01       	movw	r22, r24
    3cbc:	cd 01       	movw	r24, r26
    3cbe:	08 95       	ret

00003cc0 <_exit>:
    3cc0:	f8 94       	cli

00003cc2 <__stop_program>:
    3cc2:	ff cf       	rjmp	.-2      	; 0x3cc2 <__stop_program>
