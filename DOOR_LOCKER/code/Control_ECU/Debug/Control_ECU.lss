
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002708  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00002708  0000279c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800076  00800076  000027b2  2**0
                  ALLOC
  3 .stab         0000297c  00000000  00000000  000027b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015bd  00000000  00000000  00005130  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000066ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000682d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000699d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000085e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000094d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a280  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a3e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a66d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ae3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__vector_3>
      10:	0c 94 bd 09 	jmp	0x137a	; 0x137a <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <__vector_8>
      24:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 24 09 	jmp	0x1248	; 0x1248 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e0       	ldi	r30, 0x08	; 8
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 39       	cpi	r26, 0x91	; 145
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 82 13 	jmp	0x2704	; 0x2704 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
#include"CONTROL_ECU.h"



int main()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <main+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <main+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
    UART_init(&UART_Config);
     b52:	88 e6       	ldi	r24, 0x68	; 104
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	0e 94 1a 12 	call	0x2434	; 0x2434 <UART_init>
	SREG |= (1<<7);
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24
	Timer_setCallBack(Calculate_time,Timer0);
     b68:	8c e8       	ldi	r24, 0x8C	; 140
     b6a:	98 e0       	ldi	r25, 0x08	; 8
     b6c:	60 e0       	ldi	r22, 0x00	; 0
     b6e:	0e 94 42 0c 	call	0x1884	; 0x1884 <Timer_setCallBack>
	 */



	while(1){
		switch(recieveCommand())
     b72:	0e 94 ba 07 	call	0xf74	; 0xf74 <recieveCommand>
     b76:	28 2f       	mov	r18, r24
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	3c 83       	std	Y+4, r19	; 0x04
     b7c:	2b 83       	std	Y+3, r18	; 0x03
     b7e:	8b 81       	ldd	r24, Y+3	; 0x03
     b80:	9c 81       	ldd	r25, Y+4	; 0x04
     b82:	88 30       	cpi	r24, 0x08	; 8
     b84:	91 05       	cpc	r25, r1
     b86:	09 f4       	brne	.+2      	; 0xb8a <main+0x44>
     b88:	5d c0       	rjmp	.+186    	; 0xc44 <main+0xfe>
     b8a:	2b 81       	ldd	r18, Y+3	; 0x03
     b8c:	3c 81       	ldd	r19, Y+4	; 0x04
     b8e:	29 30       	cpi	r18, 0x09	; 9
     b90:	31 05       	cpc	r19, r1
     b92:	5c f4       	brge	.+22     	; 0xbaa <main+0x64>
     b94:	8b 81       	ldd	r24, Y+3	; 0x03
     b96:	9c 81       	ldd	r25, Y+4	; 0x04
     b98:	83 30       	cpi	r24, 0x03	; 3
     b9a:	91 05       	cpc	r25, r1
     b9c:	c1 f0       	breq	.+48     	; 0xbce <main+0x88>
     b9e:	2b 81       	ldd	r18, Y+3	; 0x03
     ba0:	3c 81       	ldd	r19, Y+4	; 0x04
     ba2:	26 30       	cpi	r18, 0x06	; 6
     ba4:	31 05       	cpc	r19, r1
     ba6:	c1 f0       	breq	.+48     	; 0xbd8 <main+0x92>
     ba8:	e4 cf       	rjmp	.-56     	; 0xb72 <main+0x2c>
     baa:	8b 81       	ldd	r24, Y+3	; 0x03
     bac:	9c 81       	ldd	r25, Y+4	; 0x04
     bae:	8a 30       	cpi	r24, 0x0A	; 10
     bb0:	91 05       	cpc	r25, r1
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <main+0x70>
     bb4:	7a c0       	rjmp	.+244    	; 0xcaa <main+0x164>
     bb6:	2b 81       	ldd	r18, Y+3	; 0x03
     bb8:	3c 81       	ldd	r19, Y+4	; 0x04
     bba:	2a 30       	cpi	r18, 0x0A	; 10
     bbc:	31 05       	cpc	r19, r1
     bbe:	3c f1       	brlt	.+78     	; 0xc0e <main+0xc8>
     bc0:	8b 81       	ldd	r24, Y+3	; 0x03
     bc2:	9c 81       	ldd	r25, Y+4	; 0x04
     bc4:	8b 30       	cpi	r24, 0x0B	; 11
     bc6:	91 05       	cpc	r25, r1
     bc8:	09 f4       	brne	.+2      	; 0xbcc <main+0x86>
     bca:	9b c0       	rjmp	.+310    	; 0xd02 <main+0x1bc>
     bcc:	d2 cf       	rjmp	.-92     	; 0xb72 <main+0x2c>
		{
		case PASSWORD_SEND:
			recievePassword(g_password);
     bce:	81 e8       	ldi	r24, 0x81	; 129
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	0e 94 a5 06 	call	0xd4a	; 0xd4a <recievePassword>
     bd6:	cd cf       	rjmp	.-102    	; 0xb72 <main+0x2c>
			break;
		case PASSWORD_CONFIRMATION_SEND:
			recievePassword(g_passmatch);
     bd8:	8c e8       	ldi	r24, 0x8C	; 140
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 a5 06 	call	0xd4a	; 0xd4a <recievePassword>
			if(Match_or_NoMatch(g_password,g_passmatch)){
     be0:	81 e8       	ldi	r24, 0x81	; 129
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	2c e8       	ldi	r18, 0x8C	; 140
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	b9 01       	movw	r22, r18
     bea:	0e 94 da 06 	call	0xdb4	; 0xdb4 <Match_or_NoMatch>
     bee:	88 23       	and	r24, r24
     bf0:	51 f0       	breq	.+20     	; 0xc06 <main+0xc0>
				storePasswordInMemory();
     bf2:	0e 94 19 07 	call	0xe32	; 0xe32 <storePasswordInMemory>
				getSavedPassword(savedpass);
     bf6:	86 e8       	ldi	r24, 0x86	; 134
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <getSavedPassword>
				sendCommand(PASSWORD_MATCH);
     bfe:	84 e0       	ldi	r24, 0x04	; 4
     c00:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <sendCommand>
     c04:	b6 cf       	rjmp	.-148    	; 0xb72 <main+0x2c>
			}
			else
			{
				sendCommand(PASSWORD_NOT_MATCHED);
     c06:	85 e0       	ldi	r24, 0x05	; 5
     c08:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <sendCommand>
     c0c:	b2 cf       	rjmp	.-156    	; 0xb72 <main+0x2c>
			}
			break;
		case CHECK_PASSWORD:
			recievePassword(g_password);
     c0e:	81 e8       	ldi	r24, 0x81	; 129
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 a5 06 	call	0xd4a	; 0xd4a <recievePassword>
			getSavedPassword(savedpass);
     c16:	86 e8       	ldi	r24, 0x86	; 134
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <getSavedPassword>
			if(Match_or_NoMatch(g_password,savedpass))
     c1e:	81 e8       	ldi	r24, 0x81	; 129
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	26 e8       	ldi	r18, 0x86	; 134
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	b9 01       	movw	r22, r18
     c28:	0e 94 da 06 	call	0xdb4	; 0xdb4 <Match_or_NoMatch>
     c2c:	88 23       	and	r24, r24
     c2e:	31 f0       	breq	.+12     	; 0xc3c <main+0xf6>
			{
				sendCommand(PASSWORD_MATCH);
     c30:	84 e0       	ldi	r24, 0x04	; 4
     c32:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <sendCommand>
				g_wrong=0;
     c36:	10 92 77 00 	sts	0x0077, r1
     c3a:	9b cf       	rjmp	.-202    	; 0xb72 <main+0x2c>
			}
			else
			{
				sendCommand(PASSWORD_NOT_MATCHED);
     c3c:	85 e0       	ldi	r24, 0x05	; 5
     c3e:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <sendCommand>
     c42:	97 cf       	rjmp	.-210    	; 0xb72 <main+0x2c>
			}
			break;
		case OPEN_DOOR:
			DcMotor_Init();
     c44:	0e 94 a3 08 	call	0x1146	; 0x1146 <DcMotor_Init>
			Timer_init(&Timer_config);
     c48:	8f e6       	ldi	r24, 0x6F	; 111
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	0e 94 23 0a 	call	0x1446	; 0x1446 <Timer_init>
			Timer_setCallBack(Calculate_time,Timer0);
     c50:	8c e8       	ldi	r24, 0x8C	; 140
     c52:	98 e0       	ldi	r25, 0x08	; 8
     c54:	60 e0       	ldi	r22, 0x00	; 0
     c56:	0e 94 42 0c 	call	0x1884	; 0x1884 <Timer_setCallBack>
			g_tick =0; /*Initially make the tick equals zero, to start from the beginning*/
     c5a:	10 92 76 00 	sts	0x0076, r1
			g_calc_sec_flag =0; /*Initially make the sec_flag equals zero,to start from the beginning*/
     c5e:	10 92 78 00 	sts	0x0078, r1
     c62:	03 c0       	rjmp	.+6      	; 0xc6a <main+0x124>

			while(g_calc_sec_flag != 15)
			{
				DcMotor_Rotate(CW);
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	0e 94 be 08 	call	0x117c	; 0x117c <DcMotor_Rotate>
			Timer_init(&Timer_config);
			Timer_setCallBack(Calculate_time,Timer0);
			g_tick =0; /*Initially make the tick equals zero, to start from the beginning*/
			g_calc_sec_flag =0; /*Initially make the sec_flag equals zero,to start from the beginning*/

			while(g_calc_sec_flag != 15)
     c6a:	80 91 78 00 	lds	r24, 0x0078
     c6e:	8f 30       	cpi	r24, 0x0F	; 15
     c70:	c9 f7       	brne	.-14     	; 0xc64 <main+0x11e>
			{
				DcMotor_Rotate(CW);
			}
			g_tick =0;
     c72:	10 92 76 00 	sts	0x0076, r1
			g_calc_sec_flag =0;
     c76:	10 92 78 00 	sts	0x0078, r1
     c7a:	03 c0       	rjmp	.+6      	; 0xc82 <main+0x13c>
			/*As long as it hasn't passed 3 seconds, stop the motor*/
			while(g_calc_sec_flag != 3)
			{
				DcMotor_Rotate(stop);
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	0e 94 be 08 	call	0x117c	; 0x117c <DcMotor_Rotate>
				DcMotor_Rotate(CW);
			}
			g_tick =0;
			g_calc_sec_flag =0;
			/*As long as it hasn't passed 3 seconds, stop the motor*/
			while(g_calc_sec_flag != 3)
     c82:	80 91 78 00 	lds	r24, 0x0078
     c86:	83 30       	cpi	r24, 0x03	; 3
     c88:	c9 f7       	brne	.-14     	; 0xc7c <main+0x136>
			{
				DcMotor_Rotate(stop);
			}
			g_tick =0;
     c8a:	10 92 76 00 	sts	0x0076, r1
			g_calc_sec_flag =0;
     c8e:	10 92 78 00 	sts	0x0078, r1
     c92:	03 c0       	rjmp	.+6      	; 0xc9a <main+0x154>
			/*As long as it hasn't passed 15 seconds, rotate the motor anti-clockwise*/
			while(g_calc_sec_flag != 15){
				DcMotor_Rotate(A_CW);
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	0e 94 be 08 	call	0x117c	; 0x117c <DcMotor_Rotate>
				DcMotor_Rotate(stop);
			}
			g_tick =0;
			g_calc_sec_flag =0;
			/*As long as it hasn't passed 15 seconds, rotate the motor anti-clockwise*/
			while(g_calc_sec_flag != 15){
     c9a:	80 91 78 00 	lds	r24, 0x0078
     c9e:	8f 30       	cpi	r24, 0x0F	; 15
     ca0:	c9 f7       	brne	.-14     	; 0xc94 <main+0x14e>
				DcMotor_Rotate(A_CW);

			}

			DcMotor_Rotate(stop);
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	0e 94 be 08 	call	0x117c	; 0x117c <DcMotor_Rotate>
     ca8:	64 cf       	rjmp	.-312    	; 0xb72 <main+0x2c>


			break;
		case WRONG_PASSWORD:
			g_wrong++;
     caa:	80 91 77 00 	lds	r24, 0x0077
     cae:	8f 5f       	subi	r24, 0xFF	; 255
     cb0:	80 93 77 00 	sts	0x0077, r24
			if(g_wrong==MAX_WRONG_COUNTER)
     cb4:	80 91 77 00 	lds	r24, 0x0077
     cb8:	83 30       	cpi	r24, 0x03	; 3
     cba:	09 f0       	breq	.+2      	; 0xcbe <main+0x178>
     cbc:	5a cf       	rjmp	.-332    	; 0xb72 <main+0x2c>
			{
				 Buzzer_init();
     cbe:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <Buzzer_init>
				Timer_init(&Timer_config);
     cc2:	8f e6       	ldi	r24, 0x6F	; 111
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	0e 94 23 0a 	call	0x1446	; 0x1446 <Timer_init>
				Timer_setCallBack( Calculate_time,Timer0);
     cca:	8c e8       	ldi	r24, 0x8C	; 140
     ccc:	98 e0       	ldi	r25, 0x08	; 8
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	0e 94 42 0c 	call	0x1884	; 0x1884 <Timer_setCallBack>
				g_tick =0; /*Initially make the tick equals zero, to start from the beginning*/
     cd4:	10 92 76 00 	sts	0x0076, r1
				g_calc_sec_flag =0; /*Initially make the sec_flag equals zero,to start from the beginning*/
     cd8:	10 92 78 00 	sts	0x0078, r1
     cdc:	03 c0       	rjmp	.+6      	; 0xce4 <main+0x19e>

				while(g_calc_sec_flag != 60)
				{
					Buzzer_state(ON );
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <Buzzer_state>
				Timer_init(&Timer_config);
				Timer_setCallBack( Calculate_time,Timer0);
				g_tick =0; /*Initially make the tick equals zero, to start from the beginning*/
				g_calc_sec_flag =0; /*Initially make the sec_flag equals zero,to start from the beginning*/

				while(g_calc_sec_flag != 60)
     ce4:	80 91 78 00 	lds	r24, 0x0078
     ce8:	8c 33       	cpi	r24, 0x3C	; 60
     cea:	c9 f7       	brne	.-14     	; 0xcde <main+0x198>
				{
					Buzzer_state(ON );
				}
				if(g_calc_sec_flag == 60)
     cec:	80 91 78 00 	lds	r24, 0x0078
     cf0:	8c 33       	cpi	r24, 0x3C	; 60
     cf2:	09 f0       	breq	.+2      	; 0xcf6 <main+0x1b0>
     cf4:	3e cf       	rjmp	.-388    	; 0xb72 <main+0x2c>
				{
					g_wrong=0;
     cf6:	10 92 77 00 	sts	0x0077, r1
					Buzzer_state(OFF );
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <Buzzer_state>
     d00:	38 cf       	rjmp	.-400    	; 0xb72 <main+0x2c>
				}
			}
			break;
		case CHECK_IF_SAVED:
			getSavedPassword(savedpass);
     d02:	86 e8       	ldi	r24, 0x86	; 134
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <getSavedPassword>
			uint8 counter=0;
     d0a:	1a 82       	std	Y+2, r1	; 0x02
			for(uint8 i = 0 ; i < PASSWORD_ARRAY_SIZE; i++)
     d0c:	19 82       	std	Y+1, r1	; 0x01
     d0e:	0f c0       	rjmp	.+30     	; 0xd2e <main+0x1e8>
			{
				if(savedpass[i] == DEFUALT_VALUE_OF_EEPROM)
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	88 2f       	mov	r24, r24
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	fc 01       	movw	r30, r24
     d18:	ea 57       	subi	r30, 0x7A	; 122
     d1a:	ff 4f       	sbci	r31, 0xFF	; 255
     d1c:	80 81       	ld	r24, Z
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	19 f4       	brne	.+6      	; 0xd28 <main+0x1e2>
				{
					counter++;
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	8f 5f       	subi	r24, 0xFF	; 255
     d26:	8a 83       	std	Y+2, r24	; 0x02
			}
			break;
		case CHECK_IF_SAVED:
			getSavedPassword(savedpass);
			uint8 counter=0;
			for(uint8 i = 0 ; i < PASSWORD_ARRAY_SIZE; i++)
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	8f 5f       	subi	r24, 0xFF	; 255
     d2c:	89 83       	std	Y+1, r24	; 0x01
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	85 30       	cpi	r24, 0x05	; 5
     d32:	70 f3       	brcs	.-36     	; 0xd10 <main+0x1ca>
				{
					counter++;
				}

			}
			if (counter==PASSWORD_ARRAY_SIZE)
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	85 30       	cpi	r24, 0x05	; 5
     d38:	21 f4       	brne	.+8      	; 0xd42 <main+0x1fc>
			{
				sendCommand(NO_SAVED_PASSWORD);
     d3a:	8d e0       	ldi	r24, 0x0D	; 13
     d3c:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <sendCommand>
     d40:	18 cf       	rjmp	.-464    	; 0xb72 <main+0x2c>
			}
			else
			{
				sendCommand(YES_SAVED);
     d42:	8c e0       	ldi	r24, 0x0C	; 12
     d44:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <sendCommand>
     d48:	14 cf       	rjmp	.-472    	; 0xb72 <main+0x2c>

00000d4a <recievePassword>:
 * [Arguments]:       ARRAY of unsigned integers and it's size is 5 (password size)
 *
 * [Returns]:         VOID
 ***************************************************************************************************/
void recievePassword(uint8 a_arr[])
{
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	df 93       	push	r29
     d50:	cf 93       	push	r28
     d52:	00 d0       	rcall	.+0      	; 0xd54 <recievePassword+0xa>
     d54:	00 d0       	rcall	.+0      	; 0xd56 <recievePassword+0xc>
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	9c 83       	std	Y+4, r25	; 0x04
     d5c:	8b 83       	std	Y+3, r24	; 0x03
	while(UART_recieveByte() != READY){};
     d5e:	0e 94 ae 12 	call	0x255c	; 0x255c <UART_recieveByte>
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	e1 f7       	brne	.-8      	; 0xd5e <recievePassword+0x14>
	UART_sendByte(READY);
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	0e 94 97 12 	call	0x252e	; 0x252e <UART_sendByte>
	for(int i=0 ; i<PASSWORD_ARRAY_SIZE ; i++){
     d6c:	1a 82       	std	Y+2, r1	; 0x02
     d6e:	19 82       	std	Y+1, r1	; 0x01
     d70:	10 c0       	rjmp	.+32     	; 0xd92 <recievePassword+0x48>
		a_arr[i]=UART_recieveByte();
     d72:	29 81       	ldd	r18, Y+1	; 0x01
     d74:	3a 81       	ldd	r19, Y+2	; 0x02
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	9c 81       	ldd	r25, Y+4	; 0x04
     d7a:	8c 01       	movw	r16, r24
     d7c:	02 0f       	add	r16, r18
     d7e:	13 1f       	adc	r17, r19
     d80:	0e 94 ae 12 	call	0x255c	; 0x255c <UART_recieveByte>
     d84:	f8 01       	movw	r30, r16
     d86:	80 83       	st	Z, r24
 ***************************************************************************************************/
void recievePassword(uint8 a_arr[])
{
	while(UART_recieveByte() != READY){};
	UART_sendByte(READY);
	for(int i=0 ; i<PASSWORD_ARRAY_SIZE ; i++){
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	9a 81       	ldd	r25, Y+2	; 0x02
     d8c:	01 96       	adiw	r24, 0x01	; 1
     d8e:	9a 83       	std	Y+2, r25	; 0x02
     d90:	89 83       	std	Y+1, r24	; 0x01
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	9a 81       	ldd	r25, Y+2	; 0x02
     d96:	85 30       	cpi	r24, 0x05	; 5
     d98:	91 05       	cpc	r25, r1
     d9a:	5c f3       	brlt	.-42     	; 0xd72 <recievePassword+0x28>
		a_arr[i]=UART_recieveByte();
	}
	UART_sendByte(DONE);
     d9c:	82 e0       	ldi	r24, 0x02	; 2
     d9e:	0e 94 97 12 	call	0x252e	; 0x252e <UART_sendByte>
}
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	08 95       	ret

00000db4 <Match_or_NoMatch>:
 * [Arguments]:       TWO ARRAYS of unsigned integers and it's size is 5 (password size)
 *
 * [Returns]:         BOOLEAN TRUE OR FALSE
 ***************************************************************************************************/
boolean Match_or_NoMatch(uint8 a_arr1[],uint8 a_arr2[])
{
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	27 97       	sbiw	r28, 0x07	; 7
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	cd bf       	out	0x3d, r28	; 61
     dc8:	9c 83       	std	Y+4, r25	; 0x04
     dca:	8b 83       	std	Y+3, r24	; 0x03
     dcc:	7e 83       	std	Y+6, r23	; 0x06
     dce:	6d 83       	std	Y+5, r22	; 0x05
	uint8 counter=0;
     dd0:	1a 82       	std	Y+2, r1	; 0x02
	for(uint8 i=0 ; i<PASSWORD_ARRAY_SIZE ; i++)
     dd2:	19 82       	std	Y+1, r1	; 0x01
     dd4:	1a c0       	rjmp	.+52     	; 0xe0a <Match_or_NoMatch+0x56>
	{
		if(a_arr1[i]==a_arr2[i]){
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
     dd8:	28 2f       	mov	r18, r24
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	9c 81       	ldd	r25, Y+4	; 0x04
     de0:	fc 01       	movw	r30, r24
     de2:	e2 0f       	add	r30, r18
     de4:	f3 1f       	adc	r31, r19
     de6:	40 81       	ld	r20, Z
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	28 2f       	mov	r18, r24
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	8d 81       	ldd	r24, Y+5	; 0x05
     df0:	9e 81       	ldd	r25, Y+6	; 0x06
     df2:	fc 01       	movw	r30, r24
     df4:	e2 0f       	add	r30, r18
     df6:	f3 1f       	adc	r31, r19
     df8:	80 81       	ld	r24, Z
     dfa:	48 17       	cp	r20, r24
     dfc:	19 f4       	brne	.+6      	; 0xe04 <Match_or_NoMatch+0x50>
			counter++;
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	8f 5f       	subi	r24, 0xFF	; 255
     e02:	8a 83       	std	Y+2, r24	; 0x02
 * [Returns]:         BOOLEAN TRUE OR FALSE
 ***************************************************************************************************/
boolean Match_or_NoMatch(uint8 a_arr1[],uint8 a_arr2[])
{
	uint8 counter=0;
	for(uint8 i=0 ; i<PASSWORD_ARRAY_SIZE ; i++)
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	8f 5f       	subi	r24, 0xFF	; 255
     e08:	89 83       	std	Y+1, r24	; 0x01
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	85 30       	cpi	r24, 0x05	; 5
     e0e:	18 f3       	brcs	.-58     	; 0xdd6 <Match_or_NoMatch+0x22>
	{
		if(a_arr1[i]==a_arr2[i]){
			counter++;
		}
	}
	if(counter==PASSWORD_ARRAY_SIZE){
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	85 30       	cpi	r24, 0x05	; 5
     e14:	19 f4       	brne	.+6      	; 0xe1c <Match_or_NoMatch+0x68>
		return TRUE;
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	8f 83       	std	Y+7, r24	; 0x07
     e1a:	01 c0       	rjmp	.+2      	; 0xe1e <Match_or_NoMatch+0x6a>
	}
	else{
		return FALSE;
     e1c:	1f 82       	std	Y+7, r1	; 0x07
     e1e:	8f 81       	ldd	r24, Y+7	; 0x07
	}
}
     e20:	27 96       	adiw	r28, 0x07	; 7
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	f8 94       	cli
     e26:	de bf       	out	0x3e, r29	; 62
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	cd bf       	out	0x3d, r28	; 61
     e2c:	cf 91       	pop	r28
     e2e:	df 91       	pop	r29
     e30:	08 95       	ret

00000e32 <storePasswordInMemory>:
 *
 * [Returns]:         VOID
 ***************************************************************************************************/

void storePasswordInMemory(void)
{
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	2f 97       	sbiw	r28, 0x0f	; 15
     e3c:	0f b6       	in	r0, 0x3f	; 63
     e3e:	f8 94       	cli
     e40:	de bf       	out	0x3e, r29	; 62
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	cd bf       	out	0x3d, r28	; 61

	EEPROM_init();
     e46:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <EEPROM_init>
	for(uint8 i=0;i<PASSWORD_ARRAY_SIZE;i++){
     e4a:	1f 86       	std	Y+15, r1	; 0x0f
     e4c:	86 c0       	rjmp	.+268    	; 0xf5a <storePasswordInMemory+0x128>
		EEPROM_writeByte(0x0311+i,g_password[i]);
     e4e:	8f 85       	ldd	r24, Y+15	; 0x0f
     e50:	88 2f       	mov	r24, r24
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	8f 5e       	subi	r24, 0xEF	; 239
     e56:	9c 4f       	sbci	r25, 0xFC	; 252
     e58:	ac 01       	movw	r20, r24
     e5a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e5c:	88 2f       	mov	r24, r24
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	fc 01       	movw	r30, r24
     e62:	ef 57       	subi	r30, 0x7F	; 127
     e64:	ff 4f       	sbci	r31, 0xFF	; 255
     e66:	20 81       	ld	r18, Z
     e68:	ca 01       	movw	r24, r20
     e6a:	62 2f       	mov	r22, r18
     e6c:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <EEPROM_writeByte>
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	aa ef       	ldi	r26, 0xFA	; 250
     e76:	b3 e4       	ldi	r27, 0x43	; 67
     e78:	8b 87       	std	Y+11, r24	; 0x0b
     e7a:	9c 87       	std	Y+12, r25	; 0x0c
     e7c:	ad 87       	std	Y+13, r26	; 0x0d
     e7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e80:	6b 85       	ldd	r22, Y+11	; 0x0b
     e82:	7c 85       	ldd	r23, Y+12	; 0x0c
     e84:	8d 85       	ldd	r24, Y+13	; 0x0d
     e86:	9e 85       	ldd	r25, Y+14	; 0x0e
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	4a e7       	ldi	r20, 0x7A	; 122
     e8e:	53 e4       	ldi	r21, 0x43	; 67
     e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e94:	dc 01       	movw	r26, r24
     e96:	cb 01       	movw	r24, r22
     e98:	8f 83       	std	Y+7, r24	; 0x07
     e9a:	98 87       	std	Y+8, r25	; 0x08
     e9c:	a9 87       	std	Y+9, r26	; 0x09
     e9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ea0:	6f 81       	ldd	r22, Y+7	; 0x07
     ea2:	78 85       	ldd	r23, Y+8	; 0x08
     ea4:	89 85       	ldd	r24, Y+9	; 0x09
     ea6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	40 e8       	ldi	r20, 0x80	; 128
     eae:	5f e3       	ldi	r21, 0x3F	; 63
     eb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eb4:	88 23       	and	r24, r24
     eb6:	2c f4       	brge	.+10     	; 0xec2 <storePasswordInMemory+0x90>
		__ticks = 1;
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	9e 83       	std	Y+6, r25	; 0x06
     ebe:	8d 83       	std	Y+5, r24	; 0x05
     ec0:	3f c0       	rjmp	.+126    	; 0xf40 <storePasswordInMemory+0x10e>
	else if (__tmp > 65535)
     ec2:	6f 81       	ldd	r22, Y+7	; 0x07
     ec4:	78 85       	ldd	r23, Y+8	; 0x08
     ec6:	89 85       	ldd	r24, Y+9	; 0x09
     ec8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	3f ef       	ldi	r19, 0xFF	; 255
     ece:	4f e7       	ldi	r20, 0x7F	; 127
     ed0:	57 e4       	ldi	r21, 0x47	; 71
     ed2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ed6:	18 16       	cp	r1, r24
     ed8:	4c f5       	brge	.+82     	; 0xf2c <storePasswordInMemory+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eda:	6b 85       	ldd	r22, Y+11	; 0x0b
     edc:	7c 85       	ldd	r23, Y+12	; 0x0c
     ede:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	40 e2       	ldi	r20, 0x20	; 32
     ee8:	51 e4       	ldi	r21, 0x41	; 65
     eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eee:	dc 01       	movw	r26, r24
     ef0:	cb 01       	movw	r24, r22
     ef2:	bc 01       	movw	r22, r24
     ef4:	cd 01       	movw	r24, r26
     ef6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     efa:	dc 01       	movw	r26, r24
     efc:	cb 01       	movw	r24, r22
     efe:	9e 83       	std	Y+6, r25	; 0x06
     f00:	8d 83       	std	Y+5, r24	; 0x05
     f02:	0f c0       	rjmp	.+30     	; 0xf22 <storePasswordInMemory+0xf0>
     f04:	89 e1       	ldi	r24, 0x19	; 25
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	9c 83       	std	Y+4, r25	; 0x04
     f0a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	9c 81       	ldd	r25, Y+4	; 0x04
     f10:	01 97       	sbiw	r24, 0x01	; 1
     f12:	f1 f7       	brne	.-4      	; 0xf10 <storePasswordInMemory+0xde>
     f14:	9c 83       	std	Y+4, r25	; 0x04
     f16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f18:	8d 81       	ldd	r24, Y+5	; 0x05
     f1a:	9e 81       	ldd	r25, Y+6	; 0x06
     f1c:	01 97       	sbiw	r24, 0x01	; 1
     f1e:	9e 83       	std	Y+6, r25	; 0x06
     f20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f22:	8d 81       	ldd	r24, Y+5	; 0x05
     f24:	9e 81       	ldd	r25, Y+6	; 0x06
     f26:	00 97       	sbiw	r24, 0x00	; 0
     f28:	69 f7       	brne	.-38     	; 0xf04 <storePasswordInMemory+0xd2>
     f2a:	14 c0       	rjmp	.+40     	; 0xf54 <storePasswordInMemory+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f2c:	6f 81       	ldd	r22, Y+7	; 0x07
     f2e:	78 85       	ldd	r23, Y+8	; 0x08
     f30:	89 85       	ldd	r24, Y+9	; 0x09
     f32:	9a 85       	ldd	r25, Y+10	; 0x0a
     f34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f38:	dc 01       	movw	r26, r24
     f3a:	cb 01       	movw	r24, r22
     f3c:	9e 83       	std	Y+6, r25	; 0x06
     f3e:	8d 83       	std	Y+5, r24	; 0x05
     f40:	8d 81       	ldd	r24, Y+5	; 0x05
     f42:	9e 81       	ldd	r25, Y+6	; 0x06
     f44:	9a 83       	std	Y+2, r25	; 0x02
     f46:	89 83       	std	Y+1, r24	; 0x01
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	9a 81       	ldd	r25, Y+2	; 0x02
     f4c:	01 97       	sbiw	r24, 0x01	; 1
     f4e:	f1 f7       	brne	.-4      	; 0xf4c <storePasswordInMemory+0x11a>
     f50:	9a 83       	std	Y+2, r25	; 0x02
     f52:	89 83       	std	Y+1, r24	; 0x01

void storePasswordInMemory(void)
{

	EEPROM_init();
	for(uint8 i=0;i<PASSWORD_ARRAY_SIZE;i++){
     f54:	8f 85       	ldd	r24, Y+15	; 0x0f
     f56:	8f 5f       	subi	r24, 0xFF	; 255
     f58:	8f 87       	std	Y+15, r24	; 0x0f
     f5a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f5c:	85 30       	cpi	r24, 0x05	; 5
     f5e:	08 f4       	brcc	.+2      	; 0xf62 <storePasswordInMemory+0x130>
     f60:	76 cf       	rjmp	.-276    	; 0xe4e <storePasswordInMemory+0x1c>
		EEPROM_writeByte(0x0311+i,g_password[i]);
		_delay_ms(HALF_SECOND_DELAY);
	}

}
     f62:	2f 96       	adiw	r28, 0x0f	; 15
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	de bf       	out	0x3e, r29	; 62
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	cd bf       	out	0x3d, r28	; 61
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	08 95       	ret

00000f74 <recieveCommand>:
 * [Arguments]:       VOID
 *
 * [Returns]:         unsigned integer command number
 ***************************************************************************************************/
uint8 recieveCommand(void)
{
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
	while(UART_recieveByte() != READY){};
     f7c:	0e 94 ae 12 	call	0x255c	; 0x255c <UART_recieveByte>
     f80:	81 30       	cpi	r24, 0x01	; 1
     f82:	e1 f7       	brne	.-8      	; 0xf7c <recieveCommand+0x8>
	UART_sendByte(READY);
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	0e 94 97 12 	call	0x252e	; 0x252e <UART_sendByte>
	command=UART_recieveByte();
     f8a:	0e 94 ae 12 	call	0x255c	; 0x255c <UART_recieveByte>
     f8e:	80 93 7f 00 	sts	0x007F, r24
	UART_sendByte(DONE);
     f92:	82 e0       	ldi	r24, 0x02	; 2
     f94:	0e 94 97 12 	call	0x252e	; 0x252e <UART_sendByte>
	return command;
     f98:	80 91 7f 00 	lds	r24, 0x007F
}
     f9c:	cf 91       	pop	r28
     f9e:	df 91       	pop	r29
     fa0:	08 95       	ret

00000fa2 <sendCommand>:
 * [Arguments]:       unsigned integer command number
 *
 * [Returns]:         VOID
 ***************************************************************************************************/
void sendCommand(uint8 command)
{
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	0f 92       	push	r0
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(READY);
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	0e 94 97 12 	call	0x252e	; 0x252e <UART_sendByte>
	while(UART_recieveByte() != READY){};
     fb4:	0e 94 ae 12 	call	0x255c	; 0x255c <UART_recieveByte>
     fb8:	81 30       	cpi	r24, 0x01	; 1
     fba:	e1 f7       	brne	.-8      	; 0xfb4 <sendCommand+0x12>
	UART_sendByte(command);
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	0e 94 97 12 	call	0x252e	; 0x252e <UART_sendByte>
	while(UART_recieveByte() != DONE){};
     fc2:	0e 94 ae 12 	call	0x255c	; 0x255c <UART_recieveByte>
     fc6:	82 30       	cpi	r24, 0x02	; 2
     fc8:	e1 f7       	brne	.-8      	; 0xfc2 <sendCommand+0x20>

}
     fca:	0f 90       	pop	r0
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <getSavedPassword>:
 * [Arguments]:       Array of unsigned integers of size 5 (password size)
 *
 * [Returns]:         VOID
 ***************************************************************************************************/
void getSavedPassword(uint8 a_arr[])
{
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	61 97       	sbiw	r28, 0x11	; 17
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	de bf       	out	0x3e, r29	; 62
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	cd bf       	out	0x3d, r28	; 61
     fe6:	99 8b       	std	Y+17, r25	; 0x11
     fe8:	88 8b       	std	Y+16, r24	; 0x10
	EEPROM_init();
     fea:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <EEPROM_init>
	for(uint8 i=0 ; i<PASSWORD_ARRAY_SIZE ; i++){
     fee:	1f 86       	std	Y+15, r1	; 0x0f
     ff0:	86 c0       	rjmp	.+268    	; 0x10fe <getSavedPassword+0x12c>
		EEPROM_readByte(0x0311+i, &a_arr[i]);
     ff2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	8f 5e       	subi	r24, 0xEF	; 239
     ffa:	9c 4f       	sbci	r25, 0xFC	; 252
     ffc:	ac 01       	movw	r20, r24
     ffe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	88 89       	ldd	r24, Y+16	; 0x10
    1006:	99 89       	ldd	r25, Y+17	; 0x11
    1008:	28 0f       	add	r18, r24
    100a:	39 1f       	adc	r19, r25
    100c:	ca 01       	movw	r24, r20
    100e:	b9 01       	movw	r22, r18
    1010:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <EEPROM_readByte>
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	aa e7       	ldi	r26, 0x7A	; 122
    101a:	b4 e4       	ldi	r27, 0x44	; 68
    101c:	8b 87       	std	Y+11, r24	; 0x0b
    101e:	9c 87       	std	Y+12, r25	; 0x0c
    1020:	ad 87       	std	Y+13, r26	; 0x0d
    1022:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1024:	6b 85       	ldd	r22, Y+11	; 0x0b
    1026:	7c 85       	ldd	r23, Y+12	; 0x0c
    1028:	8d 85       	ldd	r24, Y+13	; 0x0d
    102a:	9e 85       	ldd	r25, Y+14	; 0x0e
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	4a e7       	ldi	r20, 0x7A	; 122
    1032:	53 e4       	ldi	r21, 0x43	; 67
    1034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	8f 83       	std	Y+7, r24	; 0x07
    103e:	98 87       	std	Y+8, r25	; 0x08
    1040:	a9 87       	std	Y+9, r26	; 0x09
    1042:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1044:	6f 81       	ldd	r22, Y+7	; 0x07
    1046:	78 85       	ldd	r23, Y+8	; 0x08
    1048:	89 85       	ldd	r24, Y+9	; 0x09
    104a:	9a 85       	ldd	r25, Y+10	; 0x0a
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	40 e8       	ldi	r20, 0x80	; 128
    1052:	5f e3       	ldi	r21, 0x3F	; 63
    1054:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1058:	88 23       	and	r24, r24
    105a:	2c f4       	brge	.+10     	; 0x1066 <getSavedPassword+0x94>
		__ticks = 1;
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	9e 83       	std	Y+6, r25	; 0x06
    1062:	8d 83       	std	Y+5, r24	; 0x05
    1064:	3f c0       	rjmp	.+126    	; 0x10e4 <getSavedPassword+0x112>
	else if (__tmp > 65535)
    1066:	6f 81       	ldd	r22, Y+7	; 0x07
    1068:	78 85       	ldd	r23, Y+8	; 0x08
    106a:	89 85       	ldd	r24, Y+9	; 0x09
    106c:	9a 85       	ldd	r25, Y+10	; 0x0a
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	3f ef       	ldi	r19, 0xFF	; 255
    1072:	4f e7       	ldi	r20, 0x7F	; 127
    1074:	57 e4       	ldi	r21, 0x47	; 71
    1076:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    107a:	18 16       	cp	r1, r24
    107c:	4c f5       	brge	.+82     	; 0x10d0 <getSavedPassword+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    107e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1080:	7c 85       	ldd	r23, Y+12	; 0x0c
    1082:	8d 85       	ldd	r24, Y+13	; 0x0d
    1084:	9e 85       	ldd	r25, Y+14	; 0x0e
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	40 e2       	ldi	r20, 0x20	; 32
    108c:	51 e4       	ldi	r21, 0x41	; 65
    108e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1092:	dc 01       	movw	r26, r24
    1094:	cb 01       	movw	r24, r22
    1096:	bc 01       	movw	r22, r24
    1098:	cd 01       	movw	r24, r26
    109a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	9e 83       	std	Y+6, r25	; 0x06
    10a4:	8d 83       	std	Y+5, r24	; 0x05
    10a6:	0f c0       	rjmp	.+30     	; 0x10c6 <getSavedPassword+0xf4>
    10a8:	89 e1       	ldi	r24, 0x19	; 25
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	9c 83       	std	Y+4, r25	; 0x04
    10ae:	8b 83       	std	Y+3, r24	; 0x03
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	9c 81       	ldd	r25, Y+4	; 0x04
    10b4:	01 97       	sbiw	r24, 0x01	; 1
    10b6:	f1 f7       	brne	.-4      	; 0x10b4 <getSavedPassword+0xe2>
    10b8:	9c 83       	std	Y+4, r25	; 0x04
    10ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10bc:	8d 81       	ldd	r24, Y+5	; 0x05
    10be:	9e 81       	ldd	r25, Y+6	; 0x06
    10c0:	01 97       	sbiw	r24, 0x01	; 1
    10c2:	9e 83       	std	Y+6, r25	; 0x06
    10c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10c6:	8d 81       	ldd	r24, Y+5	; 0x05
    10c8:	9e 81       	ldd	r25, Y+6	; 0x06
    10ca:	00 97       	sbiw	r24, 0x00	; 0
    10cc:	69 f7       	brne	.-38     	; 0x10a8 <getSavedPassword+0xd6>
    10ce:	14 c0       	rjmp	.+40     	; 0x10f8 <getSavedPassword+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10d0:	6f 81       	ldd	r22, Y+7	; 0x07
    10d2:	78 85       	ldd	r23, Y+8	; 0x08
    10d4:	89 85       	ldd	r24, Y+9	; 0x09
    10d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10dc:	dc 01       	movw	r26, r24
    10de:	cb 01       	movw	r24, r22
    10e0:	9e 83       	std	Y+6, r25	; 0x06
    10e2:	8d 83       	std	Y+5, r24	; 0x05
    10e4:	8d 81       	ldd	r24, Y+5	; 0x05
    10e6:	9e 81       	ldd	r25, Y+6	; 0x06
    10e8:	9a 83       	std	Y+2, r25	; 0x02
    10ea:	89 83       	std	Y+1, r24	; 0x01
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	9a 81       	ldd	r25, Y+2	; 0x02
    10f0:	01 97       	sbiw	r24, 0x01	; 1
    10f2:	f1 f7       	brne	.-4      	; 0x10f0 <getSavedPassword+0x11e>
    10f4:	9a 83       	std	Y+2, r25	; 0x02
    10f6:	89 83       	std	Y+1, r24	; 0x01
 * [Returns]:         VOID
 ***************************************************************************************************/
void getSavedPassword(uint8 a_arr[])
{
	EEPROM_init();
	for(uint8 i=0 ; i<PASSWORD_ARRAY_SIZE ; i++){
    10f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    10fa:	8f 5f       	subi	r24, 0xFF	; 255
    10fc:	8f 87       	std	Y+15, r24	; 0x0f
    10fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1100:	85 30       	cpi	r24, 0x05	; 5
    1102:	08 f4       	brcc	.+2      	; 0x1106 <getSavedPassword+0x134>
    1104:	76 cf       	rjmp	.-276    	; 0xff2 <getSavedPassword+0x20>
		EEPROM_readByte(0x0311+i, &a_arr[i]);
		_delay_ms(1000);
	}
}
    1106:	61 96       	adiw	r28, 0x11	; 17
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	f8 94       	cli
    110c:	de bf       	out	0x3e, r29	; 62
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	cd bf       	out	0x3d, r28	; 61
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <Calculate_time>:

void Calculate_time(void)
{
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
	g_tick ++; /*Every overflow increase ticks*/
    1120:	80 91 76 00 	lds	r24, 0x0076
    1124:	8f 5f       	subi	r24, 0xFF	; 255
    1126:	80 93 76 00 	sts	0x0076, r24

	/*Once ticks become 30(according to the used prescalar),increase seconds flag and tick =0*/
	if(g_tick == 30)
    112a:	80 91 76 00 	lds	r24, 0x0076
    112e:	8e 31       	cpi	r24, 0x1E	; 30
    1130:	39 f4       	brne	.+14     	; 0x1140 <Calculate_time+0x28>
	{
		g_calc_sec_flag ++; /*Every 30 tick, increase seconds flag*/
    1132:	80 91 78 00 	lds	r24, 0x0078
    1136:	8f 5f       	subi	r24, 0xFF	; 255
    1138:	80 93 78 00 	sts	0x0078, r24
		g_tick =0; /*Put tick=0 to start counting new second*/
    113c:	10 92 76 00 	sts	0x0076, r1
	}
}
    1140:	cf 91       	pop	r28
    1142:	df 91       	pop	r29
    1144:	08 95       	ret

00001146 <DcMotor_Init>:
#include "gpio.h"
#include "DC_Motor.h"

#include "common_macros.h"

void DcMotor_Init(void) {
    1146:	df 93       	push	r29
    1148:	cf 93       	push	r28
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62

	/* configure pin PC6 and PC7 as output pins */

	GPIO_setupPinDirection( DC_Motor_IN1_PORT_ID , DC_Motor_IN1_PIN_ID ,PIN_OUTPUT);
    114e:	82 e0       	ldi	r24, 0x02	; 2
    1150:	64 e0       	ldi	r22, 0x04	; 4
    1152:	41 e0       	ldi	r20, 0x01	; 1
    1154:	0e 94 55 0e 	call	0x1caa	; 0x1caa <GPIO_setupPinDirection>
	GPIO_setupPinDirection( DC_Motor_IN2_PORT_ID, DC_Motor_IN2_PIN_ID,PIN_OUTPUT);
    1158:	82 e0       	ldi	r24, 0x02	; 2
    115a:	65 e0       	ldi	r22, 0x05	; 5
    115c:	41 e0       	ldi	r20, 0x01	; 1
    115e:	0e 94 55 0e 	call	0x1caa	; 0x1caa <GPIO_setupPinDirection>

	/* Motor is stop at the beginning */
	GPIO_writePin(DC_Motor_IN1_PORT_ID,DC_Motor_IN1_PIN_ID,LOGIC_LOW);
    1162:	82 e0       	ldi	r24, 0x02	; 2
    1164:	64 e0       	ldi	r22, 0x04	; 4
    1166:	40 e0       	ldi	r20, 0x00	; 0
    1168:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <GPIO_writePin>
	GPIO_writePin(DC_Motor_IN2_PORT_ID,DC_Motor_IN2_PIN_ID,LOGIC_LOW);
    116c:	82 e0       	ldi	r24, 0x02	; 2
    116e:	65 e0       	ldi	r22, 0x05	; 5
    1170:	40 e0       	ldi	r20, 0x00	; 0
    1172:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <GPIO_writePin>
}
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	08 95       	ret

0000117c <DcMotor_Rotate>:

void DcMotor_Rotate(enum DcMotor_State state) {
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	0f 92       	push	r0
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
    1186:	89 83       	std	Y+1, r24	; 0x01
	if (state == CW)
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	81 30       	cpi	r24, 0x01	; 1
    118c:	59 f4       	brne	.+22     	; 0x11a4 <DcMotor_Rotate+0x28>
	{
		// Rotate the motor --> clock wise
		GPIO_writePin(DC_Motor_IN1_PORT_ID,DC_Motor_IN1_PIN_ID,LOGIC_LOW);
    118e:	82 e0       	ldi	r24, 0x02	; 2
    1190:	64 e0       	ldi	r22, 0x04	; 4
    1192:	40 e0       	ldi	r20, 0x00	; 0
    1194:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <GPIO_writePin>
		GPIO_writePin(DC_Motor_IN2_PORT_ID,DC_Motor_IN2_PIN_ID,LOGIC_HIGH);
    1198:	82 e0       	ldi	r24, 0x02	; 2
    119a:	65 e0       	ldi	r22, 0x05	; 5
    119c:	41 e0       	ldi	r20, 0x01	; 1
    119e:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <GPIO_writePin>
    11a2:	1b c0       	rjmp	.+54     	; 0x11da <DcMotor_Rotate+0x5e>

	}
	else if (state == A_CW)
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	82 30       	cpi	r24, 0x02	; 2
    11a8:	59 f4       	brne	.+22     	; 0x11c0 <DcMotor_Rotate+0x44>
	{
		// Rotate the motor --> anti-clock wise
		GPIO_writePin(DC_Motor_IN1_PORT_ID,DC_Motor_IN1_PIN_ID,LOGIC_HIGH);
    11aa:	82 e0       	ldi	r24, 0x02	; 2
    11ac:	64 e0       	ldi	r22, 0x04	; 4
    11ae:	41 e0       	ldi	r20, 0x01	; 1
    11b0:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <GPIO_writePin>
		GPIO_writePin(DC_Motor_IN2_PORT_ID,DC_Motor_IN2_PIN_ID,LOGIC_LOW);
    11b4:	82 e0       	ldi	r24, 0x02	; 2
    11b6:	65 e0       	ldi	r22, 0x05	; 5
    11b8:	40 e0       	ldi	r20, 0x00	; 0
    11ba:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <GPIO_writePin>
    11be:	0d c0       	rjmp	.+26     	; 0x11da <DcMotor_Rotate+0x5e>


	}
	else if (state == stop) {
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	88 23       	and	r24, r24
    11c4:	51 f4       	brne	.+20     	; 0x11da <DcMotor_Rotate+0x5e>
		// Stop the motor
		GPIO_writePin(DC_Motor_IN1_PORT_ID,DC_Motor_IN1_PIN_ID,LOGIC_LOW);
    11c6:	82 e0       	ldi	r24, 0x02	; 2
    11c8:	64 e0       	ldi	r22, 0x04	; 4
    11ca:	40 e0       	ldi	r20, 0x00	; 0
    11cc:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <GPIO_writePin>
		GPIO_writePin(DC_Motor_IN2_PORT_ID,DC_Motor_IN2_PIN_ID,LOGIC_LOW);
    11d0:	82 e0       	ldi	r24, 0x02	; 2
    11d2:	65 e0       	ldi	r22, 0x05	; 5
    11d4:	40 e0       	ldi	r20, 0x00	; 0
    11d6:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <GPIO_writePin>

	}


}
    11da:	0f 90       	pop	r0
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	08 95       	ret

000011e2 <__vector_9>:
static volatile void (*g_Timer2CallBackPtr)(void) = NULL_PTR;

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_OVF_vect) {
    11e2:	1f 92       	push	r1
    11e4:	0f 92       	push	r0
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	0f 92       	push	r0
    11ea:	11 24       	eor	r1, r1
    11ec:	2f 93       	push	r18
    11ee:	3f 93       	push	r19
    11f0:	4f 93       	push	r20
    11f2:	5f 93       	push	r21
    11f4:	6f 93       	push	r22
    11f6:	7f 93       	push	r23
    11f8:	8f 93       	push	r24
    11fa:	9f 93       	push	r25
    11fc:	af 93       	push	r26
    11fe:	bf 93       	push	r27
    1200:	ef 93       	push	r30
    1202:	ff 93       	push	r31
    1204:	df 93       	push	r29
    1206:	cf 93       	push	r28
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR) {
    120c:	80 91 79 00 	lds	r24, 0x0079
    1210:	90 91 7a 00 	lds	r25, 0x007A
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	29 f0       	breq	.+10     	; 0x1222 <__vector_9+0x40>
		(*g_Timer0CallBackPtr)();
    1218:	e0 91 79 00 	lds	r30, 0x0079
    121c:	f0 91 7a 00 	lds	r31, 0x007A
    1220:	09 95       	icall
	}
}
    1222:	cf 91       	pop	r28
    1224:	df 91       	pop	r29
    1226:	ff 91       	pop	r31
    1228:	ef 91       	pop	r30
    122a:	bf 91       	pop	r27
    122c:	af 91       	pop	r26
    122e:	9f 91       	pop	r25
    1230:	8f 91       	pop	r24
    1232:	7f 91       	pop	r23
    1234:	6f 91       	pop	r22
    1236:	5f 91       	pop	r21
    1238:	4f 91       	pop	r20
    123a:	3f 91       	pop	r19
    123c:	2f 91       	pop	r18
    123e:	0f 90       	pop	r0
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	0f 90       	pop	r0
    1244:	1f 90       	pop	r1
    1246:	18 95       	reti

00001248 <__vector_19>:

/* Timer0 compare */
ISR(TIMER0_COMP_vect) {
    1248:	1f 92       	push	r1
    124a:	0f 92       	push	r0
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	0f 92       	push	r0
    1250:	11 24       	eor	r1, r1
    1252:	2f 93       	push	r18
    1254:	3f 93       	push	r19
    1256:	4f 93       	push	r20
    1258:	5f 93       	push	r21
    125a:	6f 93       	push	r22
    125c:	7f 93       	push	r23
    125e:	8f 93       	push	r24
    1260:	9f 93       	push	r25
    1262:	af 93       	push	r26
    1264:	bf 93       	push	r27
    1266:	ef 93       	push	r30
    1268:	ff 93       	push	r31
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR) {
    1272:	80 91 79 00 	lds	r24, 0x0079
    1276:	90 91 7a 00 	lds	r25, 0x007A
    127a:	00 97       	sbiw	r24, 0x00	; 0
    127c:	29 f0       	breq	.+10     	; 0x1288 <__vector_19+0x40>
		(*g_Timer0CallBackPtr)();
    127e:	e0 91 79 00 	lds	r30, 0x0079
    1282:	f0 91 7a 00 	lds	r31, 0x007A
    1286:	09 95       	icall
	}
}
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	ff 91       	pop	r31
    128e:	ef 91       	pop	r30
    1290:	bf 91       	pop	r27
    1292:	af 91       	pop	r26
    1294:	9f 91       	pop	r25
    1296:	8f 91       	pop	r24
    1298:	7f 91       	pop	r23
    129a:	6f 91       	pop	r22
    129c:	5f 91       	pop	r21
    129e:	4f 91       	pop	r20
    12a0:	3f 91       	pop	r19
    12a2:	2f 91       	pop	r18
    12a4:	0f 90       	pop	r0
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	0f 90       	pop	r0
    12aa:	1f 90       	pop	r1
    12ac:	18 95       	reti

000012ae <__vector_8>:

/* Timer1 overflow*/
ISR(TIMER1_OVF_vect) {
    12ae:	1f 92       	push	r1
    12b0:	0f 92       	push	r0
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	0f 92       	push	r0
    12b6:	11 24       	eor	r1, r1
    12b8:	2f 93       	push	r18
    12ba:	3f 93       	push	r19
    12bc:	4f 93       	push	r20
    12be:	5f 93       	push	r21
    12c0:	6f 93       	push	r22
    12c2:	7f 93       	push	r23
    12c4:	8f 93       	push	r24
    12c6:	9f 93       	push	r25
    12c8:	af 93       	push	r26
    12ca:	bf 93       	push	r27
    12cc:	ef 93       	push	r30
    12ce:	ff 93       	push	r31
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR) {
    12d8:	80 91 7b 00 	lds	r24, 0x007B
    12dc:	90 91 7c 00 	lds	r25, 0x007C
    12e0:	00 97       	sbiw	r24, 0x00	; 0
    12e2:	29 f0       	breq	.+10     	; 0x12ee <__vector_8+0x40>
		(*g_Timer1CallBackPtr)();
    12e4:	e0 91 7b 00 	lds	r30, 0x007B
    12e8:	f0 91 7c 00 	lds	r31, 0x007C
    12ec:	09 95       	icall
	}
}
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	ff 91       	pop	r31
    12f4:	ef 91       	pop	r30
    12f6:	bf 91       	pop	r27
    12f8:	af 91       	pop	r26
    12fa:	9f 91       	pop	r25
    12fc:	8f 91       	pop	r24
    12fe:	7f 91       	pop	r23
    1300:	6f 91       	pop	r22
    1302:	5f 91       	pop	r21
    1304:	4f 91       	pop	r20
    1306:	3f 91       	pop	r19
    1308:	2f 91       	pop	r18
    130a:	0f 90       	pop	r0
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	0f 90       	pop	r0
    1310:	1f 90       	pop	r1
    1312:	18 95       	reti

00001314 <__vector_6>:

/* Timer1 compare */
ISR(TIMER1_COMPA_vect) {
    1314:	1f 92       	push	r1
    1316:	0f 92       	push	r0
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	0f 92       	push	r0
    131c:	11 24       	eor	r1, r1
    131e:	2f 93       	push	r18
    1320:	3f 93       	push	r19
    1322:	4f 93       	push	r20
    1324:	5f 93       	push	r21
    1326:	6f 93       	push	r22
    1328:	7f 93       	push	r23
    132a:	8f 93       	push	r24
    132c:	9f 93       	push	r25
    132e:	af 93       	push	r26
    1330:	bf 93       	push	r27
    1332:	ef 93       	push	r30
    1334:	ff 93       	push	r31
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR) {
    133e:	80 91 7b 00 	lds	r24, 0x007B
    1342:	90 91 7c 00 	lds	r25, 0x007C
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	29 f0       	breq	.+10     	; 0x1354 <__vector_6+0x40>
		(*g_Timer1CallBackPtr)();
    134a:	e0 91 7b 00 	lds	r30, 0x007B
    134e:	f0 91 7c 00 	lds	r31, 0x007C
    1352:	09 95       	icall
	}
}
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	ff 91       	pop	r31
    135a:	ef 91       	pop	r30
    135c:	bf 91       	pop	r27
    135e:	af 91       	pop	r26
    1360:	9f 91       	pop	r25
    1362:	8f 91       	pop	r24
    1364:	7f 91       	pop	r23
    1366:	6f 91       	pop	r22
    1368:	5f 91       	pop	r21
    136a:	4f 91       	pop	r20
    136c:	3f 91       	pop	r19
    136e:	2f 91       	pop	r18
    1370:	0f 90       	pop	r0
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	0f 90       	pop	r0
    1376:	1f 90       	pop	r1
    1378:	18 95       	reti

0000137a <__vector_4>:

/* Timer2 overflow*/
ISR(TIMER2_OVF_vect) {
    137a:	1f 92       	push	r1
    137c:	0f 92       	push	r0
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	0f 92       	push	r0
    1382:	11 24       	eor	r1, r1
    1384:	2f 93       	push	r18
    1386:	3f 93       	push	r19
    1388:	4f 93       	push	r20
    138a:	5f 93       	push	r21
    138c:	6f 93       	push	r22
    138e:	7f 93       	push	r23
    1390:	8f 93       	push	r24
    1392:	9f 93       	push	r25
    1394:	af 93       	push	r26
    1396:	bf 93       	push	r27
    1398:	ef 93       	push	r30
    139a:	ff 93       	push	r31
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR) {
    13a4:	80 91 7d 00 	lds	r24, 0x007D
    13a8:	90 91 7e 00 	lds	r25, 0x007E
    13ac:	00 97       	sbiw	r24, 0x00	; 0
    13ae:	29 f0       	breq	.+10     	; 0x13ba <__vector_4+0x40>
		(*g_Timer2CallBackPtr)();
    13b0:	e0 91 7d 00 	lds	r30, 0x007D
    13b4:	f0 91 7e 00 	lds	r31, 0x007E
    13b8:	09 95       	icall
	}
}
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	ff 91       	pop	r31
    13c0:	ef 91       	pop	r30
    13c2:	bf 91       	pop	r27
    13c4:	af 91       	pop	r26
    13c6:	9f 91       	pop	r25
    13c8:	8f 91       	pop	r24
    13ca:	7f 91       	pop	r23
    13cc:	6f 91       	pop	r22
    13ce:	5f 91       	pop	r21
    13d0:	4f 91       	pop	r20
    13d2:	3f 91       	pop	r19
    13d4:	2f 91       	pop	r18
    13d6:	0f 90       	pop	r0
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	0f 90       	pop	r0
    13dc:	1f 90       	pop	r1
    13de:	18 95       	reti

000013e0 <__vector_3>:

/* Timer2 compare */
ISR(TIMER2_COMP_vect) {
    13e0:	1f 92       	push	r1
    13e2:	0f 92       	push	r0
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	0f 92       	push	r0
    13e8:	11 24       	eor	r1, r1
    13ea:	2f 93       	push	r18
    13ec:	3f 93       	push	r19
    13ee:	4f 93       	push	r20
    13f0:	5f 93       	push	r21
    13f2:	6f 93       	push	r22
    13f4:	7f 93       	push	r23
    13f6:	8f 93       	push	r24
    13f8:	9f 93       	push	r25
    13fa:	af 93       	push	r26
    13fc:	bf 93       	push	r27
    13fe:	ef 93       	push	r30
    1400:	ff 93       	push	r31
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR) {
    140a:	80 91 7d 00 	lds	r24, 0x007D
    140e:	90 91 7e 00 	lds	r25, 0x007E
    1412:	00 97       	sbiw	r24, 0x00	; 0
    1414:	29 f0       	breq	.+10     	; 0x1420 <__vector_3+0x40>
		(*g_Timer2CallBackPtr)();
    1416:	e0 91 7d 00 	lds	r30, 0x007D
    141a:	f0 91 7e 00 	lds	r31, 0x007E
    141e:	09 95       	icall
	}
}
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	ff 91       	pop	r31
    1426:	ef 91       	pop	r30
    1428:	bf 91       	pop	r27
    142a:	af 91       	pop	r26
    142c:	9f 91       	pop	r25
    142e:	8f 91       	pop	r24
    1430:	7f 91       	pop	r23
    1432:	6f 91       	pop	r22
    1434:	5f 91       	pop	r21
    1436:	4f 91       	pop	r20
    1438:	3f 91       	pop	r19
    143a:	2f 91       	pop	r18
    143c:	0f 90       	pop	r0
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	0f 90       	pop	r0
    1442:	1f 90       	pop	r1
    1444:	18 95       	reti

00001446 <Timer_init>:


void Timer_init(const Timer_ConfigType * Config_Ptr){
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	2c 97       	sbiw	r28, 0x0c	; 12
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	9a 83       	std	Y+2, r25	; 0x02
    145c:	89 83       	std	Y+1, r24	; 0x01
	if (Config_Ptr->timer_ID == Timer0){
    145e:	e9 81       	ldd	r30, Y+1	; 0x01
    1460:	fa 81       	ldd	r31, Y+2	; 0x02
    1462:	80 81       	ld	r24, Z
    1464:	88 23       	and	r24, r24
    1466:	09 f0       	breq	.+2      	; 0x146a <Timer_init+0x24>
    1468:	a4 c0       	rjmp	.+328    	; 0x15b2 <Timer_init+0x16c>
		TCCR0 &= 0X00;
    146a:	e3 e5       	ldi	r30, 0x53	; 83
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	20 81       	ld	r18, Z
    1470:	e3 e5       	ldi	r30, 0x53	; 83
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	10 82       	st	Z, r1
		TCNT0 &= 0X00;
    1476:	e2 e5       	ldi	r30, 0x52	; 82
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	30 81       	ld	r19, Z
    147c:	e2 e5       	ldi	r30, 0x52	; 82
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	10 82       	st	Z, r1
		OCR0 &= 0X00;
    1482:	ec e5       	ldi	r30, 0x5C	; 92
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	ec e5       	ldi	r30, 0x5C	; 92
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	10 82       	st	Z, r1
		TIMSK &= 0X00;
    148e:	e9 e5       	ldi	r30, 0x59	; 89
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	90 81       	ld	r25, Z
    1494:	e9 e5       	ldi	r30, 0x59	; 89
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	10 82       	st	Z, r1
		TCNT0 = ( (Config_Ptr->initial_Value) ) & 0XFF;
    149a:	a2 e5       	ldi	r26, 0x52	; 82
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	e9 81       	ldd	r30, Y+1	; 0x01
    14a0:	fa 81       	ldd	r31, Y+2	; 0x02
    14a2:	83 81       	ldd	r24, Z+3	; 0x03
    14a4:	8c 93       	st	X, r24
		TCCR0 = (TCCR0  & 0xF8) | (Config_Ptr->Prescaler);
    14a6:	a3 e5       	ldi	r26, 0x53	; 83
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e3 e5       	ldi	r30, 0x53	; 83
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	98 2f       	mov	r25, r24
    14b2:	98 7f       	andi	r25, 0xF8	; 248
    14b4:	e9 81       	ldd	r30, Y+1	; 0x01
    14b6:	fa 81       	ldd	r31, Y+2	; 0x02
    14b8:	82 81       	ldd	r24, Z+2	; 0x02
    14ba:	89 2b       	or	r24, r25
    14bc:	8c 93       	st	X, r24


		switch(Config_Ptr->mode)
    14be:	e9 81       	ldd	r30, Y+1	; 0x01
    14c0:	fa 81       	ldd	r31, Y+2	; 0x02
    14c2:	81 81       	ldd	r24, Z+1	; 0x01
    14c4:	e8 2f       	mov	r30, r24
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	f8 87       	std	Y+8, r31	; 0x08
    14ca:	ef 83       	std	Y+7, r30	; 0x07
    14cc:	2f 81       	ldd	r18, Y+7	; 0x07
    14ce:	38 85       	ldd	r19, Y+8	; 0x08
    14d0:	21 15       	cp	r18, r1
    14d2:	31 05       	cpc	r19, r1
    14d4:	31 f0       	breq	.+12     	; 0x14e2 <Timer_init+0x9c>
    14d6:	8f 81       	ldd	r24, Y+7	; 0x07
    14d8:	98 85       	ldd	r25, Y+8	; 0x08
    14da:	82 30       	cpi	r24, 0x02	; 2
    14dc:	91 05       	cpc	r25, r1
    14de:	91 f1       	breq	.+100    	; 0x1544 <Timer_init+0xfe>
    14e0:	c8 c1       	rjmp	.+912    	; 0x1872 <Timer_init+0x42c>
		{
		case Normal:


			TCCR0  = CLEAR_BIT(TCCR0 , WGM00);//Clear WGM00 bit in TCCR0 register
    14e2:	23 e5       	ldi	r18, 0x53	; 83
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	a3 e5       	ldi	r26, 0x53	; 83
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e3 e5       	ldi	r30, 0x53	; 83
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	8f 7b       	andi	r24, 0xBF	; 191
    14f2:	8c 93       	st	X, r24
    14f4:	8c 91       	ld	r24, X
    14f6:	f9 01       	movw	r30, r18
    14f8:	80 83       	st	Z, r24
			TCCR0  = CLEAR_BIT(TCCR0 , WGM01);//Clear WGM01 bit in TCCR0 register
    14fa:	23 e5       	ldi	r18, 0x53	; 83
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	a3 e5       	ldi	r26, 0x53	; 83
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e3 e5       	ldi	r30, 0x53	; 83
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	87 7f       	andi	r24, 0xF7	; 247
    150a:	8c 93       	st	X, r24
    150c:	8c 91       	ld	r24, X
    150e:	f9 01       	movw	r30, r18
    1510:	80 83       	st	Z, r24


			TCCR0 = SET_BIT(TCCR0,FOC0);//Make FOC0 to be Active as it is overflow mode
    1512:	23 e5       	ldi	r18, 0x53	; 83
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	a3 e5       	ldi	r26, 0x53	; 83
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	e3 e5       	ldi	r30, 0x53	; 83
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	80 68       	ori	r24, 0x80	; 128
    1522:	8c 93       	st	X, r24
    1524:	8c 91       	ld	r24, X
    1526:	f9 01       	movw	r30, r18
    1528:	80 83       	st	Z, r24


			TIMSK = SET_BIT(TIMSK, TOIE0);//Enable Timer0 overflow interrupt
    152a:	29 e5       	ldi	r18, 0x59	; 89
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	a9 e5       	ldi	r26, 0x59	; 89
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	e9 e5       	ldi	r30, 0x59	; 89
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	81 60       	ori	r24, 0x01	; 1
    153a:	8c 93       	st	X, r24
    153c:	8c 91       	ld	r24, X
    153e:	f9 01       	movw	r30, r18
    1540:	80 83       	st	Z, r24
    1542:	97 c1       	rjmp	.+814    	; 0x1872 <Timer_init+0x42c>
						break;


		case CTC:
			TCCR0  = CLEAR_BIT(TCCR0 , WGM00);//Clear WGM00 bit in TCCR0 register
    1544:	23 e5       	ldi	r18, 0x53	; 83
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	a3 e5       	ldi	r26, 0x53	; 83
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e3 e5       	ldi	r30, 0x53	; 83
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	8f 7b       	andi	r24, 0xBF	; 191
    1554:	8c 93       	st	X, r24
    1556:	8c 91       	ld	r24, X
    1558:	f9 01       	movw	r30, r18
    155a:	80 83       	st	Z, r24
			TCCR0  = SET_BIT(TCCR0 , WGM01);//Set WGM01 bit in TCCR0 register
    155c:	23 e5       	ldi	r18, 0x53	; 83
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	a3 e5       	ldi	r26, 0x53	; 83
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e3 e5       	ldi	r30, 0x53	; 83
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	88 60       	ori	r24, 0x08	; 8
    156c:	8c 93       	st	X, r24
    156e:	8c 91       	ld	r24, X
    1570:	f9 01       	movw	r30, r18
    1572:	80 83       	st	Z, r24

			TCCR0 = SET_BIT(TCCR0,FOC0);//Make FOC0 to be Active as it is overflow mode
    1574:	23 e5       	ldi	r18, 0x53	; 83
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	a3 e5       	ldi	r26, 0x53	; 83
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e3 e5       	ldi	r30, 0x53	; 83
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	80 68       	ori	r24, 0x80	; 128
    1584:	8c 93       	st	X, r24
    1586:	8c 91       	ld	r24, X
    1588:	f9 01       	movw	r30, r18
    158a:	80 83       	st	Z, r24

			OCR0  = Config_Ptr->Compare_Value; // Set Compare Value
    158c:	ac e5       	ldi	r26, 0x5C	; 92
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e9 81       	ldd	r30, Y+1	; 0x01
    1592:	fa 81       	ldd	r31, Y+2	; 0x02
    1594:	84 81       	ldd	r24, Z+4	; 0x04
    1596:	8c 93       	st	X, r24

			TIMSK = SET_BIT(TIMSK, OCIE0);//Enable Timer0 overflow interrupt
    1598:	29 e5       	ldi	r18, 0x59	; 89
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	a9 e5       	ldi	r26, 0x59	; 89
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e9 e5       	ldi	r30, 0x59	; 89
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	82 60       	ori	r24, 0x02	; 2
    15a8:	8c 93       	st	X, r24
    15aa:	8c 91       	ld	r24, X
    15ac:	f9 01       	movw	r30, r18
    15ae:	80 83       	st	Z, r24
    15b0:	60 c1       	rjmp	.+704    	; 0x1872 <Timer_init+0x42c>

			break;
		}

	}
	else if (Config_Ptr->timer_ID == Timer1)
    15b2:	e9 81       	ldd	r30, Y+1	; 0x01
    15b4:	fa 81       	ldd	r31, Y+2	; 0x02
    15b6:	80 81       	ld	r24, Z
    15b8:	81 30       	cpi	r24, 0x01	; 1
    15ba:	09 f0       	breq	.+2      	; 0x15be <Timer_init+0x178>
    15bc:	b2 c0       	rjmp	.+356    	; 0x1722 <Timer_init+0x2dc>
	{
		TCCR1A =0;
    15be:	ef e4       	ldi	r30, 0x4F	; 79
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	10 82       	st	Z, r1
		TCNT1 = ( (Config_Ptr->initial_Value) ) & 0XFFFF;
    15c4:	ac e4       	ldi	r26, 0x4C	; 76
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e9 81       	ldd	r30, Y+1	; 0x01
    15ca:	fa 81       	ldd	r31, Y+2	; 0x02
    15cc:	83 81       	ldd	r24, Z+3	; 0x03
    15ce:	88 2f       	mov	r24, r24
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	11 96       	adiw	r26, 0x01	; 1
    15d4:	9c 93       	st	X, r25
    15d6:	8e 93       	st	-X, r24
		TCCR1B =  (TCCR1B & 0XF8) | (Config_Ptr->Prescaler);
    15d8:	ae e4       	ldi	r26, 0x4E	; 78
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	ee e4       	ldi	r30, 0x4E	; 78
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	98 2f       	mov	r25, r24
    15e4:	98 7f       	andi	r25, 0xF8	; 248
    15e6:	e9 81       	ldd	r30, Y+1	; 0x01
    15e8:	fa 81       	ldd	r31, Y+2	; 0x02
    15ea:	82 81       	ldd	r24, Z+2	; 0x02
    15ec:	89 2b       	or	r24, r25
    15ee:	8c 93       	st	X, r24
		TCCR1A = TCCR1A & 0X0F;
    15f0:	af e4       	ldi	r26, 0x4F	; 79
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	ef e4       	ldi	r30, 0x4F	; 79
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	8f 70       	andi	r24, 0x0F	; 15
    15fc:	8c 93       	st	X, r24


		switch(Config_Ptr->mode)
    15fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1600:	fa 81       	ldd	r31, Y+2	; 0x02
    1602:	81 81       	ldd	r24, Z+1	; 0x01
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	3e 83       	std	Y+6, r19	; 0x06
    160a:	2d 83       	std	Y+5, r18	; 0x05
    160c:	8d 81       	ldd	r24, Y+5	; 0x05
    160e:	9e 81       	ldd	r25, Y+6	; 0x06
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	31 f0       	breq	.+12     	; 0x1620 <Timer_init+0x1da>
    1614:	ed 81       	ldd	r30, Y+5	; 0x05
    1616:	fe 81       	ldd	r31, Y+6	; 0x06
    1618:	e2 30       	cpi	r30, 0x02	; 2
    161a:	f1 05       	cpc	r31, r1
    161c:	a1 f1       	breq	.+104    	; 0x1686 <Timer_init+0x240>
    161e:	29 c1       	rjmp	.+594    	; 0x1872 <Timer_init+0x42c>
						/*
						 * Normal Overflow mode:
						 *                      Clear WGM10/WMG11 bit in TCCR1A register
						 *                      Clear WGM12/WGM13 bit in TCCR1B register
						 */
						TCCR1A = TCCR1A & 0XFC ;
    1620:	af e4       	ldi	r26, 0x4F	; 79
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	ef e4       	ldi	r30, 0x4F	; 79
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	8c 7f       	andi	r24, 0xFC	; 252
    162c:	8c 93       	st	X, r24
						TCCR1B = TCCR1B & 0XE7 ;
    162e:	ae e4       	ldi	r26, 0x4E	; 78
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	ee e4       	ldi	r30, 0x4E	; 78
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	87 7e       	andi	r24, 0xE7	; 231
    163a:	8c 93       	st	X, r24

						/*
						 * Make FOC1A/FOC1B to be Active as it is overflow mode
						 */
						TCCR1A =  SET_BIT(TCCR1A,FOC1A);
    163c:	2f e4       	ldi	r18, 0x4F	; 79
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	af e4       	ldi	r26, 0x4F	; 79
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	ef e4       	ldi	r30, 0x4F	; 79
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	88 60       	ori	r24, 0x08	; 8
    164c:	8c 93       	st	X, r24
    164e:	8c 91       	ld	r24, X
    1650:	f9 01       	movw	r30, r18
    1652:	80 83       	st	Z, r24
						TCCR1A =  SET_BIT(TCCR1A,FOC1B);
    1654:	2f e4       	ldi	r18, 0x4F	; 79
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	af e4       	ldi	r26, 0x4F	; 79
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	ef e4       	ldi	r30, 0x4F	; 79
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	84 60       	ori	r24, 0x04	; 4
    1664:	8c 93       	st	X, r24
    1666:	8c 91       	ld	r24, X
    1668:	f9 01       	movw	r30, r18
    166a:	80 83       	st	Z, r24


						/*
						 * Enable Timer1 overflow interrupt
						 */
						TIMSK = SET_BIT(TIMSK,TOIE1);
    166c:	29 e5       	ldi	r18, 0x59	; 89
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	a9 e5       	ldi	r26, 0x59	; 89
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	e9 e5       	ldi	r30, 0x59	; 89
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	84 60       	ori	r24, 0x04	; 4
    167c:	8c 93       	st	X, r24
    167e:	8c 91       	ld	r24, X
    1680:	f9 01       	movw	r30, r18
    1682:	80 83       	st	Z, r24
    1684:	f6 c0       	rjmp	.+492    	; 0x1872 <Timer_init+0x42c>
						 *  Compare mode:
						 *              Clear WGM10/WGM11 bits in TCCR1A register
						 *              Set WGM12 bit in TCCR1B register
						 *              Clear WGM13 bit in TCCR1B register
						 */
						TCCR1A = TCCR1A & 0XFC ;
    1686:	af e4       	ldi	r26, 0x4F	; 79
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	ef e4       	ldi	r30, 0x4F	; 79
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	8c 7f       	andi	r24, 0xFC	; 252
    1692:	8c 93       	st	X, r24
						TCCR1B = SET_BIT(TCCR1B, WGM12);
    1694:	2e e4       	ldi	r18, 0x4E	; 78
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	ae e4       	ldi	r26, 0x4E	; 78
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	ee e4       	ldi	r30, 0x4E	; 78
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	88 60       	ori	r24, 0x08	; 8
    16a4:	8c 93       	st	X, r24
    16a6:	8c 91       	ld	r24, X
    16a8:	f9 01       	movw	r30, r18
    16aa:	80 83       	st	Z, r24
						TCCR1B = CLEAR_BIT(TCCR1B, WGM13);
    16ac:	2e e4       	ldi	r18, 0x4E	; 78
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	ae e4       	ldi	r26, 0x4E	; 78
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	ee e4       	ldi	r30, 0x4E	; 78
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	8f 7e       	andi	r24, 0xEF	; 239
    16bc:	8c 93       	st	X, r24
    16be:	8c 91       	ld	r24, X
    16c0:	f9 01       	movw	r30, r18
    16c2:	80 83       	st	Z, r24

						/*
						 *  Make FOC1A/FOC1B to be Active as it is compare mode
						 */
						TCCR1A =  SET_BIT(TCCR1A,FOC1A);
    16c4:	2f e4       	ldi	r18, 0x4F	; 79
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	af e4       	ldi	r26, 0x4F	; 79
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	ef e4       	ldi	r30, 0x4F	; 79
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	88 60       	ori	r24, 0x08	; 8
    16d4:	8c 93       	st	X, r24
    16d6:	8c 91       	ld	r24, X
    16d8:	f9 01       	movw	r30, r18
    16da:	80 83       	st	Z, r24
						TCCR1A =  SET_BIT(TCCR1A,FOC1B);
    16dc:	2f e4       	ldi	r18, 0x4F	; 79
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	af e4       	ldi	r26, 0x4F	; 79
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	ef e4       	ldi	r30, 0x4F	; 79
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	84 60       	ori	r24, 0x04	; 4
    16ec:	8c 93       	st	X, r24
    16ee:	8c 91       	ld	r24, X
    16f0:	f9 01       	movw	r30, r18
    16f2:	80 83       	st	Z, r24

						/*
						 * Configure Compare match value for Timer1 to start count from it
						 * 0XFFFF so that value doesn't exceed 16_bits
						 */
						OCR1A = ((Config_Ptr->Compare_Value)) & 0XFFFF;
    16f4:	aa e4       	ldi	r26, 0x4A	; 74
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e9 81       	ldd	r30, Y+1	; 0x01
    16fa:	fa 81       	ldd	r31, Y+2	; 0x02
    16fc:	84 81       	ldd	r24, Z+4	; 0x04
    16fe:	88 2f       	mov	r24, r24
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	11 96       	adiw	r26, 0x01	; 1
    1704:	9c 93       	st	X, r25
    1706:	8e 93       	st	-X, r24

						/*
						 * Enable Timer1 compare match interrupt
						 */
						TIMSK= SET_BIT(TIMSK,OCIE1A);
    1708:	29 e5       	ldi	r18, 0x59	; 89
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	a9 e5       	ldi	r26, 0x59	; 89
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	e9 e5       	ldi	r30, 0x59	; 89
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	80 61       	ori	r24, 0x10	; 16
    1718:	8c 93       	st	X, r24
    171a:	8c 91       	ld	r24, X
    171c:	f9 01       	movw	r30, r18
    171e:	80 83       	st	Z, r24
    1720:	a8 c0       	rjmp	.+336    	; 0x1872 <Timer_init+0x42c>

						break;
					}

	}
	else if (Config_Ptr->timer_ID == Timer2)
    1722:	e9 81       	ldd	r30, Y+1	; 0x01
    1724:	fa 81       	ldd	r31, Y+2	; 0x02
    1726:	80 81       	ld	r24, Z
    1728:	82 30       	cpi	r24, 0x02	; 2
    172a:	09 f0       	breq	.+2      	; 0x172e <Timer_init+0x2e8>
    172c:	a2 c0       	rjmp	.+324    	; 0x1872 <Timer_init+0x42c>
	{


		TCNT2 = ( (Config_Ptr->initial_Value) ) & 0XFF;
    172e:	a4 e4       	ldi	r26, 0x44	; 68
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	e9 81       	ldd	r30, Y+1	; 0x01
    1734:	fa 81       	ldd	r31, Y+2	; 0x02
    1736:	83 81       	ldd	r24, Z+3	; 0x03
    1738:	8c 93       	st	X, r24
		TCCR2 = (TCCR2  & 0XF8) | (Config_Ptr->Prescaler);
    173a:	a5 e4       	ldi	r26, 0x45	; 69
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e5 e4       	ldi	r30, 0x45	; 69
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	98 2f       	mov	r25, r24
    1746:	98 7f       	andi	r25, 0xF8	; 248
    1748:	e9 81       	ldd	r30, Y+1	; 0x01
    174a:	fa 81       	ldd	r31, Y+2	; 0x02
    174c:	82 81       	ldd	r24, Z+2	; 0x02
    174e:	89 2b       	or	r24, r25
    1750:	8c 93       	st	X, r24
		TCCR2  = CLEAR_BIT(TCCR2, COM20);
    1752:	25 e4       	ldi	r18, 0x45	; 69
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	a5 e4       	ldi	r26, 0x45	; 69
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e5 e4       	ldi	r30, 0x45	; 69
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	8f 7e       	andi	r24, 0xEF	; 239
    1762:	8c 93       	st	X, r24
    1764:	8c 91       	ld	r24, X
    1766:	f9 01       	movw	r30, r18
    1768:	80 83       	st	Z, r24
		TCCR2  = CLEAR_BIT(TCCR2, COM21);
    176a:	25 e4       	ldi	r18, 0x45	; 69
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	a5 e4       	ldi	r26, 0x45	; 69
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e5 e4       	ldi	r30, 0x45	; 69
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	8f 7d       	andi	r24, 0xDF	; 223
    177a:	8c 93       	st	X, r24
    177c:	8c 91       	ld	r24, X
    177e:	f9 01       	movw	r30, r18
    1780:	80 83       	st	Z, r24

		switch(Config_Ptr->mode)
    1782:	e9 81       	ldd	r30, Y+1	; 0x01
    1784:	fa 81       	ldd	r31, Y+2	; 0x02
    1786:	81 81       	ldd	r24, Z+1	; 0x01
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	3c 83       	std	Y+4, r19	; 0x04
    178e:	2b 83       	std	Y+3, r18	; 0x03
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	9c 81       	ldd	r25, Y+4	; 0x04
    1794:	00 97       	sbiw	r24, 0x00	; 0
    1796:	31 f0       	breq	.+12     	; 0x17a4 <Timer_init+0x35e>
    1798:	eb 81       	ldd	r30, Y+3	; 0x03
    179a:	fc 81       	ldd	r31, Y+4	; 0x04
    179c:	e2 30       	cpi	r30, 0x02	; 2
    179e:	f1 05       	cpc	r31, r1
    17a0:	91 f1       	breq	.+100    	; 0x1806 <Timer_init+0x3c0>
    17a2:	67 c0       	rjmp	.+206    	; 0x1872 <Timer_init+0x42c>
			/*
			 * Normal Overflow mode:
			 *                      Clear WGM00 bit in TCCR0 register
			 *                      Clear WGM01 bit in TCCR0 register
			 */
			TCCR2  = CLEAR_BIT(TCCR2 , WGM20);
    17a4:	25 e4       	ldi	r18, 0x45	; 69
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	a5 e4       	ldi	r26, 0x45	; 69
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e5 e4       	ldi	r30, 0x45	; 69
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	8f 7b       	andi	r24, 0xBF	; 191
    17b4:	8c 93       	st	X, r24
    17b6:	8c 91       	ld	r24, X
    17b8:	f9 01       	movw	r30, r18
    17ba:	80 83       	st	Z, r24
			TCCR2  = CLEAR_BIT(TCCR2 , WGM21);
    17bc:	25 e4       	ldi	r18, 0x45	; 69
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	a5 e4       	ldi	r26, 0x45	; 69
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e5 e4       	ldi	r30, 0x45	; 69
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	87 7f       	andi	r24, 0xF7	; 247
    17cc:	8c 93       	st	X, r24
    17ce:	8c 91       	ld	r24, X
    17d0:	f9 01       	movw	r30, r18
    17d2:	80 83       	st	Z, r24

			/*
			 * Make FOC2 to be Active as it is overflow mode
			 */
			TCCR2 =  SET_BIT(TCCR2 ,FOC2);
    17d4:	25 e4       	ldi	r18, 0x45	; 69
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	a5 e4       	ldi	r26, 0x45	; 69
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	e5 e4       	ldi	r30, 0x45	; 69
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	80 68       	ori	r24, 0x80	; 128
    17e4:	8c 93       	st	X, r24
    17e6:	8c 91       	ld	r24, X
    17e8:	f9 01       	movw	r30, r18
    17ea:	80 83       	st	Z, r24


			/*
			 * Enable Timer2 overflow interrupt
			 */
			TIMSK = SET_BIT(TIMSK,TOIE2);
    17ec:	29 e5       	ldi	r18, 0x59	; 89
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	a9 e5       	ldi	r26, 0x59	; 89
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e9 e5       	ldi	r30, 0x59	; 89
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	80 64       	ori	r24, 0x40	; 64
    17fc:	8c 93       	st	X, r24
    17fe:	8c 91       	ld	r24, X
    1800:	f9 01       	movw	r30, r18
    1802:	80 83       	st	Z, r24
    1804:	36 c0       	rjmp	.+108    	; 0x1872 <Timer_init+0x42c>
			/*
			 *  Compare mode:
			 *               Clear WGM20 bit in TCCR2 register
			 *               Clear WGM21 bit in TCCR2 register
			 */
			TCCR2  = CLEAR_BIT(TCCR2 , WGM20);
    1806:	25 e4       	ldi	r18, 0x45	; 69
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	a5 e4       	ldi	r26, 0x45	; 69
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	e5 e4       	ldi	r30, 0x45	; 69
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	8f 7b       	andi	r24, 0xBF	; 191
    1816:	8c 93       	st	X, r24
    1818:	8c 91       	ld	r24, X
    181a:	f9 01       	movw	r30, r18
    181c:	80 83       	st	Z, r24
			TCCR2  = SET_BIT(TCCR2 , WGM21);
    181e:	25 e4       	ldi	r18, 0x45	; 69
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	a5 e4       	ldi	r26, 0x45	; 69
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e5 e4       	ldi	r30, 0x45	; 69
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	88 60       	ori	r24, 0x08	; 8
    182e:	8c 93       	st	X, r24
    1830:	8c 91       	ld	r24, X
    1832:	f9 01       	movw	r30, r18
    1834:	80 83       	st	Z, r24

			/*
			 *  Make FOC2 to be Active as it is compare mode
			 */
			TCCR2 =  SET_BIT(TCCR2 , FOC2);
    1836:	25 e4       	ldi	r18, 0x45	; 69
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	a5 e4       	ldi	r26, 0x45	; 69
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e5 e4       	ldi	r30, 0x45	; 69
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	80 68       	ori	r24, 0x80	; 128
    1846:	8c 93       	st	X, r24
    1848:	8c 91       	ld	r24, X
    184a:	f9 01       	movw	r30, r18
    184c:	80 83       	st	Z, r24
			/*
			 * Configure compare match value for Timer2 to start count from it
			 * 0XFF so that value doesn't exceed 8_bits
			 */

			OCR2 = ((Config_Ptr->Compare_Value)) & 0XFF;
    184e:	a3 e4       	ldi	r26, 0x43	; 67
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	e9 81       	ldd	r30, Y+1	; 0x01
    1854:	fa 81       	ldd	r31, Y+2	; 0x02
    1856:	84 81       	ldd	r24, Z+4	; 0x04
    1858:	8c 93       	st	X, r24

			/*
			 * Enable Timer2 compare match interrupt
			 */
			TIMSK = SET_BIT(TIMSK, OCIE2);
    185a:	29 e5       	ldi	r18, 0x59	; 89
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	a9 e5       	ldi	r26, 0x59	; 89
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	e9 e5       	ldi	r30, 0x59	; 89
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	80 68       	ori	r24, 0x80	; 128
    186a:	8c 93       	st	X, r24
    186c:	8c 91       	ld	r24, X
    186e:	f9 01       	movw	r30, r18
    1870:	80 83       	st	Z, r24

			break;
		}
}

}
    1872:	2c 96       	adiw	r28, 0x0c	; 12
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	f8 94       	cli
    1878:	de bf       	out	0x3e, r29	; 62
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	cd bf       	out	0x3d, r28	; 61
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	08 95       	ret

00001884 <Timer_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
*/
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID timer_type )
{
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	00 d0       	rcall	.+0      	; 0x188a <Timer_setCallBack+0x6>
    188a:	00 d0       	rcall	.+0      	; 0x188c <Timer_setCallBack+0x8>
    188c:	0f 92       	push	r0
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	9a 83       	std	Y+2, r25	; 0x02
    1894:	89 83       	std	Y+1, r24	; 0x01
    1896:	6b 83       	std	Y+3, r22	; 0x03

	switch(timer_type)
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	3d 83       	std	Y+5, r19	; 0x05
    18a0:	2c 83       	std	Y+4, r18	; 0x04
    18a2:	8c 81       	ldd	r24, Y+4	; 0x04
    18a4:	9d 81       	ldd	r25, Y+5	; 0x05
    18a6:	81 30       	cpi	r24, 0x01	; 1
    18a8:	91 05       	cpc	r25, r1
    18aa:	81 f0       	breq	.+32     	; 0x18cc <Timer_setCallBack+0x48>
    18ac:	2c 81       	ldd	r18, Y+4	; 0x04
    18ae:	3d 81       	ldd	r19, Y+5	; 0x05
    18b0:	22 30       	cpi	r18, 0x02	; 2
    18b2:	31 05       	cpc	r19, r1
    18b4:	91 f0       	breq	.+36     	; 0x18da <Timer_setCallBack+0x56>
    18b6:	8c 81       	ldd	r24, Y+4	; 0x04
    18b8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ba:	00 97       	sbiw	r24, 0x00	; 0
    18bc:	a1 f4       	brne	.+40     	; 0x18e6 <Timer_setCallBack+0x62>
	{
	case Timer0:
		/* Save the address of the Call back function in a global variable */
		g_Timer0CallBackPtr = a_ptr;
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	9a 81       	ldd	r25, Y+2	; 0x02
    18c2:	90 93 7a 00 	sts	0x007A, r25
    18c6:	80 93 79 00 	sts	0x0079, r24
    18ca:	0d c0       	rjmp	.+26     	; 0x18e6 <Timer_setCallBack+0x62>
		break;

	case Timer1:
		/* Save the address of the Call back function in a global variable */
		g_Timer1CallBackPtr = a_ptr;
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
    18ce:	9a 81       	ldd	r25, Y+2	; 0x02
    18d0:	90 93 7c 00 	sts	0x007C, r25
    18d4:	80 93 7b 00 	sts	0x007B, r24
    18d8:	06 c0       	rjmp	.+12     	; 0x18e6 <Timer_setCallBack+0x62>
		break;

	case Timer2:
		/* Save the address of the Call back function in a global variable */
		g_Timer2CallBackPtr = a_ptr;
    18da:	89 81       	ldd	r24, Y+1	; 0x01
    18dc:	9a 81       	ldd	r25, Y+2	; 0x02
    18de:	90 93 7e 00 	sts	0x007E, r25
    18e2:	80 93 7d 00 	sts	0x007D, r24
		break;
	}

}
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	cf 91       	pop	r28
    18f2:	df 91       	pop	r29
    18f4:	08 95       	ret

000018f6 <Timer_deinit>:
/*
 * Description: Function to disable the Timer
 */

void Timer_deinit(Timer_ID timer_type)
{
    18f6:	df 93       	push	r29
    18f8:	cf 93       	push	r28
    18fa:	00 d0       	rcall	.+0      	; 0x18fc <Timer_deinit+0x6>
    18fc:	0f 92       	push	r0
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
    1902:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type)
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	28 2f       	mov	r18, r24
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	3b 83       	std	Y+3, r19	; 0x03
    190c:	2a 83       	std	Y+2, r18	; 0x02
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	9b 81       	ldd	r25, Y+3	; 0x03
    1912:	81 30       	cpi	r24, 0x01	; 1
    1914:	91 05       	cpc	r25, r1
    1916:	11 f1       	breq	.+68     	; 0x195c <Timer_deinit+0x66>
    1918:	2a 81       	ldd	r18, Y+2	; 0x02
    191a:	3b 81       	ldd	r19, Y+3	; 0x03
    191c:	22 30       	cpi	r18, 0x02	; 2
    191e:	31 05       	cpc	r19, r1
    1920:	d1 f1       	breq	.+116    	; 0x1996 <Timer_deinit+0xa0>
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	9b 81       	ldd	r25, Y+3	; 0x03
    1926:	00 97       	sbiw	r24, 0x00	; 0
    1928:	09 f0       	breq	.+2      	; 0x192c <Timer_deinit+0x36>
    192a:	4c c0       	rjmp	.+152    	; 0x19c4 <Timer_deinit+0xce>
	{
	case Timer0:
		TCCR0 = 0;
    192c:	e3 e5       	ldi	r30, 0x53	; 83
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	10 82       	st	Z, r1
				TCNT0= 0; /* clear initial value */
    1932:	e2 e5       	ldi	r30, 0x52	; 82
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	10 82       	st	Z, r1
				OCR0 = 0; /* clear compare value for CTC mode*/
    1938:	ec e5       	ldi	r30, 0x5C	; 92
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	10 82       	st	Z, r1
				CLEAR_BIT(TIMSK,OCIE0); /* disable interrupts for CTC mode */
    193e:	a9 e5       	ldi	r26, 0x59	; 89
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	e9 e5       	ldi	r30, 0x59	; 89
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	8d 7f       	andi	r24, 0xFD	; 253
    194a:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK,TOIE0); /* disable interrupts for overflow mode */
    194c:	a9 e5       	ldi	r26, 0x59	; 89
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	e9 e5       	ldi	r30, 0x59	; 89
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	8e 7f       	andi	r24, 0xFE	; 254
    1958:	8c 93       	st	X, r24
    195a:	34 c0       	rjmp	.+104    	; 0x19c4 <Timer_deinit+0xce>
		break;

	case Timer1:

		TCCR1A =0;
    195c:	ef e4       	ldi	r30, 0x4F	; 79
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	10 82       	st	Z, r1
				TCCR1B = 0; /* disable clock */
    1962:	ee e4       	ldi	r30, 0x4E	; 78
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	10 82       	st	Z, r1
				TCNT1 = 0;
    1968:	ec e4       	ldi	r30, 0x4C	; 76
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	11 82       	std	Z+1, r1	; 0x01
    196e:	10 82       	st	Z, r1
				CLEAR_BIT(TIMSK, TOIE1); /* disable interrupts for overflow mode */
    1970:	a9 e5       	ldi	r26, 0x59	; 89
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	e9 e5       	ldi	r30, 0x59	; 89
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	8b 7f       	andi	r24, 0xFB	; 251
    197c:	8c 93       	st	X, r24
				OCR1A = 0;  /* clear compare value for CTC mode */
    197e:	ea e4       	ldi	r30, 0x4A	; 74
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	11 82       	std	Z+1, r1	; 0x01
    1984:	10 82       	st	Z, r1
				CLEAR_BIT(TIMSK, OCIE1A); /* disable interrupts for CTC mode */
    1986:	a9 e5       	ldi	r26, 0x59	; 89
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	e9 e5       	ldi	r30, 0x59	; 89
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	8f 7e       	andi	r24, 0xEF	; 239
    1992:	8c 93       	st	X, r24
    1994:	17 c0       	rjmp	.+46     	; 0x19c4 <Timer_deinit+0xce>
		break;


	case Timer2:

		TCCR2 = 0;
    1996:	e5 e4       	ldi	r30, 0x45	; 69
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	10 82       	st	Z, r1
				TCNT2 = 0; /* clear initial value */
    199c:	e4 e4       	ldi	r30, 0x44	; 68
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	10 82       	st	Z, r1
				OCR2 = 0; /* clear compare value for CTC mode*/
    19a2:	e3 e4       	ldi	r30, 0x43	; 67
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	10 82       	st	Z, r1
				CLEAR_BIT(TIMSK, OCIE2); /* disable interrupts for CTC mode */
    19a8:	a9 e5       	ldi	r26, 0x59	; 89
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e9 e5       	ldi	r30, 0x59	; 89
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	8f 77       	andi	r24, 0x7F	; 127
    19b4:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, TOIE2); /* disable interrupts for overflow mode */
    19b6:	a9 e5       	ldi	r26, 0x59	; 89
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e9 e5       	ldi	r30, 0x59	; 89
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	8f 7b       	andi	r24, 0xBF	; 191
    19c2:	8c 93       	st	X, r24
		break;

	}
}
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	08 95       	ret

000019d0 <Buzzer_init>:
#include "gpio.h"
#include <avr/io.h>
#include "util/delay.h"
#include "common_macros.h"

void Buzzer_init(void){
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
	 GPIO_setupPinDirection(Buzzer_Led_PORT_ID,  Buzzer_PIN_ID, PIN_OUTPUT);
    19d8:	83 e0       	ldi	r24, 0x03	; 3
    19da:	62 e0       	ldi	r22, 0x02	; 2
    19dc:	41 e0       	ldi	r20, 0x01	; 1
    19de:	0e 94 55 0e 	call	0x1caa	; 0x1caa <GPIO_setupPinDirection>

	 GPIO_setupPinDirection(Buzzer_Led_PORT_ID,  Led_PIN_ID, PIN_OUTPUT);
    19e2:	83 e0       	ldi	r24, 0x03	; 3
    19e4:	63 e0       	ldi	r22, 0x03	; 3
    19e6:	41 e0       	ldi	r20, 0x01	; 1
    19e8:	0e 94 55 0e 	call	0x1caa	; 0x1caa <GPIO_setupPinDirection>

	 GPIO_writePort( Buzzer_Led_PORT_ID,0xF3 );
    19ec:	83 e0       	ldi	r24, 0x03	; 3
    19ee:	63 ef       	ldi	r22, 0xF3	; 243
    19f0:	0e 94 0a 11 	call	0x2214	; 0x2214 <GPIO_writePort>
}
    19f4:	cf 91       	pop	r28
    19f6:	df 91       	pop	r29
    19f8:	08 95       	ret

000019fa <Buzzer_state>:

void Buzzer_state(enum buzzer_State Alarm_state){
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	cd b7       	in	r28, 0x3d	; 61
    1a00:	de b7       	in	r29, 0x3e	; 62
    1a02:	2f 97       	sbiw	r28, 0x0f	; 15
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	f8 94       	cli
    1a08:	de bf       	out	0x3e, r29	; 62
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	cd bf       	out	0x3d, r28	; 61
    1a0e:	8f 87       	std	Y+15, r24	; 0x0f
   if(Alarm_state==ON){
    1a10:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a12:	81 30       	cpi	r24, 0x01	; 1
    1a14:	09 f0       	breq	.+2      	; 0x1a18 <Buzzer_state+0x1e>
    1a16:	83 c0       	rjmp	.+262    	; 0x1b1e <Buzzer_state+0x124>
	TOGGLE_BIT(	PORTD,Buzzer_PIN_ID);
    1a18:	a2 e3       	ldi	r26, 0x32	; 50
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	e2 e3       	ldi	r30, 0x32	; 50
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	90 81       	ld	r25, Z
    1a22:	84 e0       	ldi	r24, 0x04	; 4
    1a24:	89 27       	eor	r24, r25
    1a26:	8c 93       	st	X, r24

	TOGGLE_BIT( PORTD ,Led_PIN_ID);
    1a28:	a2 e3       	ldi	r26, 0x32	; 50
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	e2 e3       	ldi	r30, 0x32	; 50
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	90 81       	ld	r25, Z
    1a32:	88 e0       	ldi	r24, 0x08	; 8
    1a34:	89 27       	eor	r24, r25
    1a36:	8c 93       	st	X, r24
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	90 e6       	ldi	r25, 0x60	; 96
    1a3c:	aa e6       	ldi	r26, 0x6A	; 106
    1a3e:	b7 e4       	ldi	r27, 0x47	; 71
    1a40:	8b 87       	std	Y+11, r24	; 0x0b
    1a42:	9c 87       	std	Y+12, r25	; 0x0c
    1a44:	ad 87       	std	Y+13, r26	; 0x0d
    1a46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	4a e7       	ldi	r20, 0x7A	; 122
    1a56:	53 e4       	ldi	r21, 0x43	; 67
    1a58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	8f 83       	std	Y+7, r24	; 0x07
    1a62:	98 87       	std	Y+8, r25	; 0x08
    1a64:	a9 87       	std	Y+9, r26	; 0x09
    1a66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a68:	6f 81       	ldd	r22, Y+7	; 0x07
    1a6a:	78 85       	ldd	r23, Y+8	; 0x08
    1a6c:	89 85       	ldd	r24, Y+9	; 0x09
    1a6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	40 e8       	ldi	r20, 0x80	; 128
    1a76:	5f e3       	ldi	r21, 0x3F	; 63
    1a78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a7c:	88 23       	and	r24, r24
    1a7e:	2c f4       	brge	.+10     	; 0x1a8a <Buzzer_state+0x90>
		__ticks = 1;
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	9e 83       	std	Y+6, r25	; 0x06
    1a86:	8d 83       	std	Y+5, r24	; 0x05
    1a88:	3f c0       	rjmp	.+126    	; 0x1b08 <Buzzer_state+0x10e>
	else if (__tmp > 65535)
    1a8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a8c:	78 85       	ldd	r23, Y+8	; 0x08
    1a8e:	89 85       	ldd	r24, Y+9	; 0x09
    1a90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	3f ef       	ldi	r19, 0xFF	; 255
    1a96:	4f e7       	ldi	r20, 0x7F	; 127
    1a98:	57 e4       	ldi	r21, 0x47	; 71
    1a9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a9e:	18 16       	cp	r1, r24
    1aa0:	4c f5       	brge	.+82     	; 0x1af4 <Buzzer_state+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	40 e2       	ldi	r20, 0x20	; 32
    1ab0:	51 e4       	ldi	r21, 0x41	; 65
    1ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	bc 01       	movw	r22, r24
    1abc:	cd 01       	movw	r24, r26
    1abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	9e 83       	std	Y+6, r25	; 0x06
    1ac8:	8d 83       	std	Y+5, r24	; 0x05
    1aca:	0f c0       	rjmp	.+30     	; 0x1aea <Buzzer_state+0xf0>
    1acc:	89 e1       	ldi	r24, 0x19	; 25
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	9c 83       	std	Y+4, r25	; 0x04
    1ad2:	8b 83       	std	Y+3, r24	; 0x03
    1ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	f1 f7       	brne	.-4      	; 0x1ad8 <Buzzer_state+0xde>
    1adc:	9c 83       	std	Y+4, r25	; 0x04
    1ade:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	9e 83       	std	Y+6, r25	; 0x06
    1ae8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aea:	8d 81       	ldd	r24, Y+5	; 0x05
    1aec:	9e 81       	ldd	r25, Y+6	; 0x06
    1aee:	00 97       	sbiw	r24, 0x00	; 0
    1af0:	69 f7       	brne	.-38     	; 0x1acc <Buzzer_state+0xd2>
    1af2:	26 c0       	rjmp	.+76     	; 0x1b40 <Buzzer_state+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af4:	6f 81       	ldd	r22, Y+7	; 0x07
    1af6:	78 85       	ldd	r23, Y+8	; 0x08
    1af8:	89 85       	ldd	r24, Y+9	; 0x09
    1afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	9e 83       	std	Y+6, r25	; 0x06
    1b06:	8d 83       	std	Y+5, r24	; 0x05
    1b08:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0c:	9a 83       	std	Y+2, r25	; 0x02
    1b0e:	89 83       	std	Y+1, r24	; 0x01
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	9a 81       	ldd	r25, Y+2	; 0x02
    1b14:	01 97       	sbiw	r24, 0x01	; 1
    1b16:	f1 f7       	brne	.-4      	; 0x1b14 <Buzzer_state+0x11a>
    1b18:	9a 83       	std	Y+2, r25	; 0x02
    1b1a:	89 83       	std	Y+1, r24	; 0x01
    1b1c:	11 c0       	rjmp	.+34     	; 0x1b40 <Buzzer_state+0x146>

	 _delay_ms(60000);
   }
   else if(Alarm_state==OFF){
    1b1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b20:	88 23       	and	r24, r24
    1b22:	71 f4       	brne	.+28     	; 0x1b40 <Buzzer_state+0x146>
 	CLEAR_BIT(PORTD , Buzzer_PIN_ID);
    1b24:	a2 e3       	ldi	r26, 0x32	; 50
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	e2 e3       	ldi	r30, 0x32	; 50
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	8b 7f       	andi	r24, 0xFB	; 251
    1b30:	8c 93       	st	X, r24
	CLEAR_BIT(PORTD , Led_PIN_ID );
    1b32:	a2 e3       	ldi	r26, 0x32	; 50
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	e2 e3       	ldi	r30, 0x32	; 50
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	87 7f       	andi	r24, 0xF7	; 247
    1b3e:	8c 93       	st	X, r24
   }




}
    1b40:	2f 96       	adiw	r28, 0x0f	; 15
    1b42:	0f b6       	in	r0, 0x3f	; 63
    1b44:	f8 94       	cli
    1b46:	de bf       	out	0x3e, r29	; 62
    1b48:	0f be       	out	0x3f, r0	; 63
    1b4a:	cd bf       	out	0x3d, r28	; 61
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	08 95       	ret

00001b52 <EEPROM_init>:
	TWI_ConfigType TWI_config = {0x02, 0x01};//pre-scaler TWPS=00 , my address = 0x01=0b00000010 :)



void EEPROM_init(void)
{
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
	/* initialize the I2C(TWI) module inside the MC */
	TWI_init(&TWI_config);
    1b5a:	84 e7       	ldi	r24, 0x74	; 116
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	0e 94 93 11 	call	0x2326	; 0x2326 <TWI_init>
}
    1b62:	cf 91       	pop	r28
    1b64:	df 91       	pop	r29
    1b66:	08 95       	ret

00001b68 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1b68:	df 93       	push	r29
    1b6a:	cf 93       	push	r28
    1b6c:	00 d0       	rcall	.+0      	; 0x1b6e <EEPROM_writeByte+0x6>
    1b6e:	00 d0       	rcall	.+0      	; 0x1b70 <EEPROM_writeByte+0x8>
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	9a 83       	std	Y+2, r25	; 0x02
    1b76:	89 83       	std	Y+1, r24	; 0x01
    1b78:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1b7a:	0e 94 b3 11 	call	0x2366	; 0x2366 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1b7e:	0e 94 0b 12 	call	0x2416	; 0x2416 <TWI_getStatus>
    1b82:	88 30       	cpi	r24, 0x08	; 8
    1b84:	11 f0       	breq	.+4      	; 0x1b8a <EEPROM_writeByte+0x22>
        return ERROR;
    1b86:	1c 82       	std	Y+4, r1	; 0x04
    1b88:	28 c0       	rjmp	.+80     	; 0x1bda <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8e:	80 70       	andi	r24, 0x00	; 0
    1b90:	97 70       	andi	r25, 0x07	; 7
    1b92:	88 0f       	add	r24, r24
    1b94:	89 2f       	mov	r24, r25
    1b96:	88 1f       	adc	r24, r24
    1b98:	99 0b       	sbc	r25, r25
    1b9a:	91 95       	neg	r25
    1b9c:	80 6a       	ori	r24, 0xA0	; 160
    1b9e:	0e 94 ce 11 	call	0x239c	; 0x239c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1ba2:	0e 94 0b 12 	call	0x2416	; 0x2416 <TWI_getStatus>
    1ba6:	88 31       	cpi	r24, 0x18	; 24
    1ba8:	11 f0       	breq	.+4      	; 0x1bae <EEPROM_writeByte+0x46>
        return ERROR; 
    1baa:	1c 82       	std	Y+4, r1	; 0x04
    1bac:	16 c0       	rjmp	.+44     	; 0x1bda <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
    1bb0:	0e 94 ce 11 	call	0x239c	; 0x239c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1bb4:	0e 94 0b 12 	call	0x2416	; 0x2416 <TWI_getStatus>
    1bb8:	88 32       	cpi	r24, 0x28	; 40
    1bba:	11 f0       	breq	.+4      	; 0x1bc0 <EEPROM_writeByte+0x58>
        return ERROR;
    1bbc:	1c 82       	std	Y+4, r1	; 0x04
    1bbe:	0d c0       	rjmp	.+26     	; 0x1bda <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	0e 94 ce 11 	call	0x239c	; 0x239c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1bc6:	0e 94 0b 12 	call	0x2416	; 0x2416 <TWI_getStatus>
    1bca:	88 32       	cpi	r24, 0x28	; 40
    1bcc:	11 f0       	breq	.+4      	; 0x1bd2 <EEPROM_writeByte+0x6a>
        return ERROR;
    1bce:	1c 82       	std	Y+4, r1	; 0x04
    1bd0:	04 c0       	rjmp	.+8      	; 0x1bda <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1bd2:	0e 94 c3 11 	call	0x2386	; 0x2386 <TWI_stop>
	
    return SUCCESS;
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	8c 83       	std	Y+4, r24	; 0x04
    1bda:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	cf 91       	pop	r28
    1be6:	df 91       	pop	r29
    1be8:	08 95       	ret

00001bea <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1bea:	df 93       	push	r29
    1bec:	cf 93       	push	r28
    1bee:	00 d0       	rcall	.+0      	; 0x1bf0 <EEPROM_readByte+0x6>
    1bf0:	00 d0       	rcall	.+0      	; 0x1bf2 <EEPROM_readByte+0x8>
    1bf2:	0f 92       	push	r0
    1bf4:	cd b7       	in	r28, 0x3d	; 61
    1bf6:	de b7       	in	r29, 0x3e	; 62
    1bf8:	9a 83       	std	Y+2, r25	; 0x02
    1bfa:	89 83       	std	Y+1, r24	; 0x01
    1bfc:	7c 83       	std	Y+4, r23	; 0x04
    1bfe:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1c00:	0e 94 b3 11 	call	0x2366	; 0x2366 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1c04:	0e 94 0b 12 	call	0x2416	; 0x2416 <TWI_getStatus>
    1c08:	88 30       	cpi	r24, 0x08	; 8
    1c0a:	11 f0       	breq	.+4      	; 0x1c10 <EEPROM_readByte+0x26>
        return ERROR;
    1c0c:	1d 82       	std	Y+5, r1	; 0x05
    1c0e:	44 c0       	rjmp	.+136    	; 0x1c98 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	9a 81       	ldd	r25, Y+2	; 0x02
    1c14:	80 70       	andi	r24, 0x00	; 0
    1c16:	97 70       	andi	r25, 0x07	; 7
    1c18:	88 0f       	add	r24, r24
    1c1a:	89 2f       	mov	r24, r25
    1c1c:	88 1f       	adc	r24, r24
    1c1e:	99 0b       	sbc	r25, r25
    1c20:	91 95       	neg	r25
    1c22:	80 6a       	ori	r24, 0xA0	; 160
    1c24:	0e 94 ce 11 	call	0x239c	; 0x239c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1c28:	0e 94 0b 12 	call	0x2416	; 0x2416 <TWI_getStatus>
    1c2c:	88 31       	cpi	r24, 0x18	; 24
    1c2e:	11 f0       	breq	.+4      	; 0x1c34 <EEPROM_readByte+0x4a>
        return ERROR;
    1c30:	1d 82       	std	Y+5, r1	; 0x05
    1c32:	32 c0       	rjmp	.+100    	; 0x1c98 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
    1c36:	0e 94 ce 11 	call	0x239c	; 0x239c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1c3a:	0e 94 0b 12 	call	0x2416	; 0x2416 <TWI_getStatus>
    1c3e:	88 32       	cpi	r24, 0x28	; 40
    1c40:	11 f0       	breq	.+4      	; 0x1c46 <EEPROM_readByte+0x5c>
        return ERROR;
    1c42:	1d 82       	std	Y+5, r1	; 0x05
    1c44:	29 c0       	rjmp	.+82     	; 0x1c98 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1c46:	0e 94 b3 11 	call	0x2366	; 0x2366 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1c4a:	0e 94 0b 12 	call	0x2416	; 0x2416 <TWI_getStatus>
    1c4e:	80 31       	cpi	r24, 0x10	; 16
    1c50:	11 f0       	breq	.+4      	; 0x1c56 <EEPROM_readByte+0x6c>
        return ERROR;
    1c52:	1d 82       	std	Y+5, r1	; 0x05
    1c54:	21 c0       	rjmp	.+66     	; 0x1c98 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5a:	80 70       	andi	r24, 0x00	; 0
    1c5c:	97 70       	andi	r25, 0x07	; 7
    1c5e:	88 0f       	add	r24, r24
    1c60:	89 2f       	mov	r24, r25
    1c62:	88 1f       	adc	r24, r24
    1c64:	99 0b       	sbc	r25, r25
    1c66:	91 95       	neg	r25
    1c68:	81 6a       	ori	r24, 0xA1	; 161
    1c6a:	0e 94 ce 11 	call	0x239c	; 0x239c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1c6e:	0e 94 0b 12 	call	0x2416	; 0x2416 <TWI_getStatus>
    1c72:	80 34       	cpi	r24, 0x40	; 64
    1c74:	11 f0       	breq	.+4      	; 0x1c7a <EEPROM_readByte+0x90>
        return ERROR;
    1c76:	1d 82       	std	Y+5, r1	; 0x05
    1c78:	0f c0       	rjmp	.+30     	; 0x1c98 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1c7a:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <TWI_readByteWithNACK>
    1c7e:	eb 81       	ldd	r30, Y+3	; 0x03
    1c80:	fc 81       	ldd	r31, Y+4	; 0x04
    1c82:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1c84:	0e 94 0b 12 	call	0x2416	; 0x2416 <TWI_getStatus>
    1c88:	88 35       	cpi	r24, 0x58	; 88
    1c8a:	11 f0       	breq	.+4      	; 0x1c90 <EEPROM_readByte+0xa6>
        return ERROR;
    1c8c:	1d 82       	std	Y+5, r1	; 0x05
    1c8e:	04 c0       	rjmp	.+8      	; 0x1c98 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1c90:	0e 94 c3 11 	call	0x2386	; 0x2386 <TWI_stop>

    return SUCCESS;
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	8d 83       	std	Y+5, r24	; 0x05
    1c98:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	08 95       	ret

00001caa <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1caa:	df 93       	push	r29
    1cac:	cf 93       	push	r28
    1cae:	00 d0       	rcall	.+0      	; 0x1cb0 <GPIO_setupPinDirection+0x6>
    1cb0:	00 d0       	rcall	.+0      	; 0x1cb2 <GPIO_setupPinDirection+0x8>
    1cb2:	0f 92       	push	r0
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
    1cb8:	89 83       	std	Y+1, r24	; 0x01
    1cba:	6a 83       	std	Y+2, r22	; 0x02
    1cbc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc0:	88 30       	cpi	r24, 0x08	; 8
    1cc2:	08 f0       	brcs	.+2      	; 0x1cc6 <GPIO_setupPinDirection+0x1c>
    1cc4:	d5 c0       	rjmp	.+426    	; 0x1e70 <GPIO_setupPinDirection+0x1c6>
    1cc6:	89 81       	ldd	r24, Y+1	; 0x01
    1cc8:	84 30       	cpi	r24, 0x04	; 4
    1cca:	08 f0       	brcs	.+2      	; 0x1cce <GPIO_setupPinDirection+0x24>
    1ccc:	d1 c0       	rjmp	.+418    	; 0x1e70 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	28 2f       	mov	r18, r24
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	3d 83       	std	Y+5, r19	; 0x05
    1cd6:	2c 83       	std	Y+4, r18	; 0x04
    1cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cda:	9d 81       	ldd	r25, Y+5	; 0x05
    1cdc:	81 30       	cpi	r24, 0x01	; 1
    1cde:	91 05       	cpc	r25, r1
    1ce0:	09 f4       	brne	.+2      	; 0x1ce4 <GPIO_setupPinDirection+0x3a>
    1ce2:	43 c0       	rjmp	.+134    	; 0x1d6a <GPIO_setupPinDirection+0xc0>
    1ce4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ce6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ce8:	22 30       	cpi	r18, 0x02	; 2
    1cea:	31 05       	cpc	r19, r1
    1cec:	2c f4       	brge	.+10     	; 0x1cf8 <GPIO_setupPinDirection+0x4e>
    1cee:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf0:	9d 81       	ldd	r25, Y+5	; 0x05
    1cf2:	00 97       	sbiw	r24, 0x00	; 0
    1cf4:	71 f0       	breq	.+28     	; 0x1d12 <GPIO_setupPinDirection+0x68>
    1cf6:	bc c0       	rjmp	.+376    	; 0x1e70 <GPIO_setupPinDirection+0x1c6>
    1cf8:	2c 81       	ldd	r18, Y+4	; 0x04
    1cfa:	3d 81       	ldd	r19, Y+5	; 0x05
    1cfc:	22 30       	cpi	r18, 0x02	; 2
    1cfe:	31 05       	cpc	r19, r1
    1d00:	09 f4       	brne	.+2      	; 0x1d04 <GPIO_setupPinDirection+0x5a>
    1d02:	5f c0       	rjmp	.+190    	; 0x1dc2 <GPIO_setupPinDirection+0x118>
    1d04:	8c 81       	ldd	r24, Y+4	; 0x04
    1d06:	9d 81       	ldd	r25, Y+5	; 0x05
    1d08:	83 30       	cpi	r24, 0x03	; 3
    1d0a:	91 05       	cpc	r25, r1
    1d0c:	09 f4       	brne	.+2      	; 0x1d10 <GPIO_setupPinDirection+0x66>
    1d0e:	85 c0       	rjmp	.+266    	; 0x1e1a <GPIO_setupPinDirection+0x170>
    1d10:	af c0       	rjmp	.+350    	; 0x1e70 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
    1d14:	81 30       	cpi	r24, 0x01	; 1
    1d16:	a1 f4       	brne	.+40     	; 0x1d40 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1d18:	aa e3       	ldi	r26, 0x3A	; 58
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	ea e3       	ldi	r30, 0x3A	; 58
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	48 2f       	mov	r20, r24
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	28 2f       	mov	r18, r24
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	02 2e       	mov	r0, r18
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <GPIO_setupPinDirection+0x8c>
    1d32:	88 0f       	add	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	0a 94       	dec	r0
    1d38:	e2 f7       	brpl	.-8      	; 0x1d32 <GPIO_setupPinDirection+0x88>
    1d3a:	84 2b       	or	r24, r20
    1d3c:	8c 93       	st	X, r24
    1d3e:	98 c0       	rjmp	.+304    	; 0x1e70 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1d40:	aa e3       	ldi	r26, 0x3A	; 58
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	ea e3       	ldi	r30, 0x3A	; 58
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	48 2f       	mov	r20, r24
    1d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4e:	28 2f       	mov	r18, r24
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	02 2e       	mov	r0, r18
    1d58:	02 c0       	rjmp	.+4      	; 0x1d5e <GPIO_setupPinDirection+0xb4>
    1d5a:	88 0f       	add	r24, r24
    1d5c:	99 1f       	adc	r25, r25
    1d5e:	0a 94       	dec	r0
    1d60:	e2 f7       	brpl	.-8      	; 0x1d5a <GPIO_setupPinDirection+0xb0>
    1d62:	80 95       	com	r24
    1d64:	84 23       	and	r24, r20
    1d66:	8c 93       	st	X, r24
    1d68:	83 c0       	rjmp	.+262    	; 0x1e70 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6c:	81 30       	cpi	r24, 0x01	; 1
    1d6e:	a1 f4       	brne	.+40     	; 0x1d98 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1d70:	a7 e3       	ldi	r26, 0x37	; 55
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	e7 e3       	ldi	r30, 0x37	; 55
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	48 2f       	mov	r20, r24
    1d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7e:	28 2f       	mov	r18, r24
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	02 2e       	mov	r0, r18
    1d88:	02 c0       	rjmp	.+4      	; 0x1d8e <GPIO_setupPinDirection+0xe4>
    1d8a:	88 0f       	add	r24, r24
    1d8c:	99 1f       	adc	r25, r25
    1d8e:	0a 94       	dec	r0
    1d90:	e2 f7       	brpl	.-8      	; 0x1d8a <GPIO_setupPinDirection+0xe0>
    1d92:	84 2b       	or	r24, r20
    1d94:	8c 93       	st	X, r24
    1d96:	6c c0       	rjmp	.+216    	; 0x1e70 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1d98:	a7 e3       	ldi	r26, 0x37	; 55
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	e7 e3       	ldi	r30, 0x37	; 55
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	48 2f       	mov	r20, r24
    1da4:	8a 81       	ldd	r24, Y+2	; 0x02
    1da6:	28 2f       	mov	r18, r24
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	02 2e       	mov	r0, r18
    1db0:	02 c0       	rjmp	.+4      	; 0x1db6 <GPIO_setupPinDirection+0x10c>
    1db2:	88 0f       	add	r24, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	0a 94       	dec	r0
    1db8:	e2 f7       	brpl	.-8      	; 0x1db2 <GPIO_setupPinDirection+0x108>
    1dba:	80 95       	com	r24
    1dbc:	84 23       	and	r24, r20
    1dbe:	8c 93       	st	X, r24
    1dc0:	57 c0       	rjmp	.+174    	; 0x1e70 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	81 30       	cpi	r24, 0x01	; 1
    1dc6:	a1 f4       	brne	.+40     	; 0x1df0 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1dc8:	a4 e3       	ldi	r26, 0x34	; 52
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	e4 e3       	ldi	r30, 0x34	; 52
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	48 2f       	mov	r20, r24
    1dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd6:	28 2f       	mov	r18, r24
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	02 2e       	mov	r0, r18
    1de0:	02 c0       	rjmp	.+4      	; 0x1de6 <GPIO_setupPinDirection+0x13c>
    1de2:	88 0f       	add	r24, r24
    1de4:	99 1f       	adc	r25, r25
    1de6:	0a 94       	dec	r0
    1de8:	e2 f7       	brpl	.-8      	; 0x1de2 <GPIO_setupPinDirection+0x138>
    1dea:	84 2b       	or	r24, r20
    1dec:	8c 93       	st	X, r24
    1dee:	40 c0       	rjmp	.+128    	; 0x1e70 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1df0:	a4 e3       	ldi	r26, 0x34	; 52
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	e4 e3       	ldi	r30, 0x34	; 52
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	48 2f       	mov	r20, r24
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	28 2f       	mov	r18, r24
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	02 2e       	mov	r0, r18
    1e08:	02 c0       	rjmp	.+4      	; 0x1e0e <GPIO_setupPinDirection+0x164>
    1e0a:	88 0f       	add	r24, r24
    1e0c:	99 1f       	adc	r25, r25
    1e0e:	0a 94       	dec	r0
    1e10:	e2 f7       	brpl	.-8      	; 0x1e0a <GPIO_setupPinDirection+0x160>
    1e12:	80 95       	com	r24
    1e14:	84 23       	and	r24, r20
    1e16:	8c 93       	st	X, r24
    1e18:	2b c0       	rjmp	.+86     	; 0x1e70 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1c:	81 30       	cpi	r24, 0x01	; 1
    1e1e:	a1 f4       	brne	.+40     	; 0x1e48 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1e20:	a1 e3       	ldi	r26, 0x31	; 49
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	e1 e3       	ldi	r30, 0x31	; 49
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	48 2f       	mov	r20, r24
    1e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2e:	28 2f       	mov	r18, r24
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	02 2e       	mov	r0, r18
    1e38:	02 c0       	rjmp	.+4      	; 0x1e3e <GPIO_setupPinDirection+0x194>
    1e3a:	88 0f       	add	r24, r24
    1e3c:	99 1f       	adc	r25, r25
    1e3e:	0a 94       	dec	r0
    1e40:	e2 f7       	brpl	.-8      	; 0x1e3a <GPIO_setupPinDirection+0x190>
    1e42:	84 2b       	or	r24, r20
    1e44:	8c 93       	st	X, r24
    1e46:	14 c0       	rjmp	.+40     	; 0x1e70 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1e48:	a1 e3       	ldi	r26, 0x31	; 49
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	e1 e3       	ldi	r30, 0x31	; 49
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	48 2f       	mov	r20, r24
    1e54:	8a 81       	ldd	r24, Y+2	; 0x02
    1e56:	28 2f       	mov	r18, r24
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	02 2e       	mov	r0, r18
    1e60:	02 c0       	rjmp	.+4      	; 0x1e66 <GPIO_setupPinDirection+0x1bc>
    1e62:	88 0f       	add	r24, r24
    1e64:	99 1f       	adc	r25, r25
    1e66:	0a 94       	dec	r0
    1e68:	e2 f7       	brpl	.-8      	; 0x1e62 <GPIO_setupPinDirection+0x1b8>
    1e6a:	80 95       	com	r24
    1e6c:	84 23       	and	r24, r20
    1e6e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1e70:	0f 90       	pop	r0
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	cf 91       	pop	r28
    1e7c:	df 91       	pop	r29
    1e7e:	08 95       	ret

00001e80 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1e80:	df 93       	push	r29
    1e82:	cf 93       	push	r28
    1e84:	00 d0       	rcall	.+0      	; 0x1e86 <GPIO_writePin+0x6>
    1e86:	00 d0       	rcall	.+0      	; 0x1e88 <GPIO_writePin+0x8>
    1e88:	0f 92       	push	r0
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
    1e8e:	89 83       	std	Y+1, r24	; 0x01
    1e90:	6a 83       	std	Y+2, r22	; 0x02
    1e92:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e94:	8a 81       	ldd	r24, Y+2	; 0x02
    1e96:	88 30       	cpi	r24, 0x08	; 8
    1e98:	08 f0       	brcs	.+2      	; 0x1e9c <GPIO_writePin+0x1c>
    1e9a:	d5 c0       	rjmp	.+426    	; 0x2046 <GPIO_writePin+0x1c6>
    1e9c:	89 81       	ldd	r24, Y+1	; 0x01
    1e9e:	84 30       	cpi	r24, 0x04	; 4
    1ea0:	08 f0       	brcs	.+2      	; 0x1ea4 <GPIO_writePin+0x24>
    1ea2:	d1 c0       	rjmp	.+418    	; 0x2046 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1ea4:	89 81       	ldd	r24, Y+1	; 0x01
    1ea6:	28 2f       	mov	r18, r24
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	3d 83       	std	Y+5, r19	; 0x05
    1eac:	2c 83       	std	Y+4, r18	; 0x04
    1eae:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb0:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb2:	81 30       	cpi	r24, 0x01	; 1
    1eb4:	91 05       	cpc	r25, r1
    1eb6:	09 f4       	brne	.+2      	; 0x1eba <GPIO_writePin+0x3a>
    1eb8:	43 c0       	rjmp	.+134    	; 0x1f40 <GPIO_writePin+0xc0>
    1eba:	2c 81       	ldd	r18, Y+4	; 0x04
    1ebc:	3d 81       	ldd	r19, Y+5	; 0x05
    1ebe:	22 30       	cpi	r18, 0x02	; 2
    1ec0:	31 05       	cpc	r19, r1
    1ec2:	2c f4       	brge	.+10     	; 0x1ece <GPIO_writePin+0x4e>
    1ec4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec8:	00 97       	sbiw	r24, 0x00	; 0
    1eca:	71 f0       	breq	.+28     	; 0x1ee8 <GPIO_writePin+0x68>
    1ecc:	bc c0       	rjmp	.+376    	; 0x2046 <GPIO_writePin+0x1c6>
    1ece:	2c 81       	ldd	r18, Y+4	; 0x04
    1ed0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ed2:	22 30       	cpi	r18, 0x02	; 2
    1ed4:	31 05       	cpc	r19, r1
    1ed6:	09 f4       	brne	.+2      	; 0x1eda <GPIO_writePin+0x5a>
    1ed8:	5f c0       	rjmp	.+190    	; 0x1f98 <GPIO_writePin+0x118>
    1eda:	8c 81       	ldd	r24, Y+4	; 0x04
    1edc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ede:	83 30       	cpi	r24, 0x03	; 3
    1ee0:	91 05       	cpc	r25, r1
    1ee2:	09 f4       	brne	.+2      	; 0x1ee6 <GPIO_writePin+0x66>
    1ee4:	85 c0       	rjmp	.+266    	; 0x1ff0 <GPIO_writePin+0x170>
    1ee6:	af c0       	rjmp	.+350    	; 0x2046 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	81 30       	cpi	r24, 0x01	; 1
    1eec:	a1 f4       	brne	.+40     	; 0x1f16 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1eee:	ab e3       	ldi	r26, 0x3B	; 59
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	eb e3       	ldi	r30, 0x3B	; 59
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	48 2f       	mov	r20, r24
    1efa:	8a 81       	ldd	r24, Y+2	; 0x02
    1efc:	28 2f       	mov	r18, r24
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	02 2e       	mov	r0, r18
    1f06:	02 c0       	rjmp	.+4      	; 0x1f0c <GPIO_writePin+0x8c>
    1f08:	88 0f       	add	r24, r24
    1f0a:	99 1f       	adc	r25, r25
    1f0c:	0a 94       	dec	r0
    1f0e:	e2 f7       	brpl	.-8      	; 0x1f08 <GPIO_writePin+0x88>
    1f10:	84 2b       	or	r24, r20
    1f12:	8c 93       	st	X, r24
    1f14:	98 c0       	rjmp	.+304    	; 0x2046 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1f16:	ab e3       	ldi	r26, 0x3B	; 59
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	eb e3       	ldi	r30, 0x3B	; 59
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	48 2f       	mov	r20, r24
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	28 2f       	mov	r18, r24
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	02 2e       	mov	r0, r18
    1f2e:	02 c0       	rjmp	.+4      	; 0x1f34 <GPIO_writePin+0xb4>
    1f30:	88 0f       	add	r24, r24
    1f32:	99 1f       	adc	r25, r25
    1f34:	0a 94       	dec	r0
    1f36:	e2 f7       	brpl	.-8      	; 0x1f30 <GPIO_writePin+0xb0>
    1f38:	80 95       	com	r24
    1f3a:	84 23       	and	r24, r20
    1f3c:	8c 93       	st	X, r24
    1f3e:	83 c0       	rjmp	.+262    	; 0x2046 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	81 30       	cpi	r24, 0x01	; 1
    1f44:	a1 f4       	brne	.+40     	; 0x1f6e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1f46:	a8 e3       	ldi	r26, 0x38	; 56
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	e8 e3       	ldi	r30, 0x38	; 56
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	48 2f       	mov	r20, r24
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	28 2f       	mov	r18, r24
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	02 2e       	mov	r0, r18
    1f5e:	02 c0       	rjmp	.+4      	; 0x1f64 <GPIO_writePin+0xe4>
    1f60:	88 0f       	add	r24, r24
    1f62:	99 1f       	adc	r25, r25
    1f64:	0a 94       	dec	r0
    1f66:	e2 f7       	brpl	.-8      	; 0x1f60 <GPIO_writePin+0xe0>
    1f68:	84 2b       	or	r24, r20
    1f6a:	8c 93       	st	X, r24
    1f6c:	6c c0       	rjmp	.+216    	; 0x2046 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1f6e:	a8 e3       	ldi	r26, 0x38	; 56
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	e8 e3       	ldi	r30, 0x38	; 56
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	48 2f       	mov	r20, r24
    1f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7c:	28 2f       	mov	r18, r24
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	02 2e       	mov	r0, r18
    1f86:	02 c0       	rjmp	.+4      	; 0x1f8c <GPIO_writePin+0x10c>
    1f88:	88 0f       	add	r24, r24
    1f8a:	99 1f       	adc	r25, r25
    1f8c:	0a 94       	dec	r0
    1f8e:	e2 f7       	brpl	.-8      	; 0x1f88 <GPIO_writePin+0x108>
    1f90:	80 95       	com	r24
    1f92:	84 23       	and	r24, r20
    1f94:	8c 93       	st	X, r24
    1f96:	57 c0       	rjmp	.+174    	; 0x2046 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1f98:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9a:	81 30       	cpi	r24, 0x01	; 1
    1f9c:	a1 f4       	brne	.+40     	; 0x1fc6 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1f9e:	a5 e3       	ldi	r26, 0x35	; 53
    1fa0:	b0 e0       	ldi	r27, 0x00	; 0
    1fa2:	e5 e3       	ldi	r30, 0x35	; 53
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	48 2f       	mov	r20, r24
    1faa:	8a 81       	ldd	r24, Y+2	; 0x02
    1fac:	28 2f       	mov	r18, r24
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	02 2e       	mov	r0, r18
    1fb6:	02 c0       	rjmp	.+4      	; 0x1fbc <GPIO_writePin+0x13c>
    1fb8:	88 0f       	add	r24, r24
    1fba:	99 1f       	adc	r25, r25
    1fbc:	0a 94       	dec	r0
    1fbe:	e2 f7       	brpl	.-8      	; 0x1fb8 <GPIO_writePin+0x138>
    1fc0:	84 2b       	or	r24, r20
    1fc2:	8c 93       	st	X, r24
    1fc4:	40 c0       	rjmp	.+128    	; 0x2046 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1fc6:	a5 e3       	ldi	r26, 0x35	; 53
    1fc8:	b0 e0       	ldi	r27, 0x00	; 0
    1fca:	e5 e3       	ldi	r30, 0x35	; 53
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	48 2f       	mov	r20, r24
    1fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd4:	28 2f       	mov	r18, r24
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	02 2e       	mov	r0, r18
    1fde:	02 c0       	rjmp	.+4      	; 0x1fe4 <GPIO_writePin+0x164>
    1fe0:	88 0f       	add	r24, r24
    1fe2:	99 1f       	adc	r25, r25
    1fe4:	0a 94       	dec	r0
    1fe6:	e2 f7       	brpl	.-8      	; 0x1fe0 <GPIO_writePin+0x160>
    1fe8:	80 95       	com	r24
    1fea:	84 23       	and	r24, r20
    1fec:	8c 93       	st	X, r24
    1fee:	2b c0       	rjmp	.+86     	; 0x2046 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff2:	81 30       	cpi	r24, 0x01	; 1
    1ff4:	a1 f4       	brne	.+40     	; 0x201e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1ff6:	a2 e3       	ldi	r26, 0x32	; 50
    1ff8:	b0 e0       	ldi	r27, 0x00	; 0
    1ffa:	e2 e3       	ldi	r30, 0x32	; 50
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	80 81       	ld	r24, Z
    2000:	48 2f       	mov	r20, r24
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	28 2f       	mov	r18, r24
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	02 2e       	mov	r0, r18
    200e:	02 c0       	rjmp	.+4      	; 0x2014 <GPIO_writePin+0x194>
    2010:	88 0f       	add	r24, r24
    2012:	99 1f       	adc	r25, r25
    2014:	0a 94       	dec	r0
    2016:	e2 f7       	brpl	.-8      	; 0x2010 <GPIO_writePin+0x190>
    2018:	84 2b       	or	r24, r20
    201a:	8c 93       	st	X, r24
    201c:	14 c0       	rjmp	.+40     	; 0x2046 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    201e:	a2 e3       	ldi	r26, 0x32	; 50
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	e2 e3       	ldi	r30, 0x32	; 50
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	48 2f       	mov	r20, r24
    202a:	8a 81       	ldd	r24, Y+2	; 0x02
    202c:	28 2f       	mov	r18, r24
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	02 2e       	mov	r0, r18
    2036:	02 c0       	rjmp	.+4      	; 0x203c <GPIO_writePin+0x1bc>
    2038:	88 0f       	add	r24, r24
    203a:	99 1f       	adc	r25, r25
    203c:	0a 94       	dec	r0
    203e:	e2 f7       	brpl	.-8      	; 0x2038 <GPIO_writePin+0x1b8>
    2040:	80 95       	com	r24
    2042:	84 23       	and	r24, r20
    2044:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	cf 91       	pop	r28
    2052:	df 91       	pop	r29
    2054:	08 95       	ret

00002056 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2056:	df 93       	push	r29
    2058:	cf 93       	push	r28
    205a:	00 d0       	rcall	.+0      	; 0x205c <GPIO_readPin+0x6>
    205c:	00 d0       	rcall	.+0      	; 0x205e <GPIO_readPin+0x8>
    205e:	0f 92       	push	r0
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    2064:	8a 83       	std	Y+2, r24	; 0x02
    2066:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2068:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    206a:	8b 81       	ldd	r24, Y+3	; 0x03
    206c:	88 30       	cpi	r24, 0x08	; 8
    206e:	08 f0       	brcs	.+2      	; 0x2072 <GPIO_readPin+0x1c>
    2070:	84 c0       	rjmp	.+264    	; 0x217a <GPIO_readPin+0x124>
    2072:	8a 81       	ldd	r24, Y+2	; 0x02
    2074:	84 30       	cpi	r24, 0x04	; 4
    2076:	08 f0       	brcs	.+2      	; 0x207a <GPIO_readPin+0x24>
    2078:	80 c0       	rjmp	.+256    	; 0x217a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    207a:	8a 81       	ldd	r24, Y+2	; 0x02
    207c:	28 2f       	mov	r18, r24
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	3d 83       	std	Y+5, r19	; 0x05
    2082:	2c 83       	std	Y+4, r18	; 0x04
    2084:	4c 81       	ldd	r20, Y+4	; 0x04
    2086:	5d 81       	ldd	r21, Y+5	; 0x05
    2088:	41 30       	cpi	r20, 0x01	; 1
    208a:	51 05       	cpc	r21, r1
    208c:	79 f1       	breq	.+94     	; 0x20ec <GPIO_readPin+0x96>
    208e:	8c 81       	ldd	r24, Y+4	; 0x04
    2090:	9d 81       	ldd	r25, Y+5	; 0x05
    2092:	82 30       	cpi	r24, 0x02	; 2
    2094:	91 05       	cpc	r25, r1
    2096:	34 f4       	brge	.+12     	; 0x20a4 <GPIO_readPin+0x4e>
    2098:	2c 81       	ldd	r18, Y+4	; 0x04
    209a:	3d 81       	ldd	r19, Y+5	; 0x05
    209c:	21 15       	cp	r18, r1
    209e:	31 05       	cpc	r19, r1
    20a0:	69 f0       	breq	.+26     	; 0x20bc <GPIO_readPin+0x66>
    20a2:	6b c0       	rjmp	.+214    	; 0x217a <GPIO_readPin+0x124>
    20a4:	4c 81       	ldd	r20, Y+4	; 0x04
    20a6:	5d 81       	ldd	r21, Y+5	; 0x05
    20a8:	42 30       	cpi	r20, 0x02	; 2
    20aa:	51 05       	cpc	r21, r1
    20ac:	b9 f1       	breq	.+110    	; 0x211c <GPIO_readPin+0xc6>
    20ae:	8c 81       	ldd	r24, Y+4	; 0x04
    20b0:	9d 81       	ldd	r25, Y+5	; 0x05
    20b2:	83 30       	cpi	r24, 0x03	; 3
    20b4:	91 05       	cpc	r25, r1
    20b6:	09 f4       	brne	.+2      	; 0x20ba <GPIO_readPin+0x64>
    20b8:	49 c0       	rjmp	.+146    	; 0x214c <GPIO_readPin+0xf6>
    20ba:	5f c0       	rjmp	.+190    	; 0x217a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    20bc:	e9 e3       	ldi	r30, 0x39	; 57
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	28 2f       	mov	r18, r24
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	8b 81       	ldd	r24, Y+3	; 0x03
    20c8:	88 2f       	mov	r24, r24
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	a9 01       	movw	r20, r18
    20ce:	02 c0       	rjmp	.+4      	; 0x20d4 <GPIO_readPin+0x7e>
    20d0:	55 95       	asr	r21
    20d2:	47 95       	ror	r20
    20d4:	8a 95       	dec	r24
    20d6:	e2 f7       	brpl	.-8      	; 0x20d0 <GPIO_readPin+0x7a>
    20d8:	ca 01       	movw	r24, r20
    20da:	81 70       	andi	r24, 0x01	; 1
    20dc:	90 70       	andi	r25, 0x00	; 0
    20de:	88 23       	and	r24, r24
    20e0:	19 f0       	breq	.+6      	; 0x20e8 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	89 83       	std	Y+1, r24	; 0x01
    20e6:	49 c0       	rjmp	.+146    	; 0x217a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    20e8:	19 82       	std	Y+1, r1	; 0x01
    20ea:	47 c0       	rjmp	.+142    	; 0x217a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    20ec:	e6 e3       	ldi	r30, 0x36	; 54
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	28 2f       	mov	r18, r24
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	8b 81       	ldd	r24, Y+3	; 0x03
    20f8:	88 2f       	mov	r24, r24
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	a9 01       	movw	r20, r18
    20fe:	02 c0       	rjmp	.+4      	; 0x2104 <GPIO_readPin+0xae>
    2100:	55 95       	asr	r21
    2102:	47 95       	ror	r20
    2104:	8a 95       	dec	r24
    2106:	e2 f7       	brpl	.-8      	; 0x2100 <GPIO_readPin+0xaa>
    2108:	ca 01       	movw	r24, r20
    210a:	81 70       	andi	r24, 0x01	; 1
    210c:	90 70       	andi	r25, 0x00	; 0
    210e:	88 23       	and	r24, r24
    2110:	19 f0       	breq	.+6      	; 0x2118 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	89 83       	std	Y+1, r24	; 0x01
    2116:	31 c0       	rjmp	.+98     	; 0x217a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2118:	19 82       	std	Y+1, r1	; 0x01
    211a:	2f c0       	rjmp	.+94     	; 0x217a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    211c:	e3 e3       	ldi	r30, 0x33	; 51
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	28 2f       	mov	r18, r24
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	8b 81       	ldd	r24, Y+3	; 0x03
    2128:	88 2f       	mov	r24, r24
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	a9 01       	movw	r20, r18
    212e:	02 c0       	rjmp	.+4      	; 0x2134 <GPIO_readPin+0xde>
    2130:	55 95       	asr	r21
    2132:	47 95       	ror	r20
    2134:	8a 95       	dec	r24
    2136:	e2 f7       	brpl	.-8      	; 0x2130 <GPIO_readPin+0xda>
    2138:	ca 01       	movw	r24, r20
    213a:	81 70       	andi	r24, 0x01	; 1
    213c:	90 70       	andi	r25, 0x00	; 0
    213e:	88 23       	and	r24, r24
    2140:	19 f0       	breq	.+6      	; 0x2148 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	89 83       	std	Y+1, r24	; 0x01
    2146:	19 c0       	rjmp	.+50     	; 0x217a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2148:	19 82       	std	Y+1, r1	; 0x01
    214a:	17 c0       	rjmp	.+46     	; 0x217a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    214c:	e0 e3       	ldi	r30, 0x30	; 48
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	28 2f       	mov	r18, r24
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	8b 81       	ldd	r24, Y+3	; 0x03
    2158:	88 2f       	mov	r24, r24
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	a9 01       	movw	r20, r18
    215e:	02 c0       	rjmp	.+4      	; 0x2164 <GPIO_readPin+0x10e>
    2160:	55 95       	asr	r21
    2162:	47 95       	ror	r20
    2164:	8a 95       	dec	r24
    2166:	e2 f7       	brpl	.-8      	; 0x2160 <GPIO_readPin+0x10a>
    2168:	ca 01       	movw	r24, r20
    216a:	81 70       	andi	r24, 0x01	; 1
    216c:	90 70       	andi	r25, 0x00	; 0
    216e:	88 23       	and	r24, r24
    2170:	19 f0       	breq	.+6      	; 0x2178 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	89 83       	std	Y+1, r24	; 0x01
    2176:	01 c0       	rjmp	.+2      	; 0x217a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2178:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    217a:	89 81       	ldd	r24, Y+1	; 0x01
}
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	08 95       	ret

0000218c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	00 d0       	rcall	.+0      	; 0x2192 <GPIO_setupPortDirection+0x6>
    2192:	00 d0       	rcall	.+0      	; 0x2194 <GPIO_setupPortDirection+0x8>
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    2198:	89 83       	std	Y+1, r24	; 0x01
    219a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	84 30       	cpi	r24, 0x04	; 4
    21a0:	90 f5       	brcc	.+100    	; 0x2206 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	28 2f       	mov	r18, r24
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	3c 83       	std	Y+4, r19	; 0x04
    21aa:	2b 83       	std	Y+3, r18	; 0x03
    21ac:	8b 81       	ldd	r24, Y+3	; 0x03
    21ae:	9c 81       	ldd	r25, Y+4	; 0x04
    21b0:	81 30       	cpi	r24, 0x01	; 1
    21b2:	91 05       	cpc	r25, r1
    21b4:	d1 f0       	breq	.+52     	; 0x21ea <GPIO_setupPortDirection+0x5e>
    21b6:	2b 81       	ldd	r18, Y+3	; 0x03
    21b8:	3c 81       	ldd	r19, Y+4	; 0x04
    21ba:	22 30       	cpi	r18, 0x02	; 2
    21bc:	31 05       	cpc	r19, r1
    21be:	2c f4       	brge	.+10     	; 0x21ca <GPIO_setupPortDirection+0x3e>
    21c0:	8b 81       	ldd	r24, Y+3	; 0x03
    21c2:	9c 81       	ldd	r25, Y+4	; 0x04
    21c4:	00 97       	sbiw	r24, 0x00	; 0
    21c6:	61 f0       	breq	.+24     	; 0x21e0 <GPIO_setupPortDirection+0x54>
    21c8:	1e c0       	rjmp	.+60     	; 0x2206 <GPIO_setupPortDirection+0x7a>
    21ca:	2b 81       	ldd	r18, Y+3	; 0x03
    21cc:	3c 81       	ldd	r19, Y+4	; 0x04
    21ce:	22 30       	cpi	r18, 0x02	; 2
    21d0:	31 05       	cpc	r19, r1
    21d2:	81 f0       	breq	.+32     	; 0x21f4 <GPIO_setupPortDirection+0x68>
    21d4:	8b 81       	ldd	r24, Y+3	; 0x03
    21d6:	9c 81       	ldd	r25, Y+4	; 0x04
    21d8:	83 30       	cpi	r24, 0x03	; 3
    21da:	91 05       	cpc	r25, r1
    21dc:	81 f0       	breq	.+32     	; 0x21fe <GPIO_setupPortDirection+0x72>
    21de:	13 c0       	rjmp	.+38     	; 0x2206 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    21e0:	ea e3       	ldi	r30, 0x3A	; 58
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	8a 81       	ldd	r24, Y+2	; 0x02
    21e6:	80 83       	st	Z, r24
    21e8:	0e c0       	rjmp	.+28     	; 0x2206 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    21ea:	e7 e3       	ldi	r30, 0x37	; 55
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	8a 81       	ldd	r24, Y+2	; 0x02
    21f0:	80 83       	st	Z, r24
    21f2:	09 c0       	rjmp	.+18     	; 0x2206 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    21f4:	e4 e3       	ldi	r30, 0x34	; 52
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	8a 81       	ldd	r24, Y+2	; 0x02
    21fa:	80 83       	st	Z, r24
    21fc:	04 c0       	rjmp	.+8      	; 0x2206 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    21fe:	e1 e3       	ldi	r30, 0x31	; 49
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	8a 81       	ldd	r24, Y+2	; 0x02
    2204:	80 83       	st	Z, r24
			break;
		}
	}
}
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	0f 90       	pop	r0
    220e:	cf 91       	pop	r28
    2210:	df 91       	pop	r29
    2212:	08 95       	ret

00002214 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2214:	df 93       	push	r29
    2216:	cf 93       	push	r28
    2218:	00 d0       	rcall	.+0      	; 0x221a <GPIO_writePort+0x6>
    221a:	00 d0       	rcall	.+0      	; 0x221c <GPIO_writePort+0x8>
    221c:	cd b7       	in	r28, 0x3d	; 61
    221e:	de b7       	in	r29, 0x3e	; 62
    2220:	89 83       	std	Y+1, r24	; 0x01
    2222:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	84 30       	cpi	r24, 0x04	; 4
    2228:	90 f5       	brcc	.+100    	; 0x228e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    222a:	89 81       	ldd	r24, Y+1	; 0x01
    222c:	28 2f       	mov	r18, r24
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	3c 83       	std	Y+4, r19	; 0x04
    2232:	2b 83       	std	Y+3, r18	; 0x03
    2234:	8b 81       	ldd	r24, Y+3	; 0x03
    2236:	9c 81       	ldd	r25, Y+4	; 0x04
    2238:	81 30       	cpi	r24, 0x01	; 1
    223a:	91 05       	cpc	r25, r1
    223c:	d1 f0       	breq	.+52     	; 0x2272 <GPIO_writePort+0x5e>
    223e:	2b 81       	ldd	r18, Y+3	; 0x03
    2240:	3c 81       	ldd	r19, Y+4	; 0x04
    2242:	22 30       	cpi	r18, 0x02	; 2
    2244:	31 05       	cpc	r19, r1
    2246:	2c f4       	brge	.+10     	; 0x2252 <GPIO_writePort+0x3e>
    2248:	8b 81       	ldd	r24, Y+3	; 0x03
    224a:	9c 81       	ldd	r25, Y+4	; 0x04
    224c:	00 97       	sbiw	r24, 0x00	; 0
    224e:	61 f0       	breq	.+24     	; 0x2268 <GPIO_writePort+0x54>
    2250:	1e c0       	rjmp	.+60     	; 0x228e <GPIO_writePort+0x7a>
    2252:	2b 81       	ldd	r18, Y+3	; 0x03
    2254:	3c 81       	ldd	r19, Y+4	; 0x04
    2256:	22 30       	cpi	r18, 0x02	; 2
    2258:	31 05       	cpc	r19, r1
    225a:	81 f0       	breq	.+32     	; 0x227c <GPIO_writePort+0x68>
    225c:	8b 81       	ldd	r24, Y+3	; 0x03
    225e:	9c 81       	ldd	r25, Y+4	; 0x04
    2260:	83 30       	cpi	r24, 0x03	; 3
    2262:	91 05       	cpc	r25, r1
    2264:	81 f0       	breq	.+32     	; 0x2286 <GPIO_writePort+0x72>
    2266:	13 c0       	rjmp	.+38     	; 0x228e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2268:	eb e3       	ldi	r30, 0x3B	; 59
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	8a 81       	ldd	r24, Y+2	; 0x02
    226e:	80 83       	st	Z, r24
    2270:	0e c0       	rjmp	.+28     	; 0x228e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2272:	e8 e3       	ldi	r30, 0x38	; 56
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	8a 81       	ldd	r24, Y+2	; 0x02
    2278:	80 83       	st	Z, r24
    227a:	09 c0       	rjmp	.+18     	; 0x228e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    227c:	e5 e3       	ldi	r30, 0x35	; 53
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	8a 81       	ldd	r24, Y+2	; 0x02
    2282:	80 83       	st	Z, r24
    2284:	04 c0       	rjmp	.+8      	; 0x228e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2286:	e2 e3       	ldi	r30, 0x32	; 50
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	8a 81       	ldd	r24, Y+2	; 0x02
    228c:	80 83       	st	Z, r24
			break;
		}
	}
}
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	0f 90       	pop	r0
    2296:	cf 91       	pop	r28
    2298:	df 91       	pop	r29
    229a:	08 95       	ret

0000229c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    229c:	df 93       	push	r29
    229e:	cf 93       	push	r28
    22a0:	00 d0       	rcall	.+0      	; 0x22a2 <GPIO_readPort+0x6>
    22a2:	00 d0       	rcall	.+0      	; 0x22a4 <GPIO_readPort+0x8>
    22a4:	cd b7       	in	r28, 0x3d	; 61
    22a6:	de b7       	in	r29, 0x3e	; 62
    22a8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    22aa:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    22ac:	8a 81       	ldd	r24, Y+2	; 0x02
    22ae:	84 30       	cpi	r24, 0x04	; 4
    22b0:	90 f5       	brcc	.+100    	; 0x2316 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    22b2:	8a 81       	ldd	r24, Y+2	; 0x02
    22b4:	28 2f       	mov	r18, r24
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	3c 83       	std	Y+4, r19	; 0x04
    22ba:	2b 83       	std	Y+3, r18	; 0x03
    22bc:	8b 81       	ldd	r24, Y+3	; 0x03
    22be:	9c 81       	ldd	r25, Y+4	; 0x04
    22c0:	81 30       	cpi	r24, 0x01	; 1
    22c2:	91 05       	cpc	r25, r1
    22c4:	d1 f0       	breq	.+52     	; 0x22fa <GPIO_readPort+0x5e>
    22c6:	2b 81       	ldd	r18, Y+3	; 0x03
    22c8:	3c 81       	ldd	r19, Y+4	; 0x04
    22ca:	22 30       	cpi	r18, 0x02	; 2
    22cc:	31 05       	cpc	r19, r1
    22ce:	2c f4       	brge	.+10     	; 0x22da <GPIO_readPort+0x3e>
    22d0:	8b 81       	ldd	r24, Y+3	; 0x03
    22d2:	9c 81       	ldd	r25, Y+4	; 0x04
    22d4:	00 97       	sbiw	r24, 0x00	; 0
    22d6:	61 f0       	breq	.+24     	; 0x22f0 <GPIO_readPort+0x54>
    22d8:	1e c0       	rjmp	.+60     	; 0x2316 <GPIO_readPort+0x7a>
    22da:	2b 81       	ldd	r18, Y+3	; 0x03
    22dc:	3c 81       	ldd	r19, Y+4	; 0x04
    22de:	22 30       	cpi	r18, 0x02	; 2
    22e0:	31 05       	cpc	r19, r1
    22e2:	81 f0       	breq	.+32     	; 0x2304 <GPIO_readPort+0x68>
    22e4:	8b 81       	ldd	r24, Y+3	; 0x03
    22e6:	9c 81       	ldd	r25, Y+4	; 0x04
    22e8:	83 30       	cpi	r24, 0x03	; 3
    22ea:	91 05       	cpc	r25, r1
    22ec:	81 f0       	breq	.+32     	; 0x230e <GPIO_readPort+0x72>
    22ee:	13 c0       	rjmp	.+38     	; 0x2316 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    22f0:	e9 e3       	ldi	r30, 0x39	; 57
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	89 83       	std	Y+1, r24	; 0x01
    22f8:	0e c0       	rjmp	.+28     	; 0x2316 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    22fa:	e6 e3       	ldi	r30, 0x36	; 54
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 81       	ld	r24, Z
    2300:	89 83       	std	Y+1, r24	; 0x01
    2302:	09 c0       	rjmp	.+18     	; 0x2316 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2304:	e3 e3       	ldi	r30, 0x33	; 51
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	89 83       	std	Y+1, r24	; 0x01
    230c:	04 c0       	rjmp	.+8      	; 0x2316 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    230e:	e0 e3       	ldi	r30, 0x30	; 48
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2316:	89 81       	ldd	r24, Y+1	; 0x01
}
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	0f 90       	pop	r0
    2320:	cf 91       	pop	r28
    2322:	df 91       	pop	r29
    2324:	08 95       	ret

00002326 <TWI_init>:
#include "common_macros.h"
#include <avr/io.h>


void TWI_init(const TWI_ConfigType * Config_Ptr )
{
    2326:	df 93       	push	r29
    2328:	cf 93       	push	r28
    232a:	00 d0       	rcall	.+0      	; 0x232c <TWI_init+0x6>
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	9a 83       	std	Y+2, r25	; 0x02
    2332:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = Config_Ptr->bit_rate;
    2334:	a0 e2       	ldi	r26, 0x20	; 32
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	e9 81       	ldd	r30, Y+1	; 0x01
    233a:	fa 81       	ldd	r31, Y+2	; 0x02
    233c:	80 81       	ld	r24, Z
    233e:	8c 93       	st	X, r24
	TWSR = 0x00; /* using no prescaler */
    2340:	e1 e2       	ldi	r30, 0x21	; 33
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	10 82       	st	Z, r1

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR =((Config_Ptr->myaddress)<<1);  // my address = 0x01 :)
    2346:	a2 e2       	ldi	r26, 0x22	; 34
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	e9 81       	ldd	r30, Y+1	; 0x01
    234c:	fa 81       	ldd	r31, Y+2	; 0x02
    234e:	81 81       	ldd	r24, Z+1	; 0x01
    2350:	88 0f       	add	r24, r24
    2352:	8c 93       	st	X, r24
    TWCR = (1<<TWEN); /* enable TWI */
    2354:	e6 e5       	ldi	r30, 0x56	; 86
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	84 e0       	ldi	r24, 0x04	; 4
    235a:	80 83       	st	Z, r24
}
    235c:	0f 90       	pop	r0
    235e:	0f 90       	pop	r0
    2360:	cf 91       	pop	r28
    2362:	df 91       	pop	r29
    2364:	08 95       	ret

00002366 <TWI_start>:

void TWI_start(void)
{
    2366:	df 93       	push	r29
    2368:	cf 93       	push	r28
    236a:	cd b7       	in	r28, 0x3d	; 61
    236c:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    236e:	e6 e5       	ldi	r30, 0x56	; 86
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	84 ea       	ldi	r24, 0xA4	; 164
    2374:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2376:	e6 e5       	ldi	r30, 0x56	; 86
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	88 23       	and	r24, r24
    237e:	dc f7       	brge	.-10     	; 0x2376 <TWI_start+0x10>
}
    2380:	cf 91       	pop	r28
    2382:	df 91       	pop	r29
    2384:	08 95       	ret

00002386 <TWI_stop>:

void TWI_stop(void)
{
    2386:	df 93       	push	r29
    2388:	cf 93       	push	r28
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    238e:	e6 e5       	ldi	r30, 0x56	; 86
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	84 e9       	ldi	r24, 0x94	; 148
    2394:	80 83       	st	Z, r24
}
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	08 95       	ret

0000239c <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    239c:	df 93       	push	r29
    239e:	cf 93       	push	r28
    23a0:	0f 92       	push	r0
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
    23a6:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    23a8:	e3 e2       	ldi	r30, 0x23	; 35
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
    23ae:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    23b0:	e6 e5       	ldi	r30, 0x56	; 86
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	84 e8       	ldi	r24, 0x84	; 132
    23b6:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    23b8:	e6 e5       	ldi	r30, 0x56	; 86
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
    23be:	88 23       	and	r24, r24
    23c0:	dc f7       	brge	.-10     	; 0x23b8 <TWI_writeByte+0x1c>
}
    23c2:	0f 90       	pop	r0
    23c4:	cf 91       	pop	r28
    23c6:	df 91       	pop	r29
    23c8:	08 95       	ret

000023ca <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    23ca:	df 93       	push	r29
    23cc:	cf 93       	push	r28
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    23d2:	e6 e5       	ldi	r30, 0x56	; 86
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	84 ec       	ldi	r24, 0xC4	; 196
    23d8:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    23da:	e6 e5       	ldi	r30, 0x56	; 86
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	80 81       	ld	r24, Z
    23e0:	88 23       	and	r24, r24
    23e2:	dc f7       	brge	.-10     	; 0x23da <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    23e4:	e3 e2       	ldi	r30, 0x23	; 35
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	80 81       	ld	r24, Z
}
    23ea:	cf 91       	pop	r28
    23ec:	df 91       	pop	r29
    23ee:	08 95       	ret

000023f0 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    23f0:	df 93       	push	r29
    23f2:	cf 93       	push	r28
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    23f8:	e6 e5       	ldi	r30, 0x56	; 86
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	84 e8       	ldi	r24, 0x84	; 132
    23fe:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2400:	e6 e5       	ldi	r30, 0x56	; 86
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	88 23       	and	r24, r24
    2408:	dc f7       	brge	.-10     	; 0x2400 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    240a:	e3 e2       	ldi	r30, 0x23	; 35
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
}
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	08 95       	ret

00002416 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2416:	df 93       	push	r29
    2418:	cf 93       	push	r28
    241a:	0f 92       	push	r0
    241c:	cd b7       	in	r28, 0x3d	; 61
    241e:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2420:	e1 e2       	ldi	r30, 0x21	; 33
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	80 81       	ld	r24, Z
    2426:	88 7f       	andi	r24, 0xF8	; 248
    2428:	89 83       	std	Y+1, r24	; 0x01
    return status;
    242a:	89 81       	ldd	r24, Y+1	; 0x01
}
    242c:	0f 90       	pop	r0
    242e:	cf 91       	pop	r28
    2430:	df 91       	pop	r29
    2432:	08 95       	ret

00002434 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2434:	df 93       	push	r29
    2436:	cf 93       	push	r28
    2438:	00 d0       	rcall	.+0      	; 0x243a <UART_init+0x6>
    243a:	00 d0       	rcall	.+0      	; 0x243c <UART_init+0x8>
    243c:	cd b7       	in	r28, 0x3d	; 61
    243e:	de b7       	in	r29, 0x3e	; 62
    2440:	9c 83       	std	Y+4, r25	; 0x04
    2442:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2444:	1a 82       	std	Y+2, r1	; 0x02
    2446:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2448:	eb e2       	ldi	r30, 0x2B	; 43
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	82 e0       	ldi	r24, 0x02	; 2
    244e:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2450:	ea e2       	ldi	r30, 0x2A	; 42
    2452:	f0 e0       	ldi	r31, 0x00	; 0
    2454:	88 e1       	ldi	r24, 0x18	; 24
    2456:	80 83       	st	Z, r24
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	

	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->ch_size)<<1) ;
    2458:	a0 e4       	ldi	r26, 0x40	; 64
    245a:	b0 e0       	ldi	r27, 0x00	; 0
    245c:	e0 e4       	ldi	r30, 0x40	; 64
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	80 81       	ld	r24, Z
    2462:	28 2f       	mov	r18, r24
    2464:	29 7f       	andi	r18, 0xF9	; 249
    2466:	eb 81       	ldd	r30, Y+3	; 0x03
    2468:	fc 81       	ldd	r31, Y+4	; 0x04
    246a:	86 81       	ldd	r24, Z+6	; 0x06
    246c:	88 2f       	mov	r24, r24
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	88 0f       	add	r24, r24
    2472:	99 1f       	adc	r25, r25
    2474:	82 2b       	or	r24, r18
    2476:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->Parity)<<4) ;
    2478:	a0 e4       	ldi	r26, 0x40	; 64
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	e0 e4       	ldi	r30, 0x40	; 64
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	28 2f       	mov	r18, r24
    2484:	2f 7c       	andi	r18, 0xCF	; 207
    2486:	eb 81       	ldd	r30, Y+3	; 0x03
    2488:	fc 81       	ldd	r31, Y+4	; 0x04
    248a:	84 81       	ldd	r24, Z+4	; 0x04
    248c:	88 2f       	mov	r24, r24
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	82 95       	swap	r24
    2492:	92 95       	swap	r25
    2494:	90 7f       	andi	r25, 0xF0	; 240
    2496:	98 27       	eor	r25, r24
    2498:	80 7f       	andi	r24, 0xF0	; 240
    249a:	98 27       	eor	r25, r24
    249c:	82 2b       	or	r24, r18
    249e:	8c 93       	st	X, r24
	
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->Stop)<<3) ;
    24a0:	a0 e4       	ldi	r26, 0x40	; 64
    24a2:	b0 e0       	ldi	r27, 0x00	; 0
    24a4:	e0 e4       	ldi	r30, 0x40	; 64
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	80 81       	ld	r24, Z
    24aa:	28 2f       	mov	r18, r24
    24ac:	27 7f       	andi	r18, 0xF7	; 247
    24ae:	eb 81       	ldd	r30, Y+3	; 0x03
    24b0:	fc 81       	ldd	r31, Y+4	; 0x04
    24b2:	85 81       	ldd	r24, Z+5	; 0x05
    24b4:	88 2f       	mov	r24, r24
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	88 0f       	add	r24, r24
    24ba:	99 1f       	adc	r25, r25
    24bc:	88 0f       	add	r24, r24
    24be:	99 1f       	adc	r25, r25
    24c0:	88 0f       	add	r24, r24
    24c2:	99 1f       	adc	r25, r25
    24c4:	82 2b       	or	r24, r18
    24c6:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    24c8:	eb 81       	ldd	r30, Y+3	; 0x03
    24ca:	fc 81       	ldd	r31, Y+4	; 0x04
    24cc:	80 81       	ld	r24, Z
    24ce:	91 81       	ldd	r25, Z+1	; 0x01
    24d0:	a2 81       	ldd	r26, Z+2	; 0x02
    24d2:	b3 81       	ldd	r27, Z+3	; 0x03
    24d4:	88 0f       	add	r24, r24
    24d6:	99 1f       	adc	r25, r25
    24d8:	aa 1f       	adc	r26, r26
    24da:	bb 1f       	adc	r27, r27
    24dc:	88 0f       	add	r24, r24
    24de:	99 1f       	adc	r25, r25
    24e0:	aa 1f       	adc	r26, r26
    24e2:	bb 1f       	adc	r27, r27
    24e4:	88 0f       	add	r24, r24
    24e6:	99 1f       	adc	r25, r25
    24e8:	aa 1f       	adc	r26, r26
    24ea:	bb 1f       	adc	r27, r27
    24ec:	9c 01       	movw	r18, r24
    24ee:	ad 01       	movw	r20, r26
    24f0:	80 e4       	ldi	r24, 0x40	; 64
    24f2:	92 e4       	ldi	r25, 0x42	; 66
    24f4:	af e0       	ldi	r26, 0x0F	; 15
    24f6:	b0 e0       	ldi	r27, 0x00	; 0
    24f8:	bc 01       	movw	r22, r24
    24fa:	cd 01       	movw	r24, r26
    24fc:	0e 94 29 13 	call	0x2652	; 0x2652 <__udivmodsi4>
    2500:	da 01       	movw	r26, r20
    2502:	c9 01       	movw	r24, r18
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	9a 83       	std	Y+2, r25	; 0x02
    2508:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    250a:	e0 e4       	ldi	r30, 0x40	; 64
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	89 81       	ldd	r24, Y+1	; 0x01
    2510:	9a 81       	ldd	r25, Y+2	; 0x02
    2512:	89 2f       	mov	r24, r25
    2514:	99 27       	eor	r25, r25
    2516:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2518:	e9 e2       	ldi	r30, 0x29	; 41
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	89 81       	ldd	r24, Y+1	; 0x01
    251e:	80 83       	st	Z, r24
}
    2520:	0f 90       	pop	r0
    2522:	0f 90       	pop	r0
    2524:	0f 90       	pop	r0
    2526:	0f 90       	pop	r0
    2528:	cf 91       	pop	r28
    252a:	df 91       	pop	r29
    252c:	08 95       	ret

0000252e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    252e:	df 93       	push	r29
    2530:	cf 93       	push	r28
    2532:	0f 92       	push	r0
    2534:	cd b7       	in	r28, 0x3d	; 61
    2536:	de b7       	in	r29, 0x3e	; 62
    2538:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    253a:	eb e2       	ldi	r30, 0x2B	; 43
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	80 81       	ld	r24, Z
    2540:	88 2f       	mov	r24, r24
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	80 72       	andi	r24, 0x20	; 32
    2546:	90 70       	andi	r25, 0x00	; 0
    2548:	00 97       	sbiw	r24, 0x00	; 0
    254a:	b9 f3       	breq	.-18     	; 0x253a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    254c:	ec e2       	ldi	r30, 0x2C	; 44
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	89 81       	ldd	r24, Y+1	; 0x01
    2552:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2554:	0f 90       	pop	r0
    2556:	cf 91       	pop	r28
    2558:	df 91       	pop	r29
    255a:	08 95       	ret

0000255c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    255c:	df 93       	push	r29
    255e:	cf 93       	push	r28
    2560:	cd b7       	in	r28, 0x3d	; 61
    2562:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2564:	eb e2       	ldi	r30, 0x2B	; 43
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	80 81       	ld	r24, Z
    256a:	88 23       	and	r24, r24
    256c:	dc f7       	brge	.-10     	; 0x2564 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    256e:	ec e2       	ldi	r30, 0x2C	; 44
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	80 81       	ld	r24, Z
}
    2574:	cf 91       	pop	r28
    2576:	df 91       	pop	r29
    2578:	08 95       	ret

0000257a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    257a:	df 93       	push	r29
    257c:	cf 93       	push	r28
    257e:	00 d0       	rcall	.+0      	; 0x2580 <UART_sendString+0x6>
    2580:	0f 92       	push	r0
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
    2586:	9b 83       	std	Y+3, r25	; 0x03
    2588:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    258a:	19 82       	std	Y+1, r1	; 0x01
    258c:	0e c0       	rjmp	.+28     	; 0x25aa <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    258e:	89 81       	ldd	r24, Y+1	; 0x01
    2590:	28 2f       	mov	r18, r24
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	8a 81       	ldd	r24, Y+2	; 0x02
    2596:	9b 81       	ldd	r25, Y+3	; 0x03
    2598:	fc 01       	movw	r30, r24
    259a:	e2 0f       	add	r30, r18
    259c:	f3 1f       	adc	r31, r19
    259e:	80 81       	ld	r24, Z
    25a0:	0e 94 97 12 	call	0x252e	; 0x252e <UART_sendByte>
		i++;
    25a4:	89 81       	ldd	r24, Y+1	; 0x01
    25a6:	8f 5f       	subi	r24, 0xFF	; 255
    25a8:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    25aa:	89 81       	ldd	r24, Y+1	; 0x01
    25ac:	28 2f       	mov	r18, r24
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	8a 81       	ldd	r24, Y+2	; 0x02
    25b2:	9b 81       	ldd	r25, Y+3	; 0x03
    25b4:	fc 01       	movw	r30, r24
    25b6:	e2 0f       	add	r30, r18
    25b8:	f3 1f       	adc	r31, r19
    25ba:	80 81       	ld	r24, Z
    25bc:	88 23       	and	r24, r24
    25be:	39 f7       	brne	.-50     	; 0x258e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    25c0:	0f 90       	pop	r0
    25c2:	0f 90       	pop	r0
    25c4:	0f 90       	pop	r0
    25c6:	cf 91       	pop	r28
    25c8:	df 91       	pop	r29
    25ca:	08 95       	ret

000025cc <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    25cc:	0f 93       	push	r16
    25ce:	1f 93       	push	r17
    25d0:	df 93       	push	r29
    25d2:	cf 93       	push	r28
    25d4:	00 d0       	rcall	.+0      	; 0x25d6 <UART_receiveString+0xa>
    25d6:	0f 92       	push	r0
    25d8:	cd b7       	in	r28, 0x3d	; 61
    25da:	de b7       	in	r29, 0x3e	; 62
    25dc:	9b 83       	std	Y+3, r25	; 0x03
    25de:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    25e0:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    25e2:	89 81       	ldd	r24, Y+1	; 0x01
    25e4:	28 2f       	mov	r18, r24
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ea:	9b 81       	ldd	r25, Y+3	; 0x03
    25ec:	8c 01       	movw	r16, r24
    25ee:	02 0f       	add	r16, r18
    25f0:	13 1f       	adc	r17, r19
    25f2:	0e 94 ae 12 	call	0x255c	; 0x255c <UART_recieveByte>
    25f6:	f8 01       	movw	r30, r16
    25f8:	80 83       	st	Z, r24
    25fa:	0f c0       	rjmp	.+30     	; 0x261a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	8f 5f       	subi	r24, 0xFF	; 255
    2600:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	28 2f       	mov	r18, r24
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	8a 81       	ldd	r24, Y+2	; 0x02
    260a:	9b 81       	ldd	r25, Y+3	; 0x03
    260c:	8c 01       	movw	r16, r24
    260e:	02 0f       	add	r16, r18
    2610:	13 1f       	adc	r17, r19
    2612:	0e 94 ae 12 	call	0x255c	; 0x255c <UART_recieveByte>
    2616:	f8 01       	movw	r30, r16
    2618:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	28 2f       	mov	r18, r24
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	8a 81       	ldd	r24, Y+2	; 0x02
    2622:	9b 81       	ldd	r25, Y+3	; 0x03
    2624:	fc 01       	movw	r30, r24
    2626:	e2 0f       	add	r30, r18
    2628:	f3 1f       	adc	r31, r19
    262a:	80 81       	ld	r24, Z
    262c:	83 32       	cpi	r24, 0x23	; 35
    262e:	31 f7       	brne	.-52     	; 0x25fc <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	28 2f       	mov	r18, r24
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	8a 81       	ldd	r24, Y+2	; 0x02
    2638:	9b 81       	ldd	r25, Y+3	; 0x03
    263a:	fc 01       	movw	r30, r24
    263c:	e2 0f       	add	r30, r18
    263e:	f3 1f       	adc	r31, r19
    2640:	10 82       	st	Z, r1
}
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	0f 90       	pop	r0
    2648:	cf 91       	pop	r28
    264a:	df 91       	pop	r29
    264c:	1f 91       	pop	r17
    264e:	0f 91       	pop	r16
    2650:	08 95       	ret

00002652 <__udivmodsi4>:
    2652:	a1 e2       	ldi	r26, 0x21	; 33
    2654:	1a 2e       	mov	r1, r26
    2656:	aa 1b       	sub	r26, r26
    2658:	bb 1b       	sub	r27, r27
    265a:	fd 01       	movw	r30, r26
    265c:	0d c0       	rjmp	.+26     	; 0x2678 <__udivmodsi4_ep>

0000265e <__udivmodsi4_loop>:
    265e:	aa 1f       	adc	r26, r26
    2660:	bb 1f       	adc	r27, r27
    2662:	ee 1f       	adc	r30, r30
    2664:	ff 1f       	adc	r31, r31
    2666:	a2 17       	cp	r26, r18
    2668:	b3 07       	cpc	r27, r19
    266a:	e4 07       	cpc	r30, r20
    266c:	f5 07       	cpc	r31, r21
    266e:	20 f0       	brcs	.+8      	; 0x2678 <__udivmodsi4_ep>
    2670:	a2 1b       	sub	r26, r18
    2672:	b3 0b       	sbc	r27, r19
    2674:	e4 0b       	sbc	r30, r20
    2676:	f5 0b       	sbc	r31, r21

00002678 <__udivmodsi4_ep>:
    2678:	66 1f       	adc	r22, r22
    267a:	77 1f       	adc	r23, r23
    267c:	88 1f       	adc	r24, r24
    267e:	99 1f       	adc	r25, r25
    2680:	1a 94       	dec	r1
    2682:	69 f7       	brne	.-38     	; 0x265e <__udivmodsi4_loop>
    2684:	60 95       	com	r22
    2686:	70 95       	com	r23
    2688:	80 95       	com	r24
    268a:	90 95       	com	r25
    268c:	9b 01       	movw	r18, r22
    268e:	ac 01       	movw	r20, r24
    2690:	bd 01       	movw	r22, r26
    2692:	cf 01       	movw	r24, r30
    2694:	08 95       	ret

00002696 <__prologue_saves__>:
    2696:	2f 92       	push	r2
    2698:	3f 92       	push	r3
    269a:	4f 92       	push	r4
    269c:	5f 92       	push	r5
    269e:	6f 92       	push	r6
    26a0:	7f 92       	push	r7
    26a2:	8f 92       	push	r8
    26a4:	9f 92       	push	r9
    26a6:	af 92       	push	r10
    26a8:	bf 92       	push	r11
    26aa:	cf 92       	push	r12
    26ac:	df 92       	push	r13
    26ae:	ef 92       	push	r14
    26b0:	ff 92       	push	r15
    26b2:	0f 93       	push	r16
    26b4:	1f 93       	push	r17
    26b6:	cf 93       	push	r28
    26b8:	df 93       	push	r29
    26ba:	cd b7       	in	r28, 0x3d	; 61
    26bc:	de b7       	in	r29, 0x3e	; 62
    26be:	ca 1b       	sub	r28, r26
    26c0:	db 0b       	sbc	r29, r27
    26c2:	0f b6       	in	r0, 0x3f	; 63
    26c4:	f8 94       	cli
    26c6:	de bf       	out	0x3e, r29	; 62
    26c8:	0f be       	out	0x3f, r0	; 63
    26ca:	cd bf       	out	0x3d, r28	; 61
    26cc:	09 94       	ijmp

000026ce <__epilogue_restores__>:
    26ce:	2a 88       	ldd	r2, Y+18	; 0x12
    26d0:	39 88       	ldd	r3, Y+17	; 0x11
    26d2:	48 88       	ldd	r4, Y+16	; 0x10
    26d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    26d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    26d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    26da:	8c 84       	ldd	r8, Y+12	; 0x0c
    26dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    26de:	aa 84       	ldd	r10, Y+10	; 0x0a
    26e0:	b9 84       	ldd	r11, Y+9	; 0x09
    26e2:	c8 84       	ldd	r12, Y+8	; 0x08
    26e4:	df 80       	ldd	r13, Y+7	; 0x07
    26e6:	ee 80       	ldd	r14, Y+6	; 0x06
    26e8:	fd 80       	ldd	r15, Y+5	; 0x05
    26ea:	0c 81       	ldd	r16, Y+4	; 0x04
    26ec:	1b 81       	ldd	r17, Y+3	; 0x03
    26ee:	aa 81       	ldd	r26, Y+2	; 0x02
    26f0:	b9 81       	ldd	r27, Y+1	; 0x01
    26f2:	ce 0f       	add	r28, r30
    26f4:	d1 1d       	adc	r29, r1
    26f6:	0f b6       	in	r0, 0x3f	; 63
    26f8:	f8 94       	cli
    26fa:	de bf       	out	0x3e, r29	; 62
    26fc:	0f be       	out	0x3f, r0	; 63
    26fe:	cd bf       	out	0x3d, r28	; 61
    2700:	ed 01       	movw	r28, r26
    2702:	08 95       	ret

00002704 <_exit>:
    2704:	f8 94       	cli

00002706 <__stop_program>:
    2706:	ff cf       	rjmp	.-2      	; 0x2706 <__stop_program>
